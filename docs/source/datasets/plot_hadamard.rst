
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "datasets/plot_hadamard.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_datasets_plot_hadamard.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_datasets_plot_hadamard.py:


Loading a Hadamard Ramp Simulation
==================================

Builds on...

.. GENERATED FROM PYTHON SOURCE LINES 7-13

.. code-block:: default

    import cbadc
    import cbadc.datasets.hadamard
    import scipy.signal
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 14-19

Create a Simulation Wrapper
----------------------------

We load the PCB A prototype by instantiating
the wrapper class as

.. GENERATED FROM PYTHON SOURCE LINES 19-22

.. code-block:: default


    simulation_wrapper = cbadc.datasets.hadamard.HadamardPCB('B')








.. GENERATED FROM PYTHON SOURCE LINES 23-29

Load a specific simulation
---------------------------

In this case we load
:py:func:`cbadc.datasets.hadamard.HadamardPCB.simulation_ramp_1_B`
simulation by invoking

.. GENERATED FROM PYTHON SOURCE LINES 29-38

.. code-block:: default


    (
        control_signal,
        ideal_control_signal,
        simulator,
        size,
    ) = simulation_wrapper.simulation_ramp_1_B()

    size = 1 << 12







.. GENERATED FROM PYTHON SOURCE LINES 39-42

Configure a Digital Estimator
-----------------------------


.. GENERATED FROM PYTHON SOURCE LINES 42-56

.. code-block:: default

    eta2 = 1e5
    L1 = 1 << 10
    L2 = 1 << 10
    OSR = 1 << 5


    digital_estimator = cbadc.digital_estimator.FIRFilter(
        simulator.analog_system, simulator.digital_control, eta2, L1, L2, downsample=OSR
    )

    print(digital_estimator, "\n")

    digital_estimator(control_signal)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    FIR estimator is parameterized as 
    eta2 = 100000.00, 50 [dB],
    Ts = 1e-06,
    K1 = 1024,
    K2 = 1024,
    and
    number_of_iterations = 9223372036854775808.
    Resulting in the filter coefficients
    h = 
    [[[-1.79e-11  3.60e-12  6.75e-13 ...  5.09e-12  3.63e-12  5.64e-12]
      [-1.85e-11  3.47e-12  7.56e-13 ...  5.20e-12  3.84e-12  5.79e-12]
      [-1.91e-11  3.33e-12  8.38e-13 ...  5.30e-12  4.05e-12  5.93e-12]
      ...
      [-1.91e-11 -3.33e-12  8.38e-13 ...  3.84e-12  5.93e-12  4.05e-12]
      [-1.85e-11 -3.47e-12  7.56e-13 ...  3.68e-12  5.79e-12  3.84e-12]
      [-1.79e-11 -3.60e-12  6.75e-13 ...  3.50e-12  5.64e-12  3.63e-12]]]. 





.. GENERATED FROM PYTHON SOURCE LINES 57-60

Post filtering with FIR
------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 60-67

.. code-block:: default


    numtaps = 1 << 10
    f_cutoff = 1.0 / OSR
    fir_filter = scipy.signal.firwin(numtaps, f_cutoff)

    digital_estimator.convolve((fir_filter))








.. GENERATED FROM PYTHON SOURCE LINES 68-71

Filtering Estimate
--------------------


.. GENERATED FROM PYTHON SOURCE LINES 71-76

.. code-block:: default


    u_hat = np.zeros(size // OSR)
    for index in cbadc.utilities.show_status(range(size // OSR)):
        u_hat[index] = next(digital_estimator)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/128 [00:00<?, ?it/s]      1%|          | 1/128 [00:00<01:06,  1.90it/s]    100%|##########| 128/128 [00:00<00:00, 219.24it/s]




.. GENERATED FROM PYTHON SOURCE LINES 77-80

Visualize Estimate
--------------------


.. GENERATED FROM PYTHON SOURCE LINES 80-92

.. code-block:: default


    t = np.arange(size // OSR) * OSR
    plt.plot(t, u_hat, label="$\hat{u}(t)$")
    plt.xlabel('$t / T$')
    plt.legend()
    plt.title("Estimated input signal")
    plt.grid(which='both')
    # offset = (L1 + L2) * 4
    # plt.xlim((offset, offset + 1000))
    plt.ylim((-0.6, 0.6))
    plt.tight_layout()




.. image-sg:: /datasets/images/sphx_glr_plot_hadamard_001.png
   :alt: Estimated input signal
   :srcset: /datasets/images/sphx_glr_plot_hadamard_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-96

Visualize Estimate Spectrum
---------------------------


.. GENERATED FROM PYTHON SOURCE LINES 96-110

.. code-block:: default


    plt.figure()
    u_hat_clipped = u_hat[(L1 + L2) // OSR :]
    freq, psd = cbadc.utilities.compute_power_spectral_density(
        u_hat_clipped, fs=1.0 / (simulator.digital_control.clock.T * OSR)
    )
    plt.semilogx(freq, 10 * np.log10(psd), label="$\hat{U}(f)$")
    plt.legend()
    plt.ylim((-300, 50))
    # plt.xlim((f_ref[1], f_ref[-1]))
    plt.xlabel('$f$ [Hz]')
    plt.ylabel('$ \mathrm{V}^2 \, / \, (1 \mathrm{Hz})$')
    plt.grid(which='both')
    # plt.show()



.. image-sg:: /datasets/images/sphx_glr_plot_hadamard_002.png
   :alt: plot hadamard
   :srcset: /datasets/images/sphx_glr_plot_hadamard_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.647 seconds)


.. _sphx_glr_download_datasets_plot_hadamard.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_hadamard.py <plot_hadamard.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_hadamard.ipynb <plot_hadamard.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
