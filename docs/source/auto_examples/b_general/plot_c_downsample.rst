
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/b_general/plot_c_downsample.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_b_general_plot_c_downsample.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_b_general_plot_c_downsample.py:


=============
Downsampling
=============

In this tutorial we demonstrate how to configure the digital estimator
for downsampling.

.. GENERATED FROM PYTHON SOURCE LINES 9-14

.. code-block:: default
   :lineno-start: 9

    import scipy.signal
    import numpy as np
    import cbadc as cbc
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 15-27

Setting up the Analog System and Digital Control
------------------------------------------------

In this example, we assume that we have access to a control signal
s[k] generated by the interactions of an analog system and digital control.
Furthermore, we a chain-of-integrators converter with corresponding
analog system and digital control.

.. image:: /images/chainOfIntegratorsGeneral.svg
   :width: 500
   :align: center
   :alt: The chain of integrators ADC.

.. GENERATED FROM PYTHON SOURCE LINES 27-48

.. code-block:: default
   :lineno-start: 28


    # Setup analog system and digital control

    N = 4
    M = N
    beta = 6250.
    rho = - beta * 1e-2
    T = 1.0/(2 * beta)

    analog_system = cbc.analog_system.ChainOfIntegrators(
        beta * np.ones(N),
        rho * np.ones(N),
        kappa=-beta * np.eye(N) + np.random.randn(N, N)
    )
    digital_control = cbc.digital_control.DigitalControl(T, M)

    # Summarize the analog system, digital control, and digital estimator.
    print(analog_system, "\n")
    print(digital_control)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The analog system is parameterized as:
    A =
    [[ -62.5    0.     0.     0. ]
     [6250.   -62.5    0.     0. ]
     [   0.  6250.   -62.5    0. ]
     [   0.     0.  6250.   -62.5]],
    B =
    [[6250.]
     [   0.]
     [   0.]
     [   0.]],
    CT = 
    [[1. 0. 0. 0.]
     [0. 1. 0. 0.]
     [0. 0. 1. 0.]
     [0. 0. 0. 1.]],
    Gamma =
    [[-6.25046867e+03 -1.12092240e+00 -6.99676493e-01  2.89482262e+00]
     [-1.00432402e+00 -6.25039760e+03 -4.86842384e-01  1.00332013e+00]
     [ 4.78923364e-02  9.29883508e-01 -6.25016096e+03 -5.94801737e-01]
     [ 2.44135171e-01  5.03688275e-01 -1.23821855e+00 -6.25104660e+03]],
    and Gamma_tildeT =
    [[ 9.99999986e-01  1.60679792e-04 -7.66219915e-06 -3.90586980e-05]
     [ 1.79336169e-04  9.99999970e-01 -1.48771892e-04 -8.05849950e-05]
     [ 1.11945353e-04  7.78927732e-05  9.99999971e-01  1.98109859e-04]
     [-4.63094014e-04 -1.60504324e-04  9.51523323e-05  9.99999875e-01]] 

    The Digital Control is parameterized as:
    T = 8e-05,
    M = 4, and next update at
    t = 8e-05




.. GENERATED FROM PYTHON SOURCE LINES 49-60

Loading Control Signal from File
--------------------------------

Next, we will load an actual control signal to demonstrate the digital
estimator's capabilities. To this end, we will use the
`sinusodial_simulation.adc` file that was produced in
:doc:`./plot_b_simulate_a_control_bounded_adc`.

The control signal file is encoded as raw binary data so to unpack it
correctly we will use the :func:`cbadc.utilities.read_byte_stream_from_file`
and :func:`cbadc.utilities.byte_stream_2_control_signal` functions.

.. GENERATED FROM PYTHON SOURCE LINES 60-76

.. code-block:: default
   :lineno-start: 61


    byte_stream = cbc.utilities.read_byte_stream_from_file(
        '../a_getting_started/sinusodial_simulation.adc', M)
    control_signal_sequences1 = cbc.utilities.byte_stream_2_control_signal(
        byte_stream, M)

    byte_stream = cbc.utilities.read_byte_stream_from_file(
        '../a_getting_started/sinusodial_simulation.adc', M)
    control_signal_sequences2 = cbc.utilities.byte_stream_2_control_signal(
        byte_stream, M)

    byte_stream = cbc.utilities.read_byte_stream_from_file(
        '../a_getting_started/sinusodial_simulation.adc', M)
    control_signal_sequences3 = cbc.utilities.byte_stream_2_control_signal(
        byte_stream, M)








.. GENERATED FROM PYTHON SOURCE LINES 77-80

Oversampling
-------------


.. GENERATED FROM PYTHON SOURCE LINES 80-86

.. code-block:: default
   :lineno-start: 81


    OSR = 32

    omega_3dB = 2 * np.pi / (2 * T * OSR)









.. GENERATED FROM PYTHON SOURCE LINES 87-92

Oversampling = 1
----------------------------------------

First we initialize our default estimator without a downsampling parameter
which then defaults to 1, i.e., no downsampling.

.. GENERATED FROM PYTHON SOURCE LINES 92-111

.. code-block:: default
   :lineno-start: 93


    # Set the bandwidth of the estimator
    G_at_omega = np.linalg.norm(
        analog_system.transfer_function_matrix(np.array([omega_3dB])))
    eta2 = G_at_omega**2
    print(f"eta2 = {eta2}, {10 * np.log10(eta2)} [dB]")

    # Set the filter size
    L1 = 1 << 10
    L2 = L1

    # Instantiate the digital estimator.
    digital_estimator_ref = cbc.digital_estimator.FIRFilter(
        analog_system, digital_control, eta2, L1, L2)
    digital_estimator_ref(control_signal_sequences1)

    print(digital_estimator_ref, "\n")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    eta2 = 465993.3316207895, 56.683797019667914 [dB]
    FIR estimator is parameterized as 
    eta2 = 465993.33, 57 [dB],
    Ts = 8e-05,
    K1 = 1024,
    K2 = 1024,
    and
    number_of_iterations = 9223372036854775808.
    Resulting in the filter coefficients
    h = 
    [[[-3.28512220e-19  3.85724705e-20  7.06293838e-21 -2.13744839e-21]
      [-3.48633731e-19  3.49055746e-20  8.28776246e-21 -2.14611575e-21]
      [-3.66860943e-19  3.06012663e-20  9.52638558e-21 -2.13404366e-21]
      ...
      [-3.66872168e-19 -3.80730850e-20  8.15232858e-21  3.01385707e-21]
      [-3.48646275e-19 -4.20059397e-20  6.74799158e-21  2.93188987e-21]
      [-3.28525871e-19 -4.52628194e-20  5.38380655e-21  2.82878240e-21]]]. 





.. GENERATED FROM PYTHON SOURCE LINES 112-115

Visualize Estimator's Transfer Function
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 115-149

.. code-block:: default
   :lineno-start: 116


    # Logspace frequencies
    frequencies = np.logspace(-3, 0, 100)
    omega = 4 * np.pi * beta * frequencies

    # Compute NTF
    ntf = digital_estimator_ref.noise_transfer_function(omega)
    ntf_dB = 20 * np.log10(np.abs(ntf))

    # Compute STF
    stf = digital_estimator_ref.signal_transfer_function(omega)
    stf_dB = 20 * np.log10(np.abs(stf.flatten()))

    # Signal attenuation at the input signal frequency
    stf_at_omega = digital_estimator_ref.signal_transfer_function(
        np.array([omega_3dB]))[0]

    # Plot
    plt.figure()
    plt.semilogx(frequencies, stf_dB, label='$STF(\omega)$')
    for n in range(N):
        plt.semilogx(frequencies, ntf_dB[0, n, :], label=f"$|NTF_{n+1}(\omega)|$")
    plt.semilogx(frequencies, 20 * np.log10(np.linalg.norm(
        ntf[:, 0, :], axis=0)), '--', label="$ || NTF(\omega) ||_2 $")

    # Add labels and legends to figure
    plt.legend()
    plt.grid(which='both')
    plt.title("Signal and noise transfer functions")
    plt.xlabel("$\omega / (4 \pi \\beta ) $")
    plt.ylabel("dB")
    plt.xlim((frequencies[1], frequencies[-1]))
    plt.gcf().tight_layout()




.. image:: /auto_examples/b_general/images/sphx_glr_plot_c_downsample_001.png
    :alt: Signal and noise transfer functions
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 150-154

FIR Filter With Downsampling
----------------------------

Next we repeat the initialization steps above but for a downsampled estimator

.. GENERATED FROM PYTHON SOURCE LINES 154-166

.. code-block:: default
   :lineno-start: 155


    digital_estimator_dow = cbc.digital_estimator.FIRFilter(
        analog_system,
        digital_control,
        eta2,
        L1,
        L2,
        downsample=OSR)
    digital_estimator_dow(control_signal_sequences2)

    print(digital_estimator_dow, "\n")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    FIR estimator is parameterized as 
    eta2 = 465993.33, 57 [dB],
    Ts = 8e-05,
    K1 = 1024,
    K2 = 1024,
    and
    number_of_iterations = 9223372036854775808.
    Resulting in the filter coefficients
    h = 
    [[[-3.28512220e-19  3.85724705e-20  7.06293838e-21 -2.13744839e-21]
      [-3.48633731e-19  3.49055746e-20  8.28776246e-21 -2.14611575e-21]
      [-3.66860943e-19  3.06012663e-20  9.52638558e-21 -2.13404366e-21]
      ...
      [-3.66872168e-19 -3.80730850e-20  8.15232858e-21  3.01385707e-21]
      [-3.48646275e-19 -4.20059397e-20  6.74799158e-21  2.93188987e-21]
      [-3.28525871e-19 -4.52628194e-20  5.38380655e-21  2.82878240e-21]]]. 





.. GENERATED FROM PYTHON SOURCE LINES 167-170

Estimating (Filtering)
----------------------


.. GENERATED FROM PYTHON SOURCE LINES 170-180

.. code-block:: default
   :lineno-start: 171


    # Set simulation length
    size = L2 << 4
    u_hat_ref = np.zeros(size)
    u_hat_dow = np.zeros(size // OSR)
    for index in range(size):
        u_hat_ref[index] = next(digital_estimator_ref)
    for index in range(size // OSR):
        u_hat_dow[index] = next(digital_estimator_dow)








.. GENERATED FROM PYTHON SOURCE LINES 181-187

Aliasing
========

We compare the difference between the downsampled estimate and the default.
Clearly, we are suffering from aliasing as is also explained by considering
the PSD plot.

.. GENERATED FROM PYTHON SOURCE LINES 187-217

.. code-block:: default
   :lineno-start: 188


    # compensate the built in L1 delay of FIR filter.
    t = np.arange(-L1 + 1, size - L1 + 1)
    t_down = np.arange(-(L1) // OSR, (size - L1) // OSR) * OSR + 1
    plt.plot(t, u_hat_ref, label="$\hat{u}(t)$ Reference")
    plt.plot(t_down, u_hat_dow, label="$\hat{u}(t)$ Downsampled")
    plt.xlabel('$t / T$')
    plt.legend()
    plt.title("Estimated input signal")
    plt.grid(which='both')
    plt.xlim((-50, 1000))
    plt.tight_layout()

    plt.figure()
    u_hat_ref_clipped = u_hat_ref[(L1 + L2):]
    u_hat_dow_clipped = u_hat_dow[(L1 + L2) // OSR:]
    f_ref, psd_ref = cbc.utilities.compute_power_spectral_density(
        u_hat_ref_clipped)
    f_dow, psd_dow = cbc.utilities.compute_power_spectral_density(
        u_hat_dow_clipped, fs=1.0/OSR)
    plt.semilogx(f_ref, 10 * np.log10(psd_ref), label="$\hat{U}(f)$ Referefence")
    plt.semilogx(f_dow, 10 * np.log10(psd_dow), label="$\hat{U}(f)$ Downsampled")
    plt.legend()
    plt.ylim((-300, 50))
    plt.xlim((f_ref[1], f_ref[-1]))
    plt.xlabel('frequency [Hz]')
    plt.ylabel('$ \mathrm{V}^2 \, / \, (1 \mathrm{Hz})$')
    plt.grid(which='both')
    plt.show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/b_general/images/sphx_glr_plot_c_downsample_002.png
          :alt: Estimated input signal
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/b_general/images/sphx_glr_plot_c_downsample_003.png
          :alt: plot c downsample
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/hammal/anaconda3/envs/py38/lib/python3.8/site-packages/scipy/signal/spectral.py:1961: UserWarning: nperseg = 16384 is greater than input length  = 14336, using nperseg = 14336
      warnings.warn('nperseg = {0:d} is greater than input length '
    /home/hammal/anaconda3/envs/py38/lib/python3.8/site-packages/scipy/signal/spectral.py:1961: UserWarning: nperseg = 16384 is greater than input length  = 448, using nperseg = 448
      warnings.warn('nperseg = {0:d} is greater than input length '




.. GENERATED FROM PYTHON SOURCE LINES 218-225

Appending a Bandlimiting Filter
-------------------------------

To battle the aliasing we extend the current estimator by placing a
bandlimiting filter in front of the system. This has the wanted effect since
we now reconstruct a signal shaped by both the STF of the system in addition
to a bandlimiting filter.

.. GENERATED FROM PYTHON SOURCE LINES 225-305

.. code-block:: default
   :lineno-start: 227



    filter_order = 2
    filter1 = cbc.analog_system.Cauer(filter_order, omega_3dB, 6, 20)
    filter2 = cbc.analog_system.ChebyshevI(filter_order, omega_3dB, 6)
    filter3 = cbc.analog_system.ChebyshevII(filter_order, omega_3dB, 20)
    filter4 = cbc.analog_system.ButterWorth(filter_order, omega_3dB)

    b1, a1 = scipy.signal.ellip(
        filter_order, 6, 60, omega_3dB, btype='low', analog=True)

    b3, a3 = scipy.signal.cheby2(
        filter_order, 60, omega_3dB, btype='low', analog=True)

    b2, a2 = scipy.signal.cheby1(
        filter_order, 6, omega_3dB, btype='low', analog=True)

    b4, a4 = scipy.signal.butter(
        filter_order, omega_3dB, btype='low', analog=True)

    w1, h1 = scipy.signal.freqs(b1, a1)
    w2, h2 = scipy.signal.freqs(b2, a2)
    w3, h3 = scipy.signal.freqs(b3, a3)
    w4, h4 = scipy.signal.freqs(b4, a4)


    print("Cauer", filter1)
    print("ChebyshevI", filter2)
    print("ChebyshevII", filter3)
    print("ButterWorth", filter4)
    print(omega_3dB)

    # Compute transfer functions for each frequency in frequencies
    transfer_function_filter1 = filter1.transfer_function_matrix(w1)
    transfer_function_filter2 = filter2.transfer_function_matrix(w2)
    transfer_function_filter3 = filter3.transfer_function_matrix(w3)
    transfer_function_filter4 = filter4.transfer_function_matrix(w4)

    # Add the norm ||G(omega)||_2
    plt.semilogx(w1/(2 * np.pi), 20 * np.log10(np.abs(h1)), label="Cauer Ref")
    plt.semilogx(
        w1/(2 * np.pi),
        20 * np.log10(np.linalg.norm(
            transfer_function_filter1[:, 0, :],
            axis=0)),
        label="Cauer")
    plt.semilogx(w2/(2 * np.pi), 20 * np.log10(np.abs(h2)), label="ChebyshevI Ref")
    plt.semilogx(
        w2/(2 * np.pi),
        20 * np.log10(np.linalg.norm(
            transfer_function_filter2[:, 0, :],
            axis=0)),
        label="ChebyshevI")
    plt.semilogx(w3/(2 * np.pi), 20 * np.log10(np.abs(h3)),
                 label="ChebyshevII Ref")
    plt.semilogx(
        w3/(2 * np.pi),
        20 * np.log10(np.linalg.norm(
            transfer_function_filter3[:, 0, :],
            axis=0)),
        label="ChebyshevII")
    plt.semilogx(w4/(2 * np.pi), 20 * np.log10(np.abs(h4)),
                 label="ButterWorth Ref")


    plt.semilogx(
        w4/(2 * np.pi),
        20 * np.log10(np.linalg.norm(
            transfer_function_filter4[:, 0, :],
            axis=0)),
        label="ButterWorth")
    # Add labels and legends to figure
    plt.legend()
    plt.grid(which='both')
    plt.title("Filter Transfer Functions")
    plt.xlabel("f [Hz]")
    plt.ylabel("dB")
    plt.xlim((5e1, 1e4))
    plt.gcf().tight_layout()




.. image:: /auto_examples/b_general/images/sphx_glr_plot_c_downsample_004.png
    :alt: Filter Transfer Functions
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Cauer The analog system is parameterized as:
    A =
    [[   0.            0.            0.        ]
     [   0.            0.            1.        ]
     [   1.           -1.         -424.97642508]],
    B =
    [[1.]
     [0.]
     [0.]],
    CT = 
    [[ 5.09225233e+05  4.07624804e+05 -4.24962363e+01]],
    Gamma =
    None,
    and Gamma_tildeT =
    None
    ChebyshevI The analog system is parameterized as:
    A =
    [[   0.          0.          0.      ]
     [   0.          0.          1.      ]
     [   1.         -1.       -484.103176]],
    B =
    [[1.]
     [0.]
     [0.]],
    CT = 
    [[ 0.00000000e+00 -3.79496011e+11 -2.11125913e+08]],
    Gamma =
    None,
    and Gamma_tildeT =
    None
    ChebyshevII The analog system is parameterized as:
    A =
    [[   0.            0.            0.        ]
     [   0.            0.            1.        ]
     [   1.           -1.         -736.31077819]],
    B =
    [[1.]
     [0.]
     [0.]],
    CT = 
    [[ 3.01196423e+05  2.71076781e+05 -7.36310778e+01]],
    Gamma =
    None,
    and Gamma_tildeT =
    None
    ButterWorth The analog system is parameterized as:
    A =
    [[ 0.00000000e+00  0.00000000e+00  0.00000000e+00]
     [ 0.00000000e+00  0.00000000e+00  1.00000000e+00]
     [ 1.00000000e+00 -1.00000000e+00 -1.73550115e+03]],
    B =
    [[1.]
     [0.]
     [0.]],
    CT = 
    [[ 0.00000000e+00 -2.26798214e+12 -2.61363369e+09]],
    Gamma =
    None,
    and Gamma_tildeT =
    None
    1227.1846303085129




.. GENERATED FROM PYTHON SOURCE LINES 306-309

New Analog System
-------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 309-340

.. code-block:: default
   :lineno-start: 310


    new_analog_system = cbc.analog_system.chain([filter4, analog_system])
    print(new_analog_system)

    transfer_function_analog_system = analog_system.transfer_function_matrix(omega)

    transfer_function_new_analog_system = new_analog_system.transfer_function_matrix(
        omega)

    plt.semilogx(
        omega/(2 * np.pi),
        20 * np.log10(np.linalg.norm(
            transfer_function_analog_system[:, 0, :],
            axis=0)),
        label="Default Analog System")
    plt.semilogx(
        omega/(2 * np.pi),
        20 * np.log10(np.linalg.norm(
            transfer_function_new_analog_system[:, 0, :],
            axis=0)),
        label="Combined Analog System")

    # Add labels and legends to figure
    plt.legend()
    plt.grid(which='both')
    plt.title("Analog System Transfer Function")
    plt.xlabel("f [Hz]")
    plt.ylabel("$||\mathbf{G}(\omega)||_2$ dB")
    # plt.xlim((frequencies[0], frequencies[-1]))
    plt.gcf().tight_layout()




.. image:: /auto_examples/b_general/images/sphx_glr_plot_c_downsample_005.png
    :alt: Analog System Transfer Function
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The analog system is parameterized as:
    A =
    [[ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
       0.00000000e+00  0.00000000e+00  0.00000000e+00]
     [ 0.00000000e+00  0.00000000e+00  1.00000000e+00  0.00000000e+00
       0.00000000e+00  0.00000000e+00  0.00000000e+00]
     [ 1.00000000e+00 -1.00000000e+00 -1.73550115e+03  0.00000000e+00
       0.00000000e+00  0.00000000e+00  0.00000000e+00]
     [ 0.00000000e+00 -1.41748884e+16 -1.63352106e+13 -6.25000000e+01
       0.00000000e+00  0.00000000e+00  0.00000000e+00]
     [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  6.25000000e+03
      -6.25000000e+01  0.00000000e+00  0.00000000e+00]
     [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
       6.25000000e+03 -6.25000000e+01  0.00000000e+00]
     [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
       0.00000000e+00  6.25000000e+03 -6.25000000e+01]],
    B =
    [[1.]
     [0.]
     [0.]
     [0.]
     [0.]
     [0.]
     [0.]],
    CT = 
    [[0. 0. 0. 1. 0. 0. 0.]
     [0. 0. 0. 0. 1. 0. 0.]
     [0. 0. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 0. 1.]],
    Gamma =
    [[ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00]
     [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00]
     [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00]
     [-6.25046867e+03 -1.12092240e+00 -6.99676493e-01  2.89482262e+00]
     [-1.00432402e+00 -6.25039760e+03 -4.86842384e-01  1.00332013e+00]
     [ 4.78923364e-02  9.29883508e-01 -6.25016096e+03 -5.94801737e-01]
     [ 2.44135171e-01  5.03688275e-01 -1.23821855e+00 -6.25104660e+03]],
    and Gamma_tildeT =
    [[ 0.00000000e+00  0.00000000e+00  0.00000000e+00  9.99999986e-01
       1.60679792e-04 -7.66219915e-06 -3.90586980e-05]
     [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  1.79336169e-04
       9.99999970e-01 -1.48771892e-04 -8.05849950e-05]
     [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  1.11945353e-04
       7.78927732e-05  9.99999971e-01  1.98109859e-04]
     [ 0.00000000e+00  0.00000000e+00  0.00000000e+00 -4.63094014e-04
      -1.60504324e-04  9.51523323e-05  9.99999875e-01]]




.. GENERATED FROM PYTHON SOURCE LINES 341-344

New Digital Estimator
--------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 344-356

.. code-block:: default
   :lineno-start: 345


    digital_estimator_dow_and_filtered = cbc.digital_estimator.FIRFilter(
        new_analog_system,
        digital_control,
        eta2,
        L1,
        L2,
        downsample=OSR)
    digital_estimator_dow_and_filtered(control_signal_sequences3)

    print(digital_estimator_dow_and_filtered)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/hammal/anaconda3/envs/py38/lib/python3.8/site-packages/scipy/sparse/linalg/matfuncs.py:709: LinAlgWarning: Ill-conditioned matrix (rcond=1.94072e-22): result may not be accurate.
      return solve(Q, P)
    /home/hammal/anaconda3/envs/py38/lib/python3.8/site-packages/scipy/sparse/linalg/matfuncs.py:709: LinAlgWarning: Ill-conditioned matrix (rcond=1.95636e-22): result may not be accurate.
      return solve(Q, P)
    FIR estimator is parameterized as 
    eta2 = 465993.33, 57 [dB],
    Ts = 8e-05,
    K1 = 1024,
    K2 = 1024,
    and
    number_of_iterations = 9223372036854775808.
    Resulting in the filter coefficients
    h = 
    [[[-1.49745425e-36  1.92728410e-37 -2.49590731e-38  3.88840218e-39]
      [-1.60510133e-36  2.06583024e-37 -2.67532992e-38  4.16792668e-39]
      [-1.72048680e-36  2.21433601e-37 -2.86765062e-38  4.46754527e-39]
      ...
      [-5.15659791e-36 -7.68355385e-37 -1.14595862e-37 -1.49385060e-38]
      [-4.81076263e-36 -7.16824433e-37 -1.06910312e-37 -1.39366318e-38]
      [-4.48812133e-36 -6.68749485e-37 -9.97402055e-38 -1.30019499e-38]]].




.. GENERATED FROM PYTHON SOURCE LINES 357-360

Plotting the Estimator's Signal and Noise Transfer Function
-----------------------------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 360-391

.. code-block:: default
   :lineno-start: 361


    # Compute NTF
    ntf = digital_estimator_dow_and_filtered.noise_transfer_function(omega)
    ntf_dow = digital_estimator_dow.noise_transfer_function(omega)

    # Compute STF
    stf = digital_estimator_dow_and_filtered.signal_transfer_function(omega)
    stf_dB = 20 * np.log10(np.abs(stf.flatten()))
    stf_dow = digital_estimator_dow.signal_transfer_function(omega)
    stf_dow_dB = 20 * np.log10(np.abs(stf_dow.flatten()))


    # Plot
    plt.figure()
    plt.semilogx(omega/(2 * np.pi), stf_dB, label='$STF(\omega)$ New')
    plt.semilogx(omega/(2 * np.pi), stf_dow_dB, label='$STF(\omega)$ Old')
    plt.semilogx(omega/(2 * np.pi), 20 * np.log10(np.linalg.norm(
        ntf[:, 0, :], axis=0)), '--', label="$ || NTF(\omega) ||_2 $ New")
    plt.semilogx(omega/(2 * np.pi), 20 * np.log10(np.linalg.norm(
        ntf_dow[:, 0, :], axis=0)), '--', label="$ || NTF(\omega) ||_2 $ Old")

    # Add labels and legends to figure
    plt.legend()
    plt.grid(which='both')
    plt.title("Signal and noise transfer functions")
    plt.xlabel("f [Hz]")
    plt.ylabel("dB")
    # plt.xlim((frequencies[0], frequencies[-1]))
    plt.gcf().tight_layout()





.. image:: /auto_examples/b_general/images/sphx_glr_plot_c_downsample_006.png
    :alt: Signal and noise transfer functions
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 392-395

Filtering Estimate
--------------------


.. GENERATED FROM PYTHON SOURCE LINES 395-418

.. code-block:: default
   :lineno-start: 397



    u_hat_dow_and_filt = np.zeros(size // OSR)
    for index in range(size // OSR):
        u_hat_dow_and_filt[index] = next(digital_estimator_dow_and_filtered)

    plt.figure()
    u_hat_dow_and_filt_clipped = u_hat_dow_and_filt[(L1 + L2) // OSR:]
    _, psd_dow_and_filt = cbc.utilities.compute_power_spectral_density(
        u_hat_dow_and_filt_clipped, fs=1.0/OSR)
    plt.semilogx(f_ref, 10 * np.log10(psd_ref), label="$\hat{U}(f)$ Referefence")
    plt.semilogx(f_dow, 10 * np.log10(psd_dow), label="$\hat{U}(f)$ Downsampled")
    plt.semilogx(f_dow, 10 * np.log10(psd_dow_and_filt),
                 label="$\hat{U}(f)$ Downsampled and Filtered")
    plt.legend()
    plt.ylim((-300, 50))
    plt.xlim((f_ref[1], f_ref[-1]))
    plt.xlabel('frequency [Hz]')
    plt.ylabel('$ \mathrm{V}^2 \, / \, (1 \mathrm{Hz})$')
    plt.grid(which='both')
    plt.show()





.. image:: /auto_examples/b_general/images/sphx_glr_plot_c_downsample_007.png
    :alt: plot c downsample
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/hammal/anaconda3/envs/py38/lib/python3.8/site-packages/scipy/signal/spectral.py:1961: UserWarning: nperseg = 16384 is greater than input length  = 448, using nperseg = 448
      warnings.warn('nperseg = {0:d} is greater than input length '




.. GENERATED FROM PYTHON SOURCE LINES 419-422

Compare Filter Coefficients
---------------------------


.. GENERATED FROM PYTHON SOURCE LINES 422-444

.. code-block:: default
   :lineno-start: 422

    impulse_response_dB_dow = 20 * \
        np.log10(np.linalg.norm(
            np.array(digital_estimator_dow.h[0, :, :]), axis=1))
    impulse_response_dB_dow_and_filt = 20 * \
        np.log10(np.linalg.norm(
            np.array(digital_estimator_dow_and_filtered.h[0, :, :]), axis=1))


    plt.figure()
    plt.plot(np.arange(0, L1),
             impulse_response_dB_dow[L1:],
             label="Ref")
    plt.plot(np.arange(0, L1),
             impulse_response_dB_dow_and_filt[L1:],
             label="Filtered")
    plt.legend()
    plt.xlabel("filter tap k")
    plt.ylabel("$|| \mathbf{h} [k]||_2$ [dB]")
    # plt.xlim((0, filter_lengths[-1]))
    plt.grid(which='both')





.. image:: /auto_examples/b_general/images/sphx_glr_plot_c_downsample_008.png
    :alt: plot c downsample
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  32.423 seconds)


.. _sphx_glr_download_auto_examples_b_general_plot_c_downsample.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_c_downsample.py <plot_c_downsample.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_c_downsample.ipynb <plot_c_downsample.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
