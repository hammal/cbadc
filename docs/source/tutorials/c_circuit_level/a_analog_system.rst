
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/c_circuit_level/a_analog_system.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_c_circuit_level_a_analog_system.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_c_circuit_level_a_analog_system.py:


An Analog System Model
======================

We demonstrate how an analog system can be transformed into a boilerplate
verilog-ams circuit model.

.. GENERATED FROM PYTHON SOURCE LINES 8-13

.. code-block:: default


    import cbadc
    import numpy as np
    import matplotlib.pyplot as plt


.. GENERATED FROM PYTHON SOURCE LINES 14-21

Setting up an Analog System
-----------------------------

We start by instantiating an analag system. In this case we use
high level utilities functions from the :py:mod:`cbadc.specification`
module.


.. GENERATED FROM PYTHON SOURCE LINES 21-53

.. code-block:: default


    # Fix system parameters such as effective number of bits
    ENOB = 16
    # System order
    N = 4
    # Bandwidth
    BW = 1e6

    # Instantiate leap-frog analog system is created as
    analog_system, _ = cbadc.specification.get_leap_frog(ENOB=ENOB, N=N, BW=BW)

    # Visualize the analog system's transfer functions
    BW_log = np.log10(BW)
    frequencies = np.logspace(BW_log - 2, BW_log + 1, 500)
    omegas = 2 * np.pi * frequencies
    transfer_function = analog_system.transfer_function_matrix(omegas)
    plt.semilogx(
        frequencies,
        20 * np.log10(np.linalg.norm(transfer_function[:, 0, :], axis=0)),
        label="leap-frog $ ||\mathbf{G}(\omega)||_2 $",
    )

    # Add labels and legends to figure
    plt.legend()
    plt.grid(which="both")
    plt.title("Analog system transfer function")
    plt.xlabel("$f$ [Hz]")
    plt.ylabel("dB")
    plt.xlim((frequencies[0], frequencies[-1]))
    plt.gcf().tight_layout()
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 54-63

Instantiating a Circuit Level Model
-----------------------------------

Using the :py:mod:`cbadc.circuit_level` module we can now start turning our
nominal analog system into a circuit level system model.

We will start with the highest layer of abstraction. Namely, the state space
equations modeled directly using the verilog-ams language


.. GENERATED FROM PYTHON SOURCE LINES 63-94

.. code-block:: default


    # verilog_analog_system = cbadc.circuit_level.AnalogSystemStateSpaceEquations(
    #     analog_system
    # )

    # # The verilog module description can be accessed by
    # print(verilog_analog_system.render())

    # # Alternatively, we can create a corresponding verilog-ams file as
    # verilog_analog_system.to_file(filename="verilog_analog_system.vams")

    # # The created file can be :download:`downloaded here <verilog_analog_system.vams>`

    # ###############################################################################
    # # Op-amps
    # # -------
    # #
    # # Next we realize the same analog system using an ideal op-amp configuration
    # # with capacitive feedback.
    # #

    # C = 1e-12
    # ideal_op_amp_analog_system = cbadc.circuit_level.AnalogSystemIdealOpAmp(
    #     analog_system, C
    # )

    # # The verilog module description can be accessed by
    # print(ideal_op_amp_analog_system.render())

    # # Alternatively, we can create a corresponding verilog-ams file as
    # ideal_op_amp_analog_system.to_file(filename="ideal_op_amp_analog_system.vams")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_tutorials_c_circuit_level_a_analog_system.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: a_analog_system.py <a_analog_system.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: a_analog_system.ipynb <a_analog_system.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
