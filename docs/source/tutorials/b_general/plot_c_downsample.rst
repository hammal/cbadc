
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/b_general/plot_c_downsample.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_b_general_plot_c_downsample.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_b_general_plot_c_downsample.py:


=============
Downsampling
=============

In this tutorial we demonstrate how to configure the digital estimator
for downsampling.

.. GENERATED FROM PYTHON SOURCE LINES 9-14

.. code-block:: default
   :lineno-start: 9

    import scipy.signal
    import numpy as np
    import cbadc as cbc
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 15-27

Setting up the Analog System and Digital Control
------------------------------------------------

In this example, we assume that we have access to a control signal
s[k] generated by the interactions of an analog system and digital control.
Furthermore, we a chain-of-integrators converter with corresponding
analog system and digital control.

.. image:: /images/chainOfIntegratorsGeneral.svg
   :width: 500
   :align: center
   :alt: The chain of integrators ADC.

.. GENERATED FROM PYTHON SOURCE LINES 27-54

.. code-block:: default
   :lineno-start: 28


    # Setup analog system and digital control

    # We fix the number of analog states.
    N = 6
    M = N
    # Set the amplification factor.
    beta = 6250.
    # In this example, each nodes amplification and local feedback will be set
    # identically.
    betaVec = beta * np.ones(N)
    rhoVec = -betaVec * 1e-2
    kappaVec = - beta * np.eye(N)

    # Instantiate a chain-of-integrators analog system.
    analog_system = cbc.analog_system.ChainOfIntegrators(betaVec, rhoVec, kappaVec)


    T = 1/(2 * beta)
    digital_control = cbc.digital_control.DigitalControl(T, M)


    # Summarize the analog system, digital control, and digital estimator.
    print(analog_system, "\n")
    print(digital_control)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The analog system is parameterized as:
    A =
    [[ -62.5    0.     0.     0.     0.     0. ]
     [6250.   -62.5    0.     0.     0.     0. ]
     [   0.  6250.   -62.5    0.     0.     0. ]
     [   0.     0.  6250.   -62.5    0.     0. ]
     [   0.     0.     0.  6250.   -62.5    0. ]
     [   0.     0.     0.     0.  6250.   -62.5]],
    B =
    [[6250.]
     [   0.]
     [   0.]
     [   0.]
     [   0.]
     [   0.]],
    CT = 
    [[1. 0. 0. 0. 0. 0.]
     [0. 1. 0. 0. 0. 0.]
     [0. 0. 1. 0. 0. 0.]
     [0. 0. 0. 1. 0. 0.]
     [0. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 1.]],
    Gamma =
    [[-6250.    -0.    -0.    -0.    -0.    -0.]
     [   -0. -6250.    -0.    -0.    -0.    -0.]
     [   -0.    -0. -6250.    -0.    -0.    -0.]
     [   -0.    -0.    -0. -6250.    -0.    -0.]
     [   -0.    -0.    -0.    -0. -6250.    -0.]
     [   -0.    -0.    -0.    -0.    -0. -6250.]],
    Gamma_tildeT =
    [[1. 0. 0. 0. 0. 0.]
     [0. 1. 0. 0. 0. 0.]
     [0. 0. 1. 0. 0. 0.]
     [0. 0. 0. 1. 0. 0.]
     [0. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 1.]], and D=[[0.]
     [0.]
     [0.]
     [0.]
     [0.]
     [0.]] 

    The Digital Control is parameterized as:
    T = 8e-05,
    M = 6, and next update at
    t = 8e-05




.. GENERATED FROM PYTHON SOURCE LINES 55-66

Loading Control Signal from File
--------------------------------

Next, we will load an actual control signal to demonstrate the digital
estimator's capabilities. To this end, we will use the
`sinusodial_simulation.adcs` file that was produced in
:doc:`./plot_b_simulate_a_control_bounded_adc`.

The control signal file is encoded as raw binary data so to unpack it
correctly we will use the :func:`cbadc.utilities.read_byte_stream_from_file`
and :func:`cbadc.utilities.byte_stream_2_control_signal` functions.

.. GENERATED FROM PYTHON SOURCE LINES 66-89

.. code-block:: default
   :lineno-start: 67


    byte_stream = cbc.utilities.read_byte_stream_from_file(
        '../a_getting_started/sinusodial_simulation.adcs', M)
    control_signal_sequences1 = cbc.utilities.byte_stream_2_control_signal(
        byte_stream, M)

    byte_stream = cbc.utilities.read_byte_stream_from_file(
        '../a_getting_started/sinusodial_simulation.adcs', M)
    control_signal_sequences2 = cbc.utilities.byte_stream_2_control_signal(
        byte_stream, M)

    byte_stream = cbc.utilities.read_byte_stream_from_file(
        '../a_getting_started/sinusodial_simulation.adcs', M)
    control_signal_sequences3 = cbc.utilities.byte_stream_2_control_signal(
        byte_stream, M)


    byte_stream = cbc.utilities.read_byte_stream_from_file(
        '../a_getting_started/sinusodial_simulation.adcs', M)
    control_signal_sequences4 = cbc.utilities.byte_stream_2_control_signal(
        byte_stream, M)









.. GENERATED FROM PYTHON SOURCE LINES 90-93

Oversampling
-------------


.. GENERATED FROM PYTHON SOURCE LINES 93-99

.. code-block:: default
   :lineno-start: 94


    OSR = 16

    omega_3dB = 2 * np.pi / (T * OSR)









.. GENERATED FROM PYTHON SOURCE LINES 100-105

Oversampling = 1
----------------------------------------

First we initialize our default estimator without a downsampling parameter
which then defaults to 1, i.e., no downsampling.

.. GENERATED FROM PYTHON SOURCE LINES 105-125

.. code-block:: default
   :lineno-start: 106


    # Set the bandwidth of the estimator
    G_at_omega = np.linalg.norm(
        analog_system.transfer_function_matrix(np.array([omega_3dB / 2])))
    eta2 = G_at_omega**2
    # eta2 = 1.0
    print(f"eta2 = {eta2}, {10 * np.log10(eta2)} [dB]")

    # Set the filter size
    L1 = 1 << 12
    L2 = L1

    # Instantiate the digital estimator.
    digital_estimator_ref = cbc.digital_estimator.FIRFilter(
        analog_system, digital_control, eta2, L1, L2)
    digital_estimator_ref(control_signal_sequences1)

    print(digital_estimator_ref, "\n")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    eta2 = 87574.25572661227, 49.42376455036846 [dB]
    FIR estimator is parameterized as 
    eta2 = 87574.26, 49 [dB],
    Ts = 8e-05,
    K1 = 4096,
    K2 = 4096,
    and
    number_of_iterations = 9223372036854775808.
    Resulting in the filter coefficients
    h = 
    [[[ 3.55990445e-95  1.42412246e-95 -8.07811499e-96 -6.45762292e-97
        1.32955934e-96 -9.72617900e-98]
      [ 2.76240492e-95  1.82636990e-95 -7.62786724e-96 -1.33980733e-96
        1.38622941e-96 -1.24737454e-98]
      [ 1.76589627e-95  2.19922553e-95 -6.82068247e-96 -2.05614928e-96
        1.39325750e-96  8.21379656e-98]
      ...
      [ 1.76589627e-95 -2.16391013e-95 -7.69373510e-96  1.62200519e-96
        1.54381374e-96  4.50497165e-98]
      [ 2.76240492e-95 -1.77112250e-95 -8.34780716e-96  8.61459580e-97
        1.47844576e-96  1.38257124e-97]
      [ 3.55990446e-95 -1.35292339e-95 -8.63396392e-96  1.44959196e-97
        1.36586535e-96  2.17212387e-97]]]. 





.. GENERATED FROM PYTHON SOURCE LINES 126-129

Visualize Estimator's Transfer Function
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 129-163

.. code-block:: default
   :lineno-start: 130


    # Logspace frequencies
    frequencies = np.logspace(-3, 0, 100)
    omega = 4 * np.pi * beta * frequencies

    # Compute NTF
    ntf = digital_estimator_ref.noise_transfer_function(omega)
    ntf_dB = 20 * np.log10(np.abs(ntf))

    # Compute STF
    stf = digital_estimator_ref.signal_transfer_function(omega)
    stf_dB = 20 * np.log10(np.abs(stf.flatten()))

    # Signal attenuation at the input signal frequency
    stf_at_omega = digital_estimator_ref.signal_transfer_function(
        np.array([omega_3dB]))[0]

    # Plot
    plt.figure()
    plt.semilogx(frequencies, stf_dB, label='$STF(\omega)$')
    for n in range(N):
        plt.semilogx(frequencies, ntf_dB[0, n, :], label=f"$|NTF_{n+1}(\omega)|$")
    plt.semilogx(frequencies, 20 * np.log10(np.linalg.norm(
        ntf[:, 0, :], axis=0)), '--', label="$ || NTF(\omega) ||_2 $")

    # Add labels and legends to figure
    plt.legend()
    plt.grid(which='both')
    plt.title("Signal and noise transfer functions")
    plt.xlabel("$\omega / (4 \pi \\beta ) $")
    plt.ylabel("dB")
    plt.xlim((frequencies[5], frequencies[-1]))
    plt.gcf().tight_layout()




.. image:: /tutorials/b_general/images/sphx_glr_plot_c_downsample_001.png
    :alt: Signal and noise transfer functions
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /drives1/PhD/cbadc/docs/code_examples/b_general/plot_c_downsample.py:136: RuntimeWarning: divide by zero encountered in log10
      ntf_dB = 20 * np.log10(np.abs(ntf))
    /drives1/PhD/cbadc/docs/code_examples/b_general/plot_c_downsample.py:151: RuntimeWarning: divide by zero encountered in log10
      plt.semilogx(frequencies, 20 * np.log10(np.linalg.norm(




.. GENERATED FROM PYTHON SOURCE LINES 164-168

FIR Filter With Downsampling
----------------------------

Next we repeat the initialization steps above but for a downsampled estimator

.. GENERATED FROM PYTHON SOURCE LINES 168-180

.. code-block:: default
   :lineno-start: 169


    digital_estimator_dow = cbc.digital_estimator.FIRFilter(
        analog_system,
        digital_control,
        eta2,
        L1,
        L2,
        downsample=OSR)
    digital_estimator_dow(control_signal_sequences2)

    print(digital_estimator_dow, "\n")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    FIR estimator is parameterized as 
    eta2 = 87574.26, 49 [dB],
    Ts = 8e-05,
    K1 = 4096,
    K2 = 4096,
    and
    number_of_iterations = 9223372036854775808.
    Resulting in the filter coefficients
    h = 
    [[[ 3.55990445e-95  1.42412246e-95 -8.07811499e-96 -6.45762292e-97
        1.32955934e-96 -9.72617900e-98]
      [ 2.76240492e-95  1.82636990e-95 -7.62786724e-96 -1.33980733e-96
        1.38622941e-96 -1.24737454e-98]
      [ 1.76589627e-95  2.19922553e-95 -6.82068247e-96 -2.05614928e-96
        1.39325750e-96  8.21379656e-98]
      ...
      [ 1.76589627e-95 -2.16391013e-95 -7.69373510e-96  1.62200519e-96
        1.54381374e-96  4.50497165e-98]
      [ 2.76240492e-95 -1.77112250e-95 -8.34780716e-96  8.61459580e-97
        1.47844576e-96  1.38257124e-97]
      [ 3.55990446e-95 -1.35292339e-95 -8.63396392e-96  1.44959196e-97
        1.36586535e-96  2.17212387e-97]]]. 





.. GENERATED FROM PYTHON SOURCE LINES 181-184

Estimating (Filtering)
----------------------


.. GENERATED FROM PYTHON SOURCE LINES 184-194

.. code-block:: default
   :lineno-start: 185


    # Set simulation length
    size = 1 << 17
    u_hat_ref = np.zeros(size)
    u_hat_dow = np.zeros(size // OSR)
    for index in range(size):
        u_hat_ref[index] = next(digital_estimator_ref)
    for index in range(size // OSR):
        u_hat_dow[index] = next(digital_estimator_dow)








.. GENERATED FROM PYTHON SOURCE LINES 195-201

Aliasing
========

We compare the difference between the downsampled estimate and the default.
Clearly, we are suffering from aliasing as is also explained by considering
the PSD plot.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: default
   :lineno-start: 202


    # compensate the built in L1 delay of FIR filter.
    t = np.arange(-L1 + 1, size - L1 + 1)
    t_down = np.arange(-(L1) // OSR, (size - L1) // OSR) * OSR + 1
    plt.plot(t, u_hat_ref, label="$\hat{u}(t)$ Reference")
    plt.plot(t_down, u_hat_dow, label="$\hat{u}(t)$ Downsampled")
    plt.xlabel('$t / T$')
    plt.legend()
    plt.title("Estimated input signal")
    plt.grid(which='both')
    plt.xlim((-50, 1000))
    plt.tight_layout()

    plt.figure()
    u_hat_ref_clipped = u_hat_ref[(L1 + L2):]
    u_hat_dow_clipped = u_hat_dow[(L1 + L2) // OSR:]
    f_ref, psd_ref = cbc.utilities.compute_power_spectral_density(
        u_hat_ref_clipped, fs=1.0/T)
    f_dow, psd_dow = cbc.utilities.compute_power_spectral_density(
        u_hat_dow_clipped, fs=1.0/(T * OSR))
    plt.semilogx(f_ref, 10 * np.log10(psd_ref), label="$\hat{U}(f)$ Referefence")
    plt.semilogx(f_dow, 10 * np.log10(psd_dow), label="$\hat{U}(f)$ Downsampled")
    plt.legend()
    plt.ylim((-300, 50))
    plt.xlim((f_ref[1], f_ref[-1]))
    plt.xlabel('$f$ [Hz]')
    plt.ylabel('$ \mathrm{V}^2 \, / \, (1 \mathrm{Hz})$')
    plt.grid(which='both')
    plt.show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /tutorials/b_general/images/sphx_glr_plot_c_downsample_002.png
          :alt: Estimated input signal
          :class: sphx-glr-multi-img

    *

      .. image:: /tutorials/b_general/images/sphx_glr_plot_c_downsample_003.png
          :alt: plot c downsample
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/hammal/anaconda3/envs/py38/lib/python3.8/site-packages/scipy/signal/spectral.py:1961: UserWarning: nperseg = 16384 is greater than input length  = 7680, using nperseg = 7680
      warnings.warn('nperseg = {0:d} is greater than input length '




.. GENERATED FROM PYTHON SOURCE LINES 232-242

Prepending a Virtual Bandlimiting Filter
----------------------------------------

To battle the aliasing we extend the current estimator by placing a
bandlimiting filter in front of the system. Note that this filter is a
conceptual addition and not actually part of the physical analog system.
Regardless, this effectively suppresses aliasing since we now reconstruct
a signal shaped by both the STF of the system in addition
to a bandlimiting filter.


.. GENERATED FROM PYTHON SOURCE LINES 242-268

.. code-block:: default
   :lineno-start: 243


    wp = omega_3dB / 2.0
    ws = omega_3dB
    gpass = 0.1
    gstop = 80

    filter = cbc.analog_system.IIRDesign(wp, ws, gpass, gstop, ftype="ellip")

    # Compute transfer functions for each frequency in frequencies
    transfer_function_filter = filter.transfer_function_matrix(omega)

    plt.semilogx(
        omega/(2 * np.pi),
        20 * np.log10(np.linalg.norm(
            transfer_function_filter[:, 0, :],
            axis=0)),
        label="Cauer")
    # Add labels and legends to figure
    # plt.legend()
    plt.grid(which='both')
    plt.title("Filter Transfer Functions")
    plt.xlabel("$f$ [Hz]")
    plt.ylabel("dB")
    plt.xlim((5e1, 1e4))
    plt.gcf().tight_layout()




.. image:: /tutorials/b_general/images/sphx_glr_plot_c_downsample_004.png
    :alt: Filter Transfer Functions
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [6 3 5 2 4 1 0]
    [3 0 4 1 5 2]
    The analog system is parameterized as:
    A =
    [[ -158.38446133  2539.20266208]
     [-2539.20266208  -158.38446133]],
    B =
    [[1.30658512]
     [0.        ]],
    CT = 
    [[  -316.76892266 -26436.53373967]],
    Gamma =
    None,
    Gamma_tildeT =
    None, and D=[[1.30658512]]
    The analog system is parameterized as:
    A =
    [[ -507.41451126  2151.20875995]
     [-2151.20875995  -507.41451126]],
    B =
    [[1.30658512]
     [0.        ]],
    CT = 
    [[-1014.82902253 -9538.44502979]],
    Gamma =
    None,
    Gamma_tildeT =
    None, and D=[[1.30658512]]
    The analog system is parameterized as:
    A =
    [[ -872.67675645  1287.52708591]
     [-1287.52708591  -872.67675645]],
    B =
    [[1.30658512]
     [0.        ]],
    CT = 
    [[ -1745.35351289 -12667.96410961]],
    Gamma =
    None,
    Gamma_tildeT =
    None, and D=[[1.30658512]]
    The analog system is parameterized as:
    A =
    [[-1049.84307128]],
    B =
    [[1.14305954]],
    CT = 
    [[1.]],
    Gamma =
    None,
    Gamma_tildeT =
    None, and D=[[0.]]




.. GENERATED FROM PYTHON SOURCE LINES 269-272

New Analog System
-------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 272-303

.. code-block:: default
   :lineno-start: 273


    new_analog_system = cbc.analog_system.chain([filter, analog_system])
    print(new_analog_system)

    transfer_function_analog_system = analog_system.transfer_function_matrix(omega)

    transfer_function_new_analog_system = new_analog_system.transfer_function_matrix(
        omega)

    plt.semilogx(
        omega/(2 * np.pi),
        20 * np.log10(np.linalg.norm(
            transfer_function_analog_system[:, 0, :],
            axis=0)),
        label="Default Analog System")
    plt.semilogx(
        omega/(2 * np.pi),
        20 * np.log10(np.linalg.norm(
            transfer_function_new_analog_system[:, 0, :],
            axis=0)),
        label="Combined Analog System")

    # Add labels and legends to figure
    plt.legend()
    plt.grid(which='both')
    plt.title("Analog System Transfer Function")
    plt.xlabel("$f$ [Hz]")
    plt.ylabel("$||\mathbf{G}(\omega)||_2$ dB")
    # plt.xlim((frequencies[0], frequencies[-1]))
    plt.gcf().tight_layout()




.. image:: /tutorials/b_general/images/sphx_glr_plot_c_downsample_005.png
    :alt: Analog System Transfer Function
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The analog system is parameterized as:
    A =
    [[  -158.38446133   2539.20266208      0.              0.
           0.              0.              0.              0.
           0.              0.              0.              0.
           0.        ]
     [ -2539.20266208   -158.38446133      0.              0.
           0.              0.              0.              0.
           0.              0.              0.              0.
           0.        ]
     [  -413.88555926 -34541.58147714   -507.41451126   2151.20875995
           0.              0.              0.              0.
           0.              0.              0.              0.
           0.        ]
     [     0.              0.          -2151.20875995   -507.41451126
           0.              0.              0.              0.
           0.              0.              0.              0.
           0.        ]
     [  -540.77671105 -45131.51620749  -1325.96049513 -12462.79029642
        -872.67675645   1287.52708591      0.              0.
           0.              0.              0.              0.
           0.        ]
     [     0.              0.              0.              0.
       -1287.52708591   -872.67675645      0.              0.
           0.              0.              0.              0.
           0.        ]
     [  -618.13997929 -51588.01021568  -1515.65179538 -14245.71135992
       -1995.04298591 -14480.23724472  -1049.84307128      0.
           0.              0.              0.              0.
           0.        ]
     [     0.              0.              0.              0.
           0.              0.           6250.            -62.5
           0.              0.              0.              0.
           0.        ]
     [     0.              0.              0.              0.
           0.              0.              0.           6250.
         -62.5             0.              0.              0.
           0.        ]
     [     0.              0.              0.              0.
           0.              0.              0.              0.
        6250.            -62.5             0.              0.
           0.        ]
     [     0.              0.              0.              0.
           0.              0.              0.              0.
           0.           6250.            -62.5             0.
           0.        ]
     [     0.              0.              0.              0.
           0.              0.              0.              0.
           0.              0.           6250.            -62.5
           0.        ]
     [     0.              0.              0.              0.
           0.              0.              0.              0.
           0.              0.              0.           6250.
         -62.5       ]],
    B =
    [[1.30658512]
     [0.        ]
     [1.70716466]
     [0.        ]
     [2.23055594]
     [0.        ]
     [2.54965825]
     [0.        ]
     [0.        ]
     [0.        ]
     [0.        ]
     [0.        ]
     [0.        ]],
    CT = 
    [[0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]
     [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]],
    Gamma =
    [[    0.     0.     0.     0.     0.     0.]
     [    0.     0.     0.     0.     0.     0.]
     [    0.     0.     0.     0.     0.     0.]
     [    0.     0.     0.     0.     0.     0.]
     [    0.     0.     0.     0.     0.     0.]
     [    0.     0.     0.     0.     0.     0.]
     [    0.     0.     0.     0.     0.     0.]
     [-6250.    -0.    -0.    -0.    -0.    -0.]
     [   -0. -6250.    -0.    -0.    -0.    -0.]
     [   -0.    -0. -6250.    -0.    -0.    -0.]
     [   -0.    -0.    -0. -6250.    -0.    -0.]
     [   -0.    -0.    -0.    -0. -6250.    -0.]
     [   -0.    -0.    -0.    -0.    -0. -6250.]],
    Gamma_tildeT =
    [[0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]
     [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]], and D=[[0.]
     [0.]
     [0.]
     [0.]
     [0.]
     [0.]]




.. GENERATED FROM PYTHON SOURCE LINES 304-307

New Digital Estimator
--------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 307-319

.. code-block:: default
   :lineno-start: 308


    digital_estimator_dow_and_pre_filt = cbc.digital_estimator.FIRFilter(
        new_analog_system,
        digital_control,
        eta2,
        L1,
        L2,
        downsample=OSR)
    digital_estimator_dow_and_pre_filt(control_signal_sequences3)
    print(digital_estimator_dow_and_pre_filt)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    FIR estimator is parameterized as 
    eta2 = 87574.26, 49 [dB],
    Ts = 8e-05,
    K1 = 4096,
    K2 = 4096,
    and
    number_of_iterations = 9223372036854775808.
    Resulting in the filter coefficients
    h = 
    [[[ 3.23449483e-26 -8.89358827e-27 -5.19630790e-27  1.64716076e-27
        8.10518769e-28 -2.46888208e-28]
      [ 3.62914575e-26 -6.13580581e-27 -5.94456334e-27  1.20507066e-27
        9.45237450e-28 -1.86803231e-28]
      [ 3.87873811e-26 -3.04624955e-27 -6.45778401e-27  7.00334792e-28
        1.04298116e-27 -1.17220607e-28]
      ...
      [-7.48346618e-25  2.52727954e-26  1.28850114e-25  4.60839464e-27
       -2.10077161e-26 -1.74328192e-27]
      [-7.48744833e-25 -3.83507906e-26  1.24483001e-25  1.50727060e-26
       -1.95992087e-26 -3.15809035e-27]
      [-7.17936773e-25 -9.88088319e-26  1.15036906e-25  2.46511766e-26
       -1.74088050e-26 -4.40645660e-27]]].




.. GENERATED FROM PYTHON SOURCE LINES 320-325

Post filtering the FIR filter coefficients
-----------------------------------------------------------

Yet another approach is to instead post filter
the resulting FIR filter digital_estimator.h with another lowpass FIR filter

.. GENERATED FROM PYTHON SOURCE LINES 325-380

.. code-block:: default
   :lineno-start: 326


    numtaps = 1 << 10
    f_cutoff = 1.0 / OSR
    fir_filter = scipy.signal.firwin(numtaps, f_cutoff)

    digital_estimator_dow_and_post_filt = cbc.digital_estimator.FIRFilter(
        analog_system,
        digital_control,
        eta2,
        L1,
        L2,
        downsample=OSR)
    digital_estimator_dow_and_post_filt(control_signal_sequences4)

    # Apply the FIR post filter
    digital_estimator_dow_and_post_filt.convolve(fir_filter)

    print(digital_estimator_dow_and_post_filt, "\n")

    FIR_frequency_response = np.fft.rfft(fir_filter)
    f_FIR = np.fft.rfftfreq(numtaps, d=T)
    plt.figure()
    plt.semilogx(f_FIR, 20 * np.log10(np.abs(FIR_frequency_response)))
    plt.xlabel('$f$ [Hz]')
    plt.ylabel('$|h|$ dB')
    plt.grid(which='both')

    impulse_response_dB_dow = 20 * \
        np.log10(np.linalg.norm(
            np.array(digital_estimator_dow.h[0, :, :]), axis=1))

    impulse_response_dB_dow_and_post_filt = 20 * \
        np.log10(np.linalg.norm(
            np.array(digital_estimator_dow_and_post_filt.h[0, :, :]), axis=1))

    impulse_response_dB_FIR_filter = 20 * np.log10(np.abs(fir_filter[numtaps//2:]))

    plt.figure()
    plt.plot(np.arange(0, L1),
             impulse_response_dB_dow[L1:],
             label="Ref")
    plt.plot(np.arange(0, numtaps//2),
             impulse_response_dB_FIR_filter,
             label="Post FIR Filter")
    plt.plot(np.arange(0, L1),
             impulse_response_dB_dow_and_post_filt[L1:],
             label="Post Filtered")

    plt.legend()
    plt.xlabel("filter tap k")
    plt.ylabel("$|| \mathbf{h} [k]||_2$ [dB]")
    plt.xlim((0, 1024))
    plt.ylim((-160, 0))
    plt.grid(which='both')




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /tutorials/b_general/images/sphx_glr_plot_c_downsample_006.png
          :alt: plot c downsample
          :class: sphx-glr-multi-img

    *

      .. image:: /tutorials/b_general/images/sphx_glr_plot_c_downsample_007.png
          :alt: plot c downsample
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    FIR estimator is parameterized as 
    eta2 = 87574.26, 49 [dB],
    Ts = 8e-05,
    K1 = 4096,
    K2 = 4096,
    and
    number_of_iterations = 9223372036854775808.
    Resulting in the filter coefficients
    h = 
    [[[ 4.57908971e-87 -4.65114691e-87  1.82792564e-88  6.70779970e-88
       -1.47628062e-88 -6.91352512e-89]
      [ 6.94779186e-87 -4.67950396e-87 -1.70771451e-88  7.41295180e-88
       -1.07130519e-88 -8.41311065e-89]
      [ 9.29685994e-87 -4.52237142e-87 -5.56320514e-88  7.89684437e-88
       -5.78631185e-89 -9.73845893e-89]
      ...
      [ 1.15294566e-86  4.39630135e-87 -7.90611925e-88 -8.64551730e-88
       -6.70300573e-89  1.07217155e-88]
      [ 9.29685995e-87  4.70832786e-87 -3.71706891e-88 -8.17937370e-88
       -1.21559326e-88  9.13414714e-89]
      [ 6.94779186e-87  4.81847681e-87  1.92059492e-89 -7.46238158e-88
       -1.66273628e-88  7.37212989e-89]]]. 





.. GENERATED FROM PYTHON SOURCE LINES 381-384

Plotting the Estimator's Signal and Noise Transfer Function
-----------------------------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 384-422

.. code-block:: default
   :lineno-start: 385


    # Compute NTF
    ntf_pre = digital_estimator_dow_and_pre_filt.noise_transfer_function(omega)
    ntf_post = digital_estimator_dow_and_post_filt.noise_transfer_function(
        2 * np.pi * f_FIR) * FIR_frequency_response
    ntf_dow = digital_estimator_dow.noise_transfer_function(omega)

    # Compute STF
    stf_pre = digital_estimator_dow_and_pre_filt.signal_transfer_function(omega)
    stf_dB_pre = 20 * np.log10(np.abs(stf_pre.flatten()))
    stf_post = digital_estimator_dow_and_post_filt.signal_transfer_function(
        2 * np.pi * f_FIR) * FIR_frequency_response
    stf_dB_post = 20 * np.log10(np.abs(stf_post.flatten()))
    stf_dow = digital_estimator_dow.signal_transfer_function(omega)
    stf_dow_dB = 20 * np.log10(np.abs(stf_dow.flatten()))

    # Plot
    plt.figure()
    plt.semilogx(omega/(2 * np.pi), stf_dB_pre, label='$STF(\omega)$ pre-filter')
    plt.semilogx(f_FIR, stf_dB_post, label='$STF(\omega)$ post-filter')
    plt.semilogx(omega/(2 * np.pi), stf_dow_dB,
                 label='$STF(\omega)$ ref',  color='black')
    plt.semilogx(omega/(2 * np.pi), 20 * np.log10(np.linalg.norm(
        ntf_pre[:, 0, :], axis=0)), '--', label="$ || NTF(\omega) ||_2 $ pre-filter")
    plt.semilogx(f_FIR, 20 * np.log10(np.linalg.norm(
        ntf_post[:, 0, :], axis=0)), '--', label="$ || NTF(\omega) ||_2 $ post-filter")
    plt.semilogx(omega/(2 * np.pi), 20 * np.log10(np.linalg.norm(
        ntf_dow[:, 0, :], axis=0)), '--', label="$ || NTF(\omega) ||_2 $ ref", color='black')

    # Add labels and legends to figure
    plt.legend()
    plt.grid(which='both')
    plt.title("Signal and noise transfer functions")
    plt.xlabel("$f$ [Hz]")
    plt.ylabel("dB")
    plt.xlim((1e2, 5e3))
    plt.gcf().tight_layout()




.. image:: /tutorials/b_general/images/sphx_glr_plot_c_downsample_008.png
    :alt: Signal and noise transfer functions
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /drives1/PhD/cbadc/docs/code_examples/b_general/plot_c_downsample.py:410: RuntimeWarning: divide by zero encountered in log10
      plt.semilogx(omega/(2 * np.pi), 20 * np.log10(np.linalg.norm(




.. GENERATED FROM PYTHON SOURCE LINES 423-426

Filtering Estimate
--------------------


.. GENERATED FROM PYTHON SOURCE LINES 426-454

.. code-block:: default
   :lineno-start: 427


    u_hat_dow_and_pre_filt = np.zeros(size // OSR)
    u_hat_dow_and_post_filt = np.zeros(size // OSR)
    for index in cbc.utilities.show_status(range(size // OSR)):
        u_hat_dow_and_pre_filt[index] = next(digital_estimator_dow_and_pre_filt)
        u_hat_dow_and_post_filt[index] = next(digital_estimator_dow_and_post_filt)

    plt.figure()
    u_hat_dow_and_pre_filt_clipped = u_hat_dow_and_pre_filt[(L1 + L2) // OSR:]
    u_hat_dow_and_post_filt_clipped = u_hat_dow_and_post_filt[(L1 + L2) // OSR:]
    _, psd_dow_and_pre_filt = cbc.utilities.compute_power_spectral_density(
        u_hat_dow_and_pre_filt_clipped, fs=1.0/(T * OSR))
    _, psd_dow_and_post_filt = cbc.utilities.compute_power_spectral_density(
        u_hat_dow_and_post_filt_clipped, fs=1.0/(T * OSR))
    plt.semilogx(f_ref, 10 * np.log10(psd_ref), label="$\hat{U}(f)$ Referefence")
    plt.semilogx(f_dow, 10 * np.log10(psd_dow), label="$\hat{U}(f)$ Downsampled")
    plt.semilogx(f_dow, 10 * np.log10(psd_dow_and_pre_filt),
                 label="$\hat{U}(f)$ Downsampled and Pre Filtered")
    plt.semilogx(f_dow, 10 * np.log10(psd_dow_and_post_filt),
                 label="$\hat{U}(f)$ Downsampled and Post Filtered")
    plt.legend()
    plt.ylim((-300, 50))
    plt.xlim((f_ref[1], f_ref[-1]))
    plt.xlabel('$f$ [Hz]')
    plt.ylabel('$ \mathrm{V}^2 \, / \, (1 \mathrm{Hz})$')
    plt.grid(which='both')
    plt.show()




.. image:: /tutorials/b_general/images/sphx_glr_plot_c_downsample_009.png
    :alt: plot c downsample
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/8192 [00:00<?, ?it/s]      1%|          | 56/8192 [00:00<00:14, 557.37it/s]      1%|1         | 112/8192 [00:00<00:18, 446.84it/s]      2%|2         | 182/8192 [00:00<00:14, 537.63it/s]      3%|3         | 260/8192 [00:00<00:12, 623.64it/s]      5%|4         | 408/8192 [00:00<00:08, 910.74it/s]      6%|6         | 502/8192 [00:00<00:08, 903.98it/s]      7%|7         | 595/8192 [00:00<00:08, 850.39it/s]      8%|8         | 684/8192 [00:00<00:08, 861.31it/s]      9%|9         | 774/8192 [00:00<00:08, 870.68it/s]     11%|#         | 862/8192 [00:01<00:08, 816.50it/s]     12%|#1        | 945/8192 [00:01<00:09, 786.25it/s]     13%|#2        | 1035/8192 [00:01<00:08, 816.49it/s]     14%|#3        | 1118/8192 [00:01<00:08, 819.10it/s]     15%|#4        | 1201/8192 [00:01<00:10, 638.33it/s]     16%|#5        | 1272/8192 [00:01<00:10, 639.50it/s]     16%|#6        | 1349/8192 [00:01<00:10, 671.38it/s]     17%|#7        | 1432/8192 [00:01<00:09, 712.26it/s]     18%|#8        | 1507/8192 [00:02<00:09, 722.30it/s]     19%|#9        | 1582/8192 [00:02<00:09, 713.83it/s]     20%|##        | 1662/8192 [00:02<00:08, 737.16it/s]     21%|##1       | 1745/8192 [00:02<00:08, 761.43it/s]     22%|##2       | 1823/8192 [00:02<00:08, 734.49it/s]     23%|##3       | 1906/8192 [00:02<00:08, 760.61it/s]     24%|##4       | 1983/8192 [00:02<00:08, 758.28it/s]     25%|##5       | 2066/8192 [00:02<00:07, 778.92it/s]     26%|##6       | 2159/8192 [00:02<00:07, 823.06it/s]     27%|##7       | 2242/8192 [00:02<00:07, 819.41it/s]     28%|##8       | 2325/8192 [00:03<00:07, 790.43it/s]     29%|##9       | 2405/8192 [00:03<00:07, 756.27it/s]     30%|###       | 2494/8192 [00:03<00:07, 792.90it/s]     31%|###1      | 2574/8192 [00:03<00:07, 791.39it/s]     32%|###2      | 2654/8192 [00:03<00:07, 785.97it/s]     33%|###3      | 2733/8192 [00:03<00:07, 760.76it/s]     34%|###4      | 2810/8192 [00:03<00:07, 745.60it/s]     35%|###5      | 2893/8192 [00:03<00:06, 767.67it/s]     37%|###6      | 2999/8192 [00:03<00:06, 851.92it/s]     38%|###7      | 3091/8192 [00:04<00:05, 870.17it/s]     39%|###8      | 3179/8192 [00:04<00:06, 804.20it/s]     40%|###9      | 3261/8192 [00:04<00:06, 781.75it/s]     41%|####      | 3344/8192 [00:04<00:06, 793.12it/s]     42%|####1     | 3437/8192 [00:04<00:05, 827.66it/s]     43%|####2     | 3521/8192 [00:04<00:05, 781.31it/s]     44%|####3     | 3604/8192 [00:04<00:05, 792.45it/s]     45%|####5     | 3688/8192 [00:04<00:05, 804.43it/s]     46%|####6     | 3769/8192 [00:04<00:05, 779.91it/s]     47%|####7     | 3859/8192 [00:04<00:05, 813.79it/s]     48%|####8     | 3941/8192 [00:05<00:05, 790.04it/s]     49%|####9     | 4037/8192 [00:05<00:04, 836.28it/s]     50%|#####     | 4122/8192 [00:05<00:04, 833.22it/s]     51%|#####1    | 4206/8192 [00:05<00:05, 775.37it/s]     52%|#####2    | 4294/8192 [00:05<00:04, 804.45it/s]     54%|#####3    | 4388/8192 [00:05<00:04, 840.68it/s]     55%|#####4    | 4473/8192 [00:05<00:04, 793.83it/s]     56%|#####5    | 4554/8192 [00:05<00:04, 773.84it/s]     57%|#####6    | 4633/8192 [00:05<00:04, 764.61it/s]     57%|#####7    | 4710/8192 [00:06<00:04, 741.78it/s]     59%|#####8    | 4793/8192 [00:06<00:04, 765.72it/s]     59%|#####9    | 4870/8192 [00:06<00:04, 729.34it/s]     60%|######    | 4948/8192 [00:06<00:04, 743.11it/s]     61%|######1   | 5023/8192 [00:06<00:04, 729.46it/s]     62%|######2   | 5097/8192 [00:06<00:04, 713.77it/s]     63%|######3   | 5195/8192 [00:06<00:03, 789.32it/s]     64%|######4   | 5275/8192 [00:06<00:04, 685.39it/s]     66%|######5   | 5382/8192 [00:06<00:03, 786.21it/s]     67%|######6   | 5466/8192 [00:07<00:03, 798.92it/s]     68%|######7   | 5556/8192 [00:07<00:03, 826.01it/s]     69%|######8   | 5641/8192 [00:07<00:03, 795.30it/s]     70%|######9   | 5723/8192 [00:07<00:03, 757.30it/s]     71%|#######   | 5808/8192 [00:07<00:03, 782.26it/s]     72%|#######1  | 5888/8192 [00:07<00:03, 743.54it/s]     73%|#######2  | 5964/8192 [00:07<00:03, 733.08it/s]     74%|#######3  | 6047/8192 [00:07<00:02, 758.40it/s]     75%|#######4  | 6136/8192 [00:07<00:02, 794.75it/s]     76%|#######5  | 6217/8192 [00:08<00:02, 781.37it/s]     77%|#######6  | 6300/8192 [00:08<00:02, 794.58it/s]     78%|#######8  | 6391/8192 [00:08<00:02, 826.74it/s]     79%|#######9  | 6475/8192 [00:08<00:02, 812.86it/s]     80%|########  | 6557/8192 [00:08<00:02, 791.59it/s]     81%|########1 | 6638/8192 [00:08<00:01, 792.41it/s]     82%|########2 | 6718/8192 [00:08<00:01, 793.66it/s]     83%|########2 | 6798/8192 [00:08<00:01, 754.64it/s]     84%|########4 | 6883/8192 [00:08<00:01, 781.33it/s]     85%|########5 | 6974/8192 [00:08<00:01, 817.07it/s]     86%|########6 | 7057/8192 [00:09<00:01, 819.82it/s]     87%|########7 | 7146/8192 [00:09<00:01, 838.81it/s]     88%|########8 | 7231/8192 [00:09<00:01, 826.27it/s]     89%|########9 | 7316/8192 [00:09<00:01, 832.31it/s]     90%|######### | 7400/8192 [00:09<00:00, 829.85it/s]     91%|#########1| 7484/8192 [00:09<00:00, 773.86it/s]     92%|#########2| 7571/8192 [00:09<00:00, 798.46it/s]     93%|#########3| 7652/8192 [00:09<00:00, 772.41it/s]     94%|#########4| 7737/8192 [00:09<00:00, 793.91it/s]     96%|#########5| 7832/8192 [00:10<00:00, 835.32it/s]     97%|#########6| 7922/8192 [00:10<00:00, 853.95it/s]     98%|#########7| 8008/8192 [00:10<00:00, 803.29it/s]    100%|#########9| 8158/8192 [00:10<00:00, 998.92it/s]    100%|##########| 8192/8192 [00:10<00:00, 787.92it/s]
    /home/hammal/anaconda3/envs/py38/lib/python3.8/site-packages/scipy/signal/spectral.py:1961: UserWarning: nperseg = 16384 is greater than input length  = 7680, using nperseg = 7680
      warnings.warn('nperseg = {0:d} is greater than input length '




.. GENERATED FROM PYTHON SOURCE LINES 455-458

In Time Domain
---------------


.. GENERATED FROM PYTHON SOURCE LINES 458-476

.. code-block:: default
   :lineno-start: 459


    t = np.arange(size)
    t_down = np.arange(size // OSR) * OSR
    plt.plot(t, u_hat_ref, label="$\hat{u}(t)$ Reference")
    plt.plot(t_down, u_hat_dow, label="$\hat{u}(t)$ Downsampled")
    plt.plot(t_down, u_hat_dow_and_pre_filt,
             label="$\hat{u}(t)$ Downsampled and Pre Filtered")
    plt.plot(t_down, u_hat_dow_and_post_filt,
             label="$\hat{u}(t)$ Downsampled and Post Filtered")
    plt.xlabel('$t / T$')
    plt.legend()
    plt.title("Estimated input signal")
    plt.grid(which='both')
    offset = (L1 + L2) * 4
    plt.xlim((offset, offset + 1000))
    plt.ylim((-0.6, 0.6))
    plt.tight_layout()




.. image:: /tutorials/b_general/images/sphx_glr_plot_c_downsample_010.png
    :alt: Estimated input signal
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 477-480

Compare Filter Coefficients
---------------------------


.. GENERATED FROM PYTHON SOURCE LINES 480-502

.. code-block:: default
   :lineno-start: 481


    impulse_response_dB_dow_and_pre_filt = 20 * \
        np.log10(np.linalg.norm(
            np.array(digital_estimator_dow_and_pre_filt.h[0, :, :]), axis=1))

    plt.plot(np.arange(0, L1),
             impulse_response_dB_dow[L1:],
             label="Ref")

    plt.plot(np.arange(0, L1),
             impulse_response_dB_dow_and_pre_filt[L1:],
             label="Pre Filtered")
    plt.plot(np.arange(0, L1),
             impulse_response_dB_dow_and_post_filt[L1:],
             label="Post Filtered")
    plt.legend()
    plt.xlabel("filter tap k")
    plt.ylabel("$|| \mathbf{h} [k]||_2$ [dB]")
    plt.xlim((0, 1024))
    plt.ylim((-160, -20))
    plt.grid(which='both')




.. image:: /tutorials/b_general/images/sphx_glr_plot_c_downsample_011.png
    :alt: plot c downsample
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  25.369 seconds)


.. _sphx_glr_download_tutorials_b_general_plot_c_downsample.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_c_downsample.py <plot_c_downsample.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_c_downsample.ipynb <plot_c_downsample.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
