
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/b_general/plot_e_switched_capacitor_digital_control.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_b_general_plot_e_switched_capacitor_digital_control.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_b_general_plot_e_switched_capacitor_digital_control.py:


Switched-Capacitor Digital Control
==================================

In this tutorial we show how to use switched-capacitor digital control
in combination with a continuous-time system.

.. GENERATED FROM PYTHON SOURCE LINES 8-13

.. code-block:: default

    import cbadc
    import scipy
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 14-48

Integration Node
----------------

Initially we consider a integration node as shown in the figure below.

.. image:: /images/RC-amp.svg
   :width: 500
   :align: center
   :alt: The RC integrator with switched-capacitor digital control.

Which is goverened by the differential equations

:math:`\dot{v}_{x_{\ell}}(t) = \frac{1}{C_{x_{\ell}}} \left( \frac{v_{\Gamma_{\ell}}(t) - v_{s_\ell}(t)}{R_{s}} - \frac{1}{R_{\beta_\ell}}  v_{x_{\ell - 1}}(t) \right)`

:math:`\dot{v}_{\Gamma_{\ell}}(t) = \frac{1}{2R_{s} C_{\Gamma_{\ell}}} \left( v_{s_\ell}(t) - v_{\Gamma_{\ell}}(t) \right)`

during phase :math:`\phi_1` and

:math:`\dot{v}_{x_{\ell}}(t)  =  - \frac{1}{R_{\beta_\ell} C_{x_{\ell}}} v_{x_{\ell - 1}}(t)`

:math:`\dot{v}_{\Gamma_{\ell}}(t) = - \frac{1}{2 R_{s} C_{\Gamma_{\ell}}}  v_{\Gamma_{\ell}}(t)`

during phase :math:`\bar{\phi}_1` where a full control phase :math:`T = T_{\phi_1} + T_{\bar{\phi}_1}`.

To simulate this control-bounded converter we need to specify the whole system which for this
tutorial will be a chain-of-integrators system as shown below.

.. image:: /images/chainOfIntegratorsGeneral.svg
   :width: 1500
   :align: center
   :alt: The chain-of-integrators ADC.

where the digital controls are implemented as above.
Thus the system equations can be written as

.. GENERATED FROM PYTHON SOURCE LINES 48-65

.. code-block:: default


    N = 4
    M = N

    C_x = 1e-9
    C_Gamma = C_x / 2
    R_s = 1e1
    R_beta = 1e3

    beta = 1 / (R_beta * C_x)
    T = 1 / (2 * beta)

    A = beta * np.eye(N, k=-1)
    B = np.zeros(N)
    B[0] = beta
    CT = np.eye(N)








.. GENERATED FROM PYTHON SOURCE LINES 66-84

Simplifying the Differential Equation
-------------------------------------

Due to the virtual ground of the op-amp integrator we can treat the
second differential equation (the one involving :math:`v_{\Gamma_\ell}(t)`)
seperately. Specifically, if we assume the
capacitor :math:`C_{\Gamma}` empties completely during :math:`\bar{\phi}_1`,
and that :math:`v_{s_\ell} = \{\pm 1\}` for all :math:`t`, the digital
control's effect on the analog system can be written as

:math:`v_{\Gamma_\ell}(t) - v_{s_\ell}(t) = v_{s_\ell}(t) \cdot e^{-t/\tau}`

where :math:`\tau=R_s C_{\Gamma_\ell}`.

This can be modeled by instantiating the digital control
:class:`cbadc.digital_control.DigitalControl`
using the impulse response :func:`cbadc.digital_control.RCImpulseResponse`
as

.. GENERATED FROM PYTHON SOURCE LINES 84-98

.. code-block:: default


    impulse_response = cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma)
    digital_control_sc = cbadc.digital_control.DigitalControl(
        cbadc.analog_signal.Clock(T), M, impulse_response=impulse_response
    )

    Gamma = 1 / (R_s * C_x) * np.eye(M)
    Gamma_tildeT = -np.eye(M)

    analog_system_sc = cbadc.analog_system.AnalogSystem(A, B, CT, Gamma, Gamma_tildeT)

    print(digital_control_sc)
    print(analog_system_sc)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ================================================================================

    The Digital Control is parameterized as:

    --------------------------------------------------------------------------------

    clock:
    Analog signal returns constant 0, i.e., maps t |-> 0.

    M:
    4
    ================================================================================

    The analog system is parameterized as:
    A =
    [[      0.       0.       0.       0.]
     [1000000.       0.       0.       0.]
     [      0. 1000000.       0.       0.]
     [      0.       0. 1000000.       0.]],
    B =
    [[1000000.]
     [      0.]
     [      0.]
     [      0.]],
    CT =
    [[1. 0. 0. 0.]
     [0. 1. 0. 0.]
     [0. 0. 1. 0.]
     [0. 0. 0. 1.]],
    Gamma =
    [[1.e+08 0.e+00 0.e+00 0.e+00]
     [0.e+00 1.e+08 0.e+00 0.e+00]
     [0.e+00 0.e+00 1.e+08 0.e+00]
     [0.e+00 0.e+00 0.e+00 1.e+08]],
    Gamma_tildeT =
    [[-1. -0. -0. -0.]
     [-0. -1. -0. -0.]
     [-0. -0. -1. -0.]
     [-0. -0. -0. -1.]], and D=[[0.]
     [0.]
     [0.]
     [0.]]




.. GENERATED FROM PYTHON SOURCE LINES 99-102

Visualizing the State Trajectories
----------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 102-155

.. code-block:: default

    OSR = 32
    amplitude = 1.0
    analog_signal = cbadc.analog_signal.Sinusoidal(amplitude, 1 / T / (OSR << 4))
    Ts = T / 100.0
    size = 1 << 12

    simulator_sc = cbadc.simulator.extended_simulation_result(
        cbadc.simulator.get_simulator(
            analog_system_sc,
            digital_control_sc,
            [analog_signal],
            cbadc.analog_signal.Clock(Ts),
            simulator_type=cbadc.simulator.SimulatorType.analytical,
        )
    )


    analog_system_ref = cbadc.analog_system.AnalogSystem(
        A, B, CT, np.eye(N) * beta, Gamma_tildeT
    )
    digital_control_ref = cbadc.digital_control.DigitalControl(
        cbadc.analog_signal.Clock(T), M
    )
    simulator_ref = cbadc.simulator.extended_simulation_result(
        cbadc.simulator.get_simulator(
            analog_system_ref,
            digital_control_ref,
            [analog_signal],
            cbadc.analog_signal.Clock(Ts),
            simulator_type=cbadc.simulator.SimulatorType.analytical,
        )
    )

    states = np.zeros((size, N))
    states_ref = np.zeros_like(states)
    t = Ts * np.arange(size)

    # Simulations
    for time_step in cbadc.utilities.show_status(range(size)):
        states[time_step, :] = next(simulator_sc)["analog_state"]
        states_ref[time_step, :] = next(simulator_ref)["analog_state"]

    # Plot state trajectories
    for index in range(N):
        plt.figure()
        plt.title("Analog state trajectories for " + f"$x_{index + 1}(t)$")
        plt.plot(t / T, states[:, index], label="SC")
        plt.plot(t / T, states_ref[:, index], label="ref")
        plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
        plt.xlabel("$t/T$")
        plt.legend()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_001.png
         :alt: Analog state trajectories for $x_1(t)$
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_002.png
         :alt: Analog state trajectories for $x_2(t)$
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_003.png
         :alt: Analog state trajectories for $x_3(t)$
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_004.png
         :alt: Analog state trajectories for $x_4(t)$
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/4096 [00:00<?, ?it/s]      7%|7         | 301/4096 [00:00<00:01, 3003.36it/s]     15%|#4        | 602/4096 [00:00<00:01, 2998.43it/s]     22%|##2       | 902/4096 [00:00<00:01, 2988.69it/s]     29%|##9       | 1201/4096 [00:00<00:00, 2977.01it/s]     37%|###6      | 1499/4096 [00:00<00:00, 2972.26it/s]     44%|####3     | 1797/4096 [00:00<00:00, 2971.42it/s]     51%|#####1    | 2100/4096 [00:00<00:00, 2989.19it/s]     59%|#####8    | 2399/4096 [00:00<00:00, 2985.21it/s]     66%|######5   | 2698/4096 [00:00<00:00, 2984.13it/s]     73%|#######3  | 3000/4096 [00:01<00:00, 2993.95it/s]     81%|########  | 3300/4096 [00:01<00:00, 2992.30it/s]     88%|########7 | 3601/4096 [00:01<00:00, 2995.00it/s]     95%|#########5| 3901/4096 [00:01<00:00, 2995.86it/s]    100%|##########| 4096/4096 [00:01<00:00, 2988.89it/s]




.. GENERATED FROM PYTHON SOURCE LINES 156-159

Filter Coefficients
----------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 159-273

.. code-block:: default

    K1 = 1 << 8
    K2 = K1
    eta2 = (
        np.linalg.norm(
            analog_system_sc.transfer_function_matrix(np.array([2 * np.pi / T / OSR]))
        ).flatten()
        ** 2
    )

    # prepending an anti-aliasing filter
    # omega_3dB = 2 * np.pi / T / 16
    # wp = omega_3dB / 2.0
    # ws = omega_3dB
    # gpass = 1.0
    # gstop = 60
    # filter = cbadc.analog_system.IIRDesign(wp, ws, gpass, gstop, ftype="ellip")

    # Post-filtering FIR filter
    fir_filter_numtaps = K1 + K2
    f_cutoff = 1.0 / OSR * 2
    fir_filter = scipy.signal.firwin(fir_filter_numtaps, f_cutoff)


    digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
        # cbadc.analog_system.chain([filter, analog_system_sc]),
        analog_system_sc,
        digital_control_sc,
        eta2,
        K1,
        K2,
    )

    # Apply FIR filter
    digital_estimator_sc.convolve(fir_filter)

    digital_estimator_ref = cbadc.digital_estimator.FIRFilter(
        # cbadc.analog_system.chain([filter, analog_system_ref]),
        analog_system_ref,
        digital_control_ref,
        eta2,
        K1,
        K2,
    )

    # Apply FIR filter
    digital_estimator_ref.convolve(fir_filter)

    plt.figure()
    plt.semilogy(
        np.arange(-K1, K2),
        np.linalg.norm(np.array(digital_estimator_sc.h[0, :, :]), axis=1)[:],
        label="Switched Capacitor Filter",
    )
    plt.semilogy(
        np.arange(-K1, K2),
        np.linalg.norm(np.array(digital_estimator_ref.h[0, :, :]), axis=1)[:],
        label="Ref Filter",
    )

    plt.legend()
    plt.xlabel("filter tap k")
    plt.ylabel("$|| \mathbf{h} [k]||_2$")
    plt.xlim((-K1, K2))
    # plt.ylim((1e-16, 1))
    plt.grid(which="both")

    # Logspace frequencies
    frequencies = np.logspace(-3, 0, 100)
    omega = 4 * np.pi * beta * frequencies

    plt.figure()
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(np.abs(digital_estimator_sc.signal_transfer_function(omega))).flatten(),
        label="$STF(\omega)$ SC",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(np.abs(digital_estimator_ref.signal_transfer_function(omega))).flatten(),
        label="$STF(\omega)$ ref",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(
            np.linalg.norm(
                digital_estimator_sc.noise_transfer_function(omega)[:, 0, :], axis=0
            )
        ),
        "--",
        label="$ || NTF(\omega) ||_2 $ SC",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(
            np.linalg.norm(
                digital_estimator_ref.noise_transfer_function(omega)[:, 0, :], axis=0
            )
        ),
        "--",
        label="$ || NTF(\omega) ||_2 $ ref",
    )
    # Add labels and legends to figure
    plt.legend()
    plt.grid(which="both")
    plt.title("Signal and noise transfer functions")
    plt.xlabel("$f$ [Hz]")
    plt.ylabel("dB")
    # plt.xlim((1e2, 5e3))
    plt.gcf().tight_layout()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_005.png
         :alt: plot e switched capacitor digital control
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_006.png
         :alt: Signal and noise transfer functions
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 274-278

Mismatch Sensitivity to Switch Resistance
-----------------------------------------



.. GENERATED FROM PYTHON SOURCE LINES 278-351

.. code-block:: default


    mismatch_in_percent = np.arange(3) * 10

    size = 1 << 14
    t = np.arange(size) * T

    estimates = []

    for mismatch in mismatch_in_percent:
        digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_sc]),
            analog_system_sc,
            cbadc.digital_control.DigitalControl(
                cbadc.analog_signal.Clock(T),
                M,
                impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
            ),
            eta2,
            K1,
            K2,
        )

        # Apply FIR filter
        digital_estimator_sc.convolve(fir_filter)

        digital_estimator_sc(
            cbadc.simulator.get_simulator(
                cbadc.analog_system.AnalogSystem(
                    A,
                    B,
                    CT,
                    1 / ((1 + mismatch / 100) * R_s * C_x) * np.eye(M),
                    Gamma_tildeT,
                ),
                cbadc.digital_control.DigitalControl(
                    cbadc.analog_signal.Clock(T),
                    M,
                    impulse_response=cbadc.analog_signal.RCImpulseResponse(
                        (1 + mismatch / 100) * R_s * C_Gamma
                    ),
                ),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )
        u_hat = np.zeros(size)
        for index in cbadc.utilities.show_status(range(size)):
            u_hat[index] = next(digital_estimator_sc)
        estimates.append(u_hat)

    # Plot estimates in time domain
    plt.figure()
    plt.title("Estimates")
    for index, mismatch in enumerate(mismatch_in_percent):
        plt.plot(t / T, estimates[index], label=f"Mismatch R_s {mismatch}%")
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 100))
    plt.legend()

    # Plot estimates PSD
    plt.figure()
    plt.title("Estimates PSD")
    for index, mismatch in enumerate(mismatch_in_percent):
        f, psd = cbadc.utilities.compute_power_spectral_density(
            estimates[index][K1 + K2 :], fs=1.0 / T
        )
        plt.semilogx(f, 10 * np.log10(psd), label=f"Mismatch R_s {mismatch}%")
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("f [Hz]")
    plt.ylabel("V^2/Hz [dB]")
    plt.legend()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_007.png
         :alt: Estimates
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_008.png
         :alt: Estimates PSD
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_008.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/16384 [00:00<?, ?it/s]      3%|3         | 558/16384 [00:00<00:02, 5570.31it/s]      7%|6         | 1116/16384 [00:00<00:02, 5563.78it/s]     10%|#         | 1675/16384 [00:00<00:02, 5573.29it/s]     14%|#3        | 2239/16384 [00:00<00:02, 5598.78it/s]     17%|#7        | 2802/16384 [00:00<00:02, 5609.22it/s]     21%|##        | 3363/16384 [00:00<00:02, 5607.18it/s]     24%|##3       | 3927/16384 [00:00<00:02, 5615.00it/s]     27%|##7       | 4493/16384 [00:00<00:02, 5629.03it/s]     31%|###       | 5059/16384 [00:00<00:02, 5636.31it/s]     34%|###4      | 5624/16384 [00:01<00:01, 5637.76it/s]     38%|###7      | 6191/16384 [00:01<00:01, 5644.82it/s]     41%|####1     | 6756/16384 [00:01<00:01, 5641.41it/s]     45%|####4     | 7321/16384 [00:01<00:01, 5633.06it/s]     48%|####8     | 7888/16384 [00:01<00:01, 5642.39it/s]     52%|#####1    | 8454/16384 [00:01<00:01, 5646.40it/s]     55%|#####5    | 9019/16384 [00:01<00:01, 5636.25it/s]     58%|#####8    | 9584/16384 [00:01<00:01, 5640.26it/s]     62%|######1   | 10149/16384 [00:01<00:01, 5639.18it/s]     65%|######5   | 10713/16384 [00:01<00:01, 5633.00it/s]     69%|######8   | 11277/16384 [00:02<00:00, 5622.56it/s]     72%|#######2  | 11840/16384 [00:02<00:00, 5609.73it/s]     76%|#######5  | 12402/16384 [00:02<00:00, 5611.02it/s]     79%|#######9  | 12964/16384 [00:02<00:00, 5603.38it/s]     83%|########2 | 13525/16384 [00:02<00:00, 5602.66it/s]     86%|########5 | 14086/16384 [00:02<00:00, 5577.88it/s]     89%|########9 | 14649/16384 [00:02<00:00, 5590.82it/s]     93%|#########2| 15209/16384 [00:02<00:00, 5592.09it/s]     96%|#########6| 15769/16384 [00:02<00:00, 5572.32it/s]    100%|#########9| 16329/16384 [00:02<00:00, 5577.97it/s]    100%|##########| 16384/16384 [00:02<00:00, 5611.62it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      3%|3         | 551/16384 [00:00<00:02, 5508.90it/s]      7%|6         | 1107/16384 [00:00<00:02, 5534.98it/s]     10%|#         | 1665/16384 [00:00<00:02, 5554.09it/s]     14%|#3        | 2223/16384 [00:00<00:02, 5562.97it/s]     17%|#6        | 2780/16384 [00:00<00:02, 5553.11it/s]     20%|##        | 3339/16384 [00:00<00:02, 5563.12it/s]     24%|##3       | 3897/16384 [00:00<00:02, 5567.78it/s]     27%|##7       | 4456/16384 [00:00<00:02, 5572.56it/s]     31%|###       | 5014/16384 [00:00<00:02, 5573.50it/s]     34%|###4      | 5572/16384 [00:01<00:01, 5574.24it/s]     37%|###7      | 6131/16384 [00:01<00:01, 5578.60it/s]     41%|####      | 6690/16384 [00:01<00:01, 5581.98it/s]     44%|####4     | 7249/16384 [00:01<00:01, 5576.74it/s]     48%|####7     | 7808/16384 [00:01<00:01, 5579.51it/s]     51%|#####1    | 8367/16384 [00:01<00:01, 5581.46it/s]     54%|#####4    | 8926/16384 [00:01<00:01, 5581.46it/s]     58%|#####7    | 9485/16384 [00:01<00:01, 5583.76it/s]     61%|######1   | 10044/16384 [00:01<00:01, 5577.22it/s]     65%|######4   | 10602/16384 [00:01<00:01, 5576.28it/s]     68%|######8   | 11160/16384 [00:02<00:00, 5575.91it/s]     72%|#######1  | 11719/16384 [00:02<00:00, 5579.80it/s]     75%|#######4  | 12278/16384 [00:02<00:00, 5580.40it/s]     78%|#######8  | 12837/16384 [00:02<00:00, 5580.48it/s]     82%|########1 | 13396/16384 [00:02<00:00, 5583.28it/s]     85%|########5 | 13955/16384 [00:02<00:00, 5583.06it/s]     89%|########8 | 14514/16384 [00:02<00:00, 5585.07it/s]     92%|#########2| 15074/16384 [00:02<00:00, 5586.51it/s]     95%|#########5| 15633/16384 [00:02<00:00, 5583.54it/s]     99%|#########8| 16192/16384 [00:02<00:00, 5580.95it/s]    100%|##########| 16384/16384 [00:02<00:00, 5575.53it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      3%|3         | 543/16384 [00:00<00:02, 5428.06it/s]      7%|6         | 1095/16384 [00:00<00:02, 5478.77it/s]     10%|#         | 1654/16384 [00:00<00:02, 5528.46it/s]     14%|#3        | 2215/16384 [00:00<00:02, 5560.11it/s]     17%|#6        | 2776/16384 [00:00<00:02, 5575.78it/s]     20%|##        | 3338/16384 [00:00<00:02, 5589.04it/s]     24%|##3       | 3900/16384 [00:00<00:02, 5598.30it/s]     27%|##7       | 4461/16384 [00:00<00:02, 5601.79it/s]     31%|###       | 5022/16384 [00:00<00:02, 5603.44it/s]     34%|###4      | 5584/16384 [00:01<00:01, 5606.08it/s]     38%|###7      | 6146/16384 [00:01<00:01, 5607.49it/s]     41%|####      | 6707/16384 [00:01<00:01, 5605.32it/s]     44%|####4     | 7268/16384 [00:01<00:01, 5605.45it/s]     48%|####7     | 7829/16384 [00:01<00:01, 5606.54it/s]     51%|#####1    | 8390/16384 [00:01<00:01, 5607.27it/s]     55%|#####4    | 8951/16384 [00:01<00:01, 5605.93it/s]     58%|#####8    | 9512/16384 [00:01<00:01, 5605.74it/s]     61%|######1   | 10073/16384 [00:01<00:01, 5604.68it/s]     65%|######4   | 10634/16384 [00:01<00:01, 5586.18it/s]     68%|######8   | 11193/16384 [00:02<00:00, 5508.26it/s]     72%|#######1  | 11745/16384 [00:02<00:00, 5392.53it/s]     75%|#######5  | 12288/16384 [00:02<00:00, 5401.79it/s]     78%|#######8  | 12835/16384 [00:02<00:00, 5419.61it/s]     82%|########1 | 13378/16384 [00:02<00:00, 5397.79it/s]     85%|########4 | 13919/16384 [00:02<00:00, 5360.47it/s]     88%|########8 | 14456/16384 [00:02<00:00, 5295.66it/s]     91%|#########1| 14986/16384 [00:02<00:00, 5238.13it/s]     95%|#########4| 15511/16384 [00:02<00:00, 5131.76it/s]     98%|#########7| 16025/16384 [00:02<00:00, 5112.43it/s]    100%|##########| 16384/16384 [00:03<00:00, 5455.36it/s]

    <matplotlib.legend.Legend object at 0x2896759c0>



.. GENERATED FROM PYTHON SOURCE LINES 352-355

Clock Jitter Sensitivity
------------------------


.. GENERATED FROM PYTHON SOURCE LINES 355-483

.. code-block:: default

    jitter_std = np.power(10.0, np.arange(-6, 0)) * T
    # jitter_std = np.arange(3) * T * 0.3
    clock_jitter = [lambda: (np.random.random() - 0.5) * std for std in jitter_std]

    size = 1 << 14
    t = np.arange(size) * T

    estimates = []
    estimates_ref = []

    for jitter in clock_jitter:
        digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_sc]),
            analog_system_sc,
            cbadc.digital_control.DigitalControl(
                cbadc.analog_signal.Clock(T),
                M,
                impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
            ),
            eta2,
            K1,
            K2,
            solver_type=cbadc.digital_estimator.FilterComputationBackend.mpmath,
        )

        # Apply FIR filter
        # digital_estimator_sc.convolve(fir_filter)

        digital_estimator_sc(
            cbadc.simulator.get_simulator(
                analog_system_sc,
                cbadc.digital_control.DigitalControl(
                    cbadc.analog_signal.Clock(T),
                    M,
                    impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
                ),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )

        digital_estimator_ref = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_ref]),
            analog_system_ref,
            cbadc.digital_control.DigitalControl(cbadc.analog_signal.Clock(T), M),
            eta2,
            K1,
            K2,
            solver_type=cbadc.digital_estimator.FilterComputationBackend.mpmath,
        )

        # Apply FIR filter
        # digital_estimator_ref.convolve(fir_filter)

        digital_estimator_ref(
            cbadc.simulator.get_simulator(
                analog_system_ref,
                cbadc.digital_control.DigitalControl(cbadc.analog_signal.Clock(T), M),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )

        u_hat = np.zeros(size)
        u_hat_ref = np.zeros_like(u_hat)
        digital_estimator_sc.warm_up()
        digital_estimator_ref.warm_up()
        for index in cbadc.utilities.show_status(range(size)):
            u_hat[index] = next(digital_estimator_sc)
            u_hat_ref[index] = next(digital_estimator_ref)
        estimates.append(u_hat)
        estimates_ref.append(u_hat_ref)

    # Plot estimates in time domain
    plt.figure()
    plt.title("Estimates")
    for index, jitter in enumerate(clock_jitter):
        plt.plot(
            t / T,
            estimates[index],
            label=f"Std / T = {np.round(jitter_std[index] / T * 100, 3)}%",
        )
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 1000))
    plt.legend()

    # Plot estimates in time domain
    plt.figure()
    plt.title("Ref Estimates")
    for index, jitter in enumerate(clock_jitter):
        plt.plot(
            t / T,
            estimates_ref[index],
            label=f"Ref Std / T = {np.round(jitter_std[index] / T * 100, 3)}%",
        )
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 1000))
    plt.legend()


    # Plot estimates PSD
    for index, jitter in enumerate(clock_jitter):
        plt.figure()
        plt.title("Estimates PSD Clock Jitter")

        f, psd = cbadc.utilities.compute_power_spectral_density(
            estimates[index][K1 + K2 :], fs=1.0 / T
        )
        f_ref, psd_ref = cbadc.utilities.compute_power_spectral_density(
            estimates_ref[index][K1 + K2 :], fs=1.0 / T
        )
        plt.semilogx(
            f,
            10 * np.log10(psd),
            label=f"SC (Std/T) = +- {np.round(jitter_std[index] / T * 100, 3)}%",
        )
        plt.semilogx(
            f_ref,
            10 * np.log10(psd_ref),
            "--",
            label=f"Ref (Std/T) = +- {np.round(jitter_std[index] / T  * 100, 3)}%",
        )
        plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
        plt.xlabel("f [Hz]")
        plt.ylabel("V^2/Hz [dB]")
        plt.legend()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_009.png
         :alt: Estimates
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_010.png
         :alt: Ref Estimates
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_011.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_011.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_012.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_012.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_013.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_014.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_014.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_015.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_015.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_016.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_016.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 265/16384 [00:00<00:06, 2645.72it/s]      3%|3         | 539/16384 [00:00<00:05, 2695.80it/s]      5%|4         | 812/16384 [00:00<00:05, 2711.08it/s]      7%|6         | 1090/16384 [00:00<00:05, 2737.81it/s]      8%|8         | 1365/16384 [00:00<00:05, 2740.37it/s]     10%|#         | 1640/16384 [00:00<00:05, 2741.36it/s]     12%|#1        | 1915/16384 [00:00<00:05, 2739.30it/s]     13%|#3        | 2189/16384 [00:00<00:05, 2695.79it/s]     15%|#5        | 2459/16384 [00:00<00:05, 2651.92it/s]     17%|#6        | 2728/16384 [00:01<00:05, 2661.49it/s]     18%|#8        | 2995/16384 [00:01<00:05, 2657.33it/s]     20%|#9        | 3266/16384 [00:01<00:04, 2671.48it/s]     22%|##1       | 3538/16384 [00:01<00:04, 2683.68it/s]     23%|##3       | 3813/16384 [00:01<00:04, 2703.24it/s]     25%|##4       | 4089/16384 [00:01<00:04, 2717.55it/s]     27%|##6       | 4367/16384 [00:01<00:04, 2734.26it/s]     28%|##8       | 4643/16384 [00:01<00:04, 2739.25it/s]     30%|###       | 4917/16384 [00:01<00:04, 2734.30it/s]     32%|###1      | 5191/16384 [00:01<00:04, 2729.01it/s]     33%|###3      | 5466/16384 [00:02<00:03, 2735.23it/s]     35%|###5      | 5740/16384 [00:02<00:03, 2714.57it/s]     37%|###6      | 6014/16384 [00:02<00:03, 2721.22it/s]     38%|###8      | 6287/16384 [00:02<00:03, 2723.17it/s]     40%|####      | 6563/16384 [00:02<00:03, 2732.79it/s]     42%|####1     | 6837/16384 [00:02<00:03, 2726.55it/s]     43%|####3     | 7114/16384 [00:02<00:03, 2737.89it/s]     45%|####5     | 7389/16384 [00:02<00:03, 2741.18it/s]     47%|####6     | 7666/16384 [00:02<00:03, 2747.88it/s]     48%|####8     | 7941/16384 [00:02<00:03, 2741.89it/s]     50%|#####     | 8218/16384 [00:03<00:02, 2750.13it/s]     52%|#####1    | 8494/16384 [00:03<00:02, 2752.97it/s]     54%|#####3    | 8771/16384 [00:03<00:02, 2757.91it/s]     55%|#####5    | 9047/16384 [00:03<00:02, 2758.49it/s]     57%|#####6    | 9324/16384 [00:03<00:02, 2759.25it/s]     59%|#####8    | 9601/16384 [00:03<00:02, 2761.08it/s]     60%|######    | 9879/16384 [00:03<00:02, 2764.92it/s]     62%|######1   | 10157/16384 [00:03<00:02, 2768.73it/s]     64%|######3   | 10434/16384 [00:03<00:02, 2763.29it/s]     65%|######5   | 10712/16384 [00:03<00:02, 2767.73it/s]     67%|######7   | 10989/16384 [00:04<00:01, 2765.11it/s]     69%|######8   | 11266/16384 [00:04<00:01, 2763.64it/s]     70%|#######   | 11543/16384 [00:04<00:01, 2763.71it/s]     72%|#######2  | 11820/16384 [00:04<00:01, 2762.76it/s]     74%|#######3  | 12097/16384 [00:04<00:01, 2762.22it/s]     76%|#######5  | 12374/16384 [00:04<00:01, 2754.05it/s]     77%|#######7  | 12650/16384 [00:04<00:01, 2754.79it/s]     79%|#######8  | 12928/16384 [00:04<00:01, 2760.16it/s]     81%|########  | 13205/16384 [00:04<00:01, 2762.48it/s]     82%|########2 | 13482/16384 [00:04<00:01, 2756.90it/s]     84%|########3 | 13759/16384 [00:05<00:00, 2758.09it/s]     86%|########5 | 14035/16384 [00:05<00:00, 2749.33it/s]     87%|########7 | 14310/16384 [00:05<00:00, 2728.38it/s]     89%|########9 | 14583/16384 [00:05<00:00, 2728.55it/s]     91%|######### | 14857/16384 [00:05<00:00, 2730.84it/s]     92%|#########2| 15131/16384 [00:05<00:00, 2727.86it/s]     94%|#########4| 15411/16384 [00:05<00:00, 2748.20it/s]     96%|#########5| 15691/16384 [00:05<00:00, 2762.55it/s]     97%|#########7| 15972/16384 [00:05<00:00, 2774.05it/s]     99%|#########9| 16252/16384 [00:05<00:00, 2780.80it/s]    100%|##########| 16384/16384 [00:05<00:00, 2739.65it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 270/16384 [00:00<00:05, 2698.76it/s]      3%|3         | 540/16384 [00:00<00:06, 2613.19it/s]      5%|4         | 802/16384 [00:00<00:06, 2595.29it/s]      6%|6         | 1062/16384 [00:00<00:05, 2573.40it/s]      8%|8         | 1320/16384 [00:00<00:05, 2565.06it/s]     10%|9         | 1577/16384 [00:00<00:05, 2559.06it/s]     11%|#1        | 1834/16384 [00:00<00:05, 2562.44it/s]     13%|#2        | 2098/16384 [00:00<00:05, 2585.94it/s]     14%|#4        | 2357/16384 [00:00<00:05, 2579.29it/s]     16%|#5        | 2615/16384 [00:01<00:05, 2573.97it/s]     18%|#7        | 2873/16384 [00:01<00:05, 2575.47it/s]     19%|#9        | 3134/16384 [00:01<00:05, 2584.83it/s]     21%|##        | 3401/16384 [00:01<00:04, 2610.41it/s]     22%|##2       | 3676/16384 [00:01<00:04, 2651.37it/s]     24%|##4       | 3952/16384 [00:01<00:04, 2681.46it/s]     26%|##5       | 4227/16384 [00:01<00:04, 2701.54it/s]     27%|##7       | 4504/16384 [00:01<00:04, 2721.61it/s]     29%|##9       | 4781/16384 [00:01<00:04, 2734.45it/s]     31%|###       | 5055/16384 [00:01<00:04, 2716.52it/s]     33%|###2      | 5327/16384 [00:02<00:04, 2665.32it/s]     34%|###4      | 5594/16384 [00:02<00:04, 2639.79it/s]     36%|###5      | 5859/16384 [00:02<00:04, 2600.99it/s]     37%|###7      | 6120/16384 [00:02<00:03, 2589.70it/s]     39%|###8      | 6380/16384 [00:02<00:03, 2585.14it/s]     41%|####      | 6646/16384 [00:02<00:03, 2605.73it/s]     42%|####2     | 6913/16384 [00:02<00:03, 2621.75it/s]     44%|####3     | 7185/16384 [00:02<00:03, 2650.81it/s]     46%|####5     | 7456/16384 [00:02<00:03, 2667.23it/s]     47%|####7     | 7734/16384 [00:02<00:03, 2698.03it/s]     49%|####8     | 8013/16384 [00:03<00:03, 2724.04it/s]     51%|#####     | 8288/16384 [00:03<00:02, 2729.88it/s]     52%|#####2    | 8566/16384 [00:03<00:02, 2742.54it/s]     54%|#####3    | 8841/16384 [00:03<00:02, 2619.92it/s]     56%|#####5    | 9111/16384 [00:03<00:02, 2641.10it/s]     57%|#####7    | 9376/16384 [00:03<00:02, 2528.77it/s]     59%|#####8    | 9638/16384 [00:03<00:02, 2554.52it/s]     60%|######    | 9895/16384 [00:03<00:02, 2545.72it/s]     62%|######1   | 10153/16384 [00:03<00:02, 2553.87it/s]     64%|######3   | 10416/16384 [00:03<00:02, 2575.02it/s]     65%|######5   | 10691/16384 [00:04<00:02, 2625.66it/s]     67%|######6   | 10967/16384 [00:04<00:02, 2664.96it/s]     69%|######8   | 11244/16384 [00:04<00:01, 2695.39it/s]     70%|#######   | 11519/16384 [00:04<00:01, 2711.38it/s]     72%|#######1  | 11794/16384 [00:04<00:01, 2720.82it/s]     74%|#######3  | 12067/16384 [00:04<00:01, 2720.19it/s]     75%|#######5  | 12340/16384 [00:04<00:01, 2697.82it/s]     77%|#######6  | 12610/16384 [00:04<00:01, 2676.33it/s]     79%|#######8  | 12883/16384 [00:04<00:01, 2691.23it/s]     80%|########  | 13155/16384 [00:04<00:01, 2698.12it/s]     82%|########1 | 13434/16384 [00:05<00:01, 2723.02it/s]     84%|########3 | 13714/16384 [00:05<00:00, 2744.65it/s]     85%|########5 | 13992/16384 [00:05<00:00, 2752.40it/s]     87%|########7 | 14268/16384 [00:05<00:00, 2754.21it/s]     89%|########8 | 14544/16384 [00:05<00:00, 2747.95it/s]     90%|######### | 14819/16384 [00:05<00:00, 2731.21it/s]     92%|#########2| 15093/16384 [00:05<00:00, 2714.38it/s]     94%|#########3| 15366/16384 [00:05<00:00, 2718.73it/s]     95%|#########5| 15640/16384 [00:05<00:00, 2722.74it/s]     97%|#########7| 15913/16384 [00:05<00:00, 2716.95it/s]     99%|#########8| 16190/16384 [00:06<00:00, 2730.69it/s]    100%|##########| 16384/16384 [00:06<00:00, 2661.34it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 276/16384 [00:00<00:05, 2759.64it/s]      3%|3         | 555/16384 [00:00<00:05, 2775.92it/s]      5%|5         | 834/16384 [00:00<00:05, 2778.07it/s]      7%|6         | 1113/16384 [00:00<00:05, 2781.84it/s]      8%|8         | 1392/16384 [00:00<00:05, 2747.60it/s]     10%|#         | 1670/16384 [00:00<00:05, 2755.80it/s]     12%|#1        | 1950/16384 [00:00<00:05, 2770.11it/s]     14%|#3        | 2230/16384 [00:00<00:05, 2777.71it/s]     15%|#5        | 2510/16384 [00:00<00:04, 2783.22it/s]     17%|#7        | 2790/16384 [00:01<00:04, 2785.95it/s]     19%|#8        | 3071/16384 [00:01<00:04, 2791.02it/s]     20%|##        | 3351/16384 [00:01<00:04, 2783.06it/s]     22%|##2       | 3632/16384 [00:01<00:04, 2788.37it/s]     24%|##3       | 3911/16384 [00:01<00:04, 2782.16it/s]     26%|##5       | 4191/16384 [00:01<00:04, 2787.37it/s]     27%|##7       | 4470/16384 [00:01<00:04, 2786.06it/s]     29%|##8       | 4749/16384 [00:01<00:04, 2783.74it/s]     31%|###       | 5029/16384 [00:01<00:04, 2786.95it/s]     32%|###2      | 5309/16384 [00:01<00:03, 2790.54it/s]     34%|###4      | 5590/16384 [00:02<00:03, 2793.68it/s]     36%|###5      | 5870/16384 [00:02<00:03, 2791.32it/s]     38%|###7      | 6150/16384 [00:02<00:03, 2792.64it/s]     39%|###9      | 6430/16384 [00:02<00:03, 2791.96it/s]     41%|####      | 6710/16384 [00:02<00:03, 2792.16it/s]     43%|####2     | 6990/16384 [00:02<00:03, 2787.29it/s]     44%|####4     | 7270/16384 [00:02<00:03, 2788.77it/s]     46%|####6     | 7550/16384 [00:02<00:03, 2789.70it/s]     48%|####7     | 7830/16384 [00:02<00:03, 2790.82it/s]     50%|####9     | 8111/16384 [00:02<00:02, 2794.13it/s]     51%|#####1    | 8391/16384 [00:03<00:02, 2794.65it/s]     53%|#####2    | 8671/16384 [00:03<00:02, 2793.25it/s]     55%|#####4    | 8951/16384 [00:03<00:02, 2791.43it/s]     56%|#####6    | 9231/16384 [00:03<00:02, 2792.99it/s]     58%|#####8    | 9511/16384 [00:03<00:02, 2791.71it/s]     60%|#####9    | 9792/16384 [00:03<00:02, 2795.10it/s]     61%|######1   | 10072/16384 [00:03<00:02, 2794.01it/s]     63%|######3   | 10352/16384 [00:03<00:02, 2793.13it/s]     65%|######4   | 10632/16384 [00:03<00:02, 2793.97it/s]     67%|######6   | 10913/16384 [00:03<00:01, 2797.76it/s]     68%|######8   | 11193/16384 [00:04<00:01, 2772.87it/s]     70%|#######   | 11473/16384 [00:04<00:01, 2778.38it/s]     72%|#######1  | 11753/16384 [00:04<00:01, 2784.19it/s]     73%|#######3  | 12033/16384 [00:04<00:01, 2786.26it/s]     75%|#######5  | 12314/16384 [00:04<00:01, 2792.07it/s]     77%|#######6  | 12594/16384 [00:04<00:01, 2792.55it/s]     79%|#######8  | 12875/16384 [00:04<00:01, 2796.50it/s]     80%|########  | 13155/16384 [00:04<00:01, 2793.51it/s]     82%|########2 | 13435/16384 [00:04<00:01, 2794.54it/s]     84%|########3 | 13715/16384 [00:04<00:00, 2793.28it/s]     85%|########5 | 13995/16384 [00:05<00:00, 2792.24it/s]     87%|########7 | 14275/16384 [00:05<00:00, 2791.88it/s]     89%|########8 | 14555/16384 [00:05<00:00, 2791.84it/s]     91%|######### | 14835/16384 [00:05<00:00, 2794.17it/s]     92%|#########2| 15115/16384 [00:05<00:00, 2792.79it/s]     94%|#########3| 15395/16384 [00:05<00:00, 2793.70it/s]     96%|#########5| 15675/16384 [00:05<00:00, 2793.65it/s]     97%|#########7| 15955/16384 [00:05<00:00, 2794.18it/s]     99%|#########9| 16235/16384 [00:05<00:00, 2793.22it/s]    100%|##########| 16384/16384 [00:05<00:00, 2788.42it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 276/16384 [00:00<00:05, 2756.50it/s]      3%|3         | 555/16384 [00:00<00:05, 2772.85it/s]      5%|5         | 833/16384 [00:00<00:05, 2776.07it/s]      7%|6         | 1113/16384 [00:00<00:05, 2782.98it/s]      8%|8         | 1392/16384 [00:00<00:05, 2783.64it/s]     10%|#         | 1671/16384 [00:00<00:05, 2784.75it/s]     12%|#1        | 1950/16384 [00:00<00:05, 2784.99it/s]     14%|#3        | 2229/16384 [00:00<00:05, 2784.72it/s]     15%|#5        | 2508/16384 [00:00<00:04, 2784.10it/s]     17%|#7        | 2787/16384 [00:01<00:04, 2783.42it/s]     19%|#8        | 3067/16384 [00:01<00:04, 2786.61it/s]     20%|##        | 3346/16384 [00:01<00:04, 2783.76it/s]     22%|##2       | 3625/16384 [00:01<00:04, 2782.99it/s]     24%|##3       | 3904/16384 [00:01<00:04, 2777.17it/s]     26%|##5       | 4184/16384 [00:01<00:04, 2781.46it/s]     27%|##7       | 4463/16384 [00:01<00:04, 2783.05it/s]     29%|##8       | 4742/16384 [00:01<00:04, 2781.53it/s]     31%|###       | 5021/16384 [00:01<00:04, 2783.22it/s]     32%|###2      | 5300/16384 [00:01<00:03, 2782.77it/s]     34%|###4      | 5579/16384 [00:02<00:03, 2783.38it/s]     36%|###5      | 5858/16384 [00:02<00:03, 2783.59it/s]     37%|###7      | 6137/16384 [00:02<00:03, 2784.79it/s]     39%|###9      | 6416/16384 [00:02<00:03, 2778.07it/s]     41%|####      | 6695/16384 [00:02<00:03, 2779.66it/s]     43%|####2     | 6973/16384 [00:02<00:03, 2778.98it/s]     44%|####4     | 7252/16384 [00:02<00:03, 2781.18it/s]     46%|####5     | 7531/16384 [00:02<00:03, 2761.12it/s]     48%|####7     | 7808/16384 [00:02<00:03, 2753.26it/s]     49%|####9     | 8084/16384 [00:02<00:03, 2731.23it/s]     51%|#####1    | 8361/16384 [00:03<00:02, 2741.64it/s]     53%|#####2    | 8639/16384 [00:03<00:02, 2751.33it/s]     54%|#####4    | 8917/16384 [00:03<00:02, 2757.77it/s]     56%|#####6    | 9196/16384 [00:03<00:02, 2765.99it/s]     58%|#####7    | 9474/16384 [00:03<00:02, 2768.32it/s]     60%|#####9    | 9752/16384 [00:03<00:02, 2770.00it/s]     61%|######1   | 10030/16384 [00:03<00:02, 2771.12it/s]     63%|######2   | 10308/16384 [00:03<00:02, 2770.72it/s]     65%|######4   | 10586/16384 [00:03<00:02, 2773.34it/s]     66%|######6   | 10865/16384 [00:03<00:01, 2777.06it/s]     68%|######8   | 11144/16384 [00:04<00:01, 2779.63it/s]     70%|######9   | 11423/16384 [00:04<00:01, 2781.36it/s]     71%|#######1  | 11702/16384 [00:04<00:01, 2783.21it/s]     73%|#######3  | 11981/16384 [00:04<00:01, 2783.08it/s]     75%|#######4  | 12260/16384 [00:04<00:01, 2784.36it/s]     77%|#######6  | 12539/16384 [00:04<00:01, 2783.56it/s]     78%|#######8  | 12819/16384 [00:04<00:01, 2785.95it/s]     80%|#######9  | 13098/16384 [00:04<00:01, 2783.52it/s]     82%|########1 | 13377/16384 [00:04<00:01, 2783.89it/s]     83%|########3 | 13656/16384 [00:04<00:00, 2784.75it/s]     85%|########5 | 13935/16384 [00:05<00:00, 2786.18it/s]     87%|########6 | 14214/16384 [00:05<00:00, 2785.07it/s]     88%|########8 | 14493/16384 [00:05<00:00, 2785.51it/s]     90%|######### | 14772/16384 [00:05<00:00, 2784.74it/s]     92%|#########1| 15051/16384 [00:05<00:00, 2779.71it/s]     94%|#########3| 15329/16384 [00:05<00:00, 2778.73it/s]     95%|#########5| 15607/16384 [00:05<00:00, 2777.43it/s]     97%|#########6| 15886/16384 [00:05<00:00, 2779.76it/s]     99%|#########8| 16164/16384 [00:05<00:00, 2777.11it/s]    100%|##########| 16384/16384 [00:05<00:00, 2777.27it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 277/16384 [00:00<00:05, 2761.35it/s]      3%|3         | 556/16384 [00:00<00:05, 2775.33it/s]      5%|5         | 835/16384 [00:00<00:05, 2778.44it/s]      7%|6         | 1114/16384 [00:00<00:05, 2780.05it/s]      9%|8         | 1393/16384 [00:00<00:05, 2779.14it/s]     10%|#         | 1672/16384 [00:00<00:05, 2780.82it/s]     12%|#1        | 1951/16384 [00:00<00:05, 2781.70it/s]     14%|#3        | 2230/16384 [00:00<00:05, 2781.74it/s]     15%|#5        | 2509/16384 [00:00<00:04, 2782.73it/s]     17%|#7        | 2788/16384 [00:01<00:04, 2778.20it/s]     19%|#8        | 3067/16384 [00:01<00:04, 2779.74it/s]     20%|##        | 3345/16384 [00:01<00:04, 2779.10it/s]     22%|##2       | 3623/16384 [00:01<00:04, 2772.92it/s]     24%|##3       | 3901/16384 [00:01<00:04, 2773.84it/s]     26%|##5       | 4179/16384 [00:01<00:04, 2775.64it/s]     27%|##7       | 4458/16384 [00:01<00:04, 2777.74it/s]     29%|##8       | 4737/16384 [00:01<00:04, 2778.58it/s]     31%|###       | 5016/16384 [00:01<00:04, 2780.59it/s]     32%|###2      | 5296/16384 [00:01<00:03, 2783.61it/s]     34%|###4      | 5575/16384 [00:02<00:03, 2783.70it/s]     36%|###5      | 5854/16384 [00:02<00:03, 2782.05it/s]     37%|###7      | 6133/16384 [00:02<00:03, 2782.46it/s]     39%|###9      | 6412/16384 [00:02<00:03, 2780.40it/s]     41%|####      | 6691/16384 [00:02<00:03, 2777.74it/s]     43%|####2     | 6969/16384 [00:02<00:03, 2761.27it/s]     44%|####4     | 7247/16384 [00:02<00:03, 2765.56it/s]     46%|####5     | 7525/16384 [00:02<00:03, 2767.46it/s]     48%|####7     | 7803/16384 [00:02<00:03, 2770.99it/s]     49%|####9     | 8081/16384 [00:02<00:02, 2772.38it/s]     51%|#####1    | 8359/16384 [00:03<00:02, 2772.25it/s]     53%|#####2    | 8637/16384 [00:03<00:02, 2774.12it/s]     54%|#####4    | 8915/16384 [00:03<00:02, 2775.52it/s]     56%|#####6    | 9194/16384 [00:03<00:02, 2778.06it/s]     58%|#####7    | 9472/16384 [00:03<00:02, 2777.13it/s]     60%|#####9    | 9750/16384 [00:03<00:02, 2777.34it/s]     61%|######1   | 10028/16384 [00:03<00:02, 2775.66it/s]     63%|######2   | 10306/16384 [00:03<00:02, 2776.30it/s]     65%|######4   | 10584/16384 [00:03<00:02, 2776.59it/s]     66%|######6   | 10862/16384 [00:03<00:01, 2777.41it/s]     68%|######7   | 11140/16384 [00:04<00:01, 2776.46it/s]     70%|######9   | 11419/16384 [00:04<00:01, 2778.32it/s]     71%|#######1  | 11697/16384 [00:04<00:01, 2778.00it/s]     73%|#######3  | 11975/16384 [00:04<00:01, 2778.23it/s]     75%|#######4  | 12254/16384 [00:04<00:01, 2780.53it/s]     76%|#######6  | 12533/16384 [00:04<00:01, 2773.43it/s]     78%|#######8  | 12811/16384 [00:04<00:01, 2769.28it/s]     80%|#######9  | 13089/16384 [00:04<00:01, 2771.45it/s]     82%|########1 | 13368/16384 [00:04<00:01, 2775.98it/s]     83%|########3 | 13646/16384 [00:04<00:00, 2775.98it/s]     85%|########4 | 13925/16384 [00:05<00:00, 2779.59it/s]     87%|########6 | 14203/16384 [00:05<00:00, 2779.42it/s]     88%|########8 | 14482/16384 [00:05<00:00, 2781.38it/s]     90%|######### | 14761/16384 [00:05<00:00, 2783.36it/s]     92%|#########1| 15040/16384 [00:05<00:00, 2772.90it/s]     93%|#########3| 15318/16384 [00:05<00:00, 2744.41it/s]     95%|#########5| 15596/16384 [00:05<00:00, 2752.12it/s]     97%|#########6| 15875/16384 [00:05<00:00, 2762.45it/s]     99%|#########8| 16153/16384 [00:05<00:00, 2767.21it/s]    100%|##########| 16384/16384 [00:05<00:00, 2775.15it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 272/16384 [00:00<00:05, 2710.48it/s]      3%|3         | 546/16384 [00:00<00:05, 2726.24it/s]      5%|4         | 819/16384 [00:00<00:05, 2726.31it/s]      7%|6         | 1098/16384 [00:00<00:05, 2751.14it/s]      8%|8         | 1378/16384 [00:00<00:05, 2765.76it/s]     10%|#         | 1658/16384 [00:00<00:05, 2774.19it/s]     12%|#1        | 1936/16384 [00:00<00:05, 2763.53it/s]     14%|#3        | 2213/16384 [00:00<00:05, 2757.26it/s]     15%|#5        | 2490/16384 [00:00<00:05, 2759.49it/s]     17%|#6        | 2768/16384 [00:01<00:04, 2763.23it/s]     19%|#8        | 3048/16384 [00:01<00:04, 2772.42it/s]     20%|##        | 3327/16384 [00:01<00:04, 2777.38it/s]     22%|##2       | 3605/16384 [00:01<00:04, 2775.24it/s]     24%|##3       | 3884/16384 [00:01<00:04, 2778.05it/s]     25%|##5       | 4165/16384 [00:01<00:04, 2785.40it/s]     27%|##7       | 4445/16384 [00:01<00:04, 2788.79it/s]     29%|##8       | 4725/16384 [00:01<00:04, 2792.11it/s]     31%|###       | 5005/16384 [00:01<00:04, 2793.76it/s]     32%|###2      | 5285/16384 [00:01<00:03, 2795.45it/s]     34%|###3      | 5566/16384 [00:02<00:03, 2797.28it/s]     36%|###5      | 5846/16384 [00:02<00:03, 2796.44it/s]     37%|###7      | 6126/16384 [00:02<00:03, 2796.65it/s]     39%|###9      | 6406/16384 [00:02<00:03, 2795.28it/s]     41%|####      | 6687/16384 [00:02<00:03, 2798.43it/s]     43%|####2     | 6967/16384 [00:02<00:03, 2791.02it/s]     44%|####4     | 7247/16384 [00:02<00:03, 2792.74it/s]     46%|####5     | 7527/16384 [00:02<00:03, 2793.11it/s]     48%|####7     | 7807/16384 [00:02<00:03, 2786.98it/s]     49%|####9     | 8086/16384 [00:02<00:02, 2771.06it/s]     51%|#####1    | 8364/16384 [00:03<00:02, 2772.57it/s]     53%|#####2    | 8644/16384 [00:03<00:02, 2779.59it/s]     54%|#####4    | 8924/16384 [00:03<00:02, 2782.76it/s]     56%|#####6    | 9204/16384 [00:03<00:02, 2786.92it/s]     58%|#####7    | 9483/16384 [00:03<00:02, 2765.94it/s]     60%|#####9    | 9760/16384 [00:03<00:02, 2736.46it/s]     61%|######1   | 10034/16384 [00:03<00:02, 2730.76it/s]     63%|######2   | 10310/16384 [00:03<00:02, 2737.87it/s]     65%|######4   | 10584/16384 [00:03<00:02, 2738.01it/s]     66%|######6   | 10859/16384 [00:03<00:02, 2739.93it/s]     68%|######7   | 11134/16384 [00:04<00:01, 2740.99it/s]     70%|######9   | 11409/16384 [00:04<00:01, 2740.88it/s]     71%|#######1  | 11684/16384 [00:04<00:01, 2742.46it/s]     73%|#######2  | 11959/16384 [00:04<00:01, 2742.82it/s]     75%|#######4  | 12234/16384 [00:04<00:01, 2743.94it/s]     76%|#######6  | 12509/16384 [00:04<00:01, 2742.42it/s]     78%|#######8  | 12784/16384 [00:04<00:01, 2743.96it/s]     80%|#######9  | 13059/16384 [00:04<00:01, 2742.23it/s]     81%|########1 | 13335/16384 [00:04<00:01, 2745.17it/s]     83%|########3 | 13614/16384 [00:04<00:01, 2758.21it/s]     85%|########4 | 13894/16384 [00:05<00:00, 2769.69it/s]     87%|########6 | 14173/16384 [00:05<00:00, 2775.66it/s]     88%|########8 | 14453/16384 [00:05<00:00, 2782.82it/s]     90%|########9 | 14733/16384 [00:05<00:00, 2786.51it/s]     92%|#########1| 15013/16384 [00:05<00:00, 2789.53it/s]     93%|#########3| 15293/16384 [00:05<00:00, 2792.62it/s]     95%|#########5| 15573/16384 [00:05<00:00, 2793.24it/s]     97%|#########6| 15854/16384 [00:05<00:00, 2796.07it/s]     98%|#########8| 16134/16384 [00:05<00:00, 2793.31it/s]    100%|##########| 16384/16384 [00:05<00:00, 2770.78it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 22 minutes  9.248 seconds)


.. _sphx_glr_download_tutorials_b_general_plot_e_switched_capacitor_digital_control.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_e_switched_capacitor_digital_control.py <plot_e_switched_capacitor_digital_control.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_e_switched_capacitor_digital_control.ipynb <plot_e_switched_capacitor_digital_control.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
