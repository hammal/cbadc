
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/b_general/plot_e_switched_capacitor_digital_control.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_b_general_plot_e_switched_capacitor_digital_control.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_b_general_plot_e_switched_capacitor_digital_control.py:


Switched-Capacitor Digital Control
==================================

In this tutorial we show how to use switched-capacitor digital control
in combination with a continuous-time system.

.. GENERATED FROM PYTHON SOURCE LINES 8-13

.. code-block:: default

    import cbadc
    import scipy
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 14-48

Integration Node
----------------

Initially we consider a integration node as shown in the figure below.

.. image:: /images/RC-amp.svg
   :width: 500
   :align: center
   :alt: The RC integrator with switched-capacitor digital control.

Which is goverened by the differential equations

:math:`\dot{v}_{x_{\ell}}(t) = \frac{1}{C_{x_{\ell}}} \left( \frac{v_{\Gamma_{\ell}}(t) - v_{s_\ell}(t)}{R_{s}} - \frac{1}{R_{\beta_\ell}}  v_{x_{\ell - 1}}(t) \right)`

:math:`\dot{v}_{\Gamma_{\ell}}(t) = \frac{1}{2R_{s} C_{\Gamma_{\ell}}} \left( v_{s_\ell}(t) - v_{\Gamma_{\ell}}(t) \right)`

during phase :math:`\phi_1` and

:math:`\dot{v}_{x_{\ell}}(t)  =  - \frac{1}{R_{\beta_\ell} C_{x_{\ell}}} v_{x_{\ell - 1}}(t)`

:math:`\dot{v}_{\Gamma_{\ell}}(t) = - \frac{1}{2 R_{s} C_{\Gamma_{\ell}}}  v_{\Gamma_{\ell}}(t)`

during phase :math:`\bar{\phi}_1` where a full control phase :math:`T = T_{\phi_1} + T_{\bar{\phi}_1}`.

To simulate this control-bounded converter we need to specify the whole system which for this
tutorial will be a chain-of-integrators system as shown below.

.. image:: /images/chainOfIntegratorsGeneral.svg
   :width: 1500
   :align: center
   :alt: The chain-of-integrators ADC.

where the digital controls are implemented as above.
Thus the system equations can be written as

.. GENERATED FROM PYTHON SOURCE LINES 48-65

.. code-block:: default


    N = 4
    M = N

    C_x = 1e-9
    C_Gamma = C_x / 2
    R_s = 1e1
    R_beta = 1e3

    beta = 1 / (R_beta * C_x)
    T = 1 / (2 * beta)

    A = beta * np.eye(N, k=-1)
    B = np.zeros(N)
    B[0] = beta
    CT = np.eye(N)








.. GENERATED FROM PYTHON SOURCE LINES 66-84

Simplifying the Differential Equation
-------------------------------------

Due to the virtual ground of the op-amp integrator we can treat the
second differential equation (the one involving :math:`v_{\Gamma_\ell}(t)`)
seperately. Specifically, if we assume the
capacitor :math:`C_{\Gamma}` empties completely during :math:`\bar{\phi}_1`,
and that :math:`v_{s_\ell} = \{\pm 1\}` for all :math:`t`, the digital
control's effect on the analog system can be written as

:math:`v_{\Gamma_\ell}(t) - v_{s_\ell}(t) = v_{s_\ell}(t) \cdot e^{-t/\tau}`

where :math:`\tau=R_s C_{\Gamma_\ell}`.

This can be modeled by instantiating the digital control
:class:`cbadc.digital_control.DigitalControl`
using the impulse response :func:`cbadc.digital_control.RCImpulseResponse`
as

.. GENERATED FROM PYTHON SOURCE LINES 84-98

.. code-block:: default


    impulse_response = cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma)
    digital_control_sc = cbadc.digital_control.DigitalControl(
        cbadc.analog_signal.Clock(T), M, impulse_response=impulse_response
    )

    Gamma = 1 / (R_s * C_x) * np.eye(M)
    Gamma_tildeT = -np.eye(M)

    analog_system_sc = cbadc.analog_system.AnalogSystem(A, B, CT, Gamma, Gamma_tildeT)

    print(digital_control_sc)
    print(analog_system_sc)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ================================================================================

    The Digital Control is parameterized as:

    --------------------------------------------------------------------------------

    clock:
    Analog signal returns constant 0, i.e., maps t |-> 0.

    M:
    4
    ================================================================================

    The analog system is parameterized as:
    A =
    [[      0.       0.       0.       0.]
     [1000000.       0.       0.       0.]
     [      0. 1000000.       0.       0.]
     [      0.       0. 1000000.       0.]],
    B =
    [[1000000.]
     [      0.]
     [      0.]
     [      0.]],
    CT =
    [[1. 0. 0. 0.]
     [0. 1. 0. 0.]
     [0. 0. 1. 0.]
     [0. 0. 0. 1.]],
    Gamma =
    [[1.e+08 0.e+00 0.e+00 0.e+00]
     [0.e+00 1.e+08 0.e+00 0.e+00]
     [0.e+00 0.e+00 1.e+08 0.e+00]
     [0.e+00 0.e+00 0.e+00 1.e+08]],
    Gamma_tildeT =
    [[-1. -0. -0. -0.]
     [-0. -1. -0. -0.]
     [-0. -0. -1. -0.]
     [-0. -0. -0. -1.]], and D=[[0.]
     [0.]
     [0.]
     [0.]]




.. GENERATED FROM PYTHON SOURCE LINES 99-102

Visualizing the State Trajectories
----------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 102-155

.. code-block:: default

    OSR = 32
    amplitude = 1.0
    analog_signal = cbadc.analog_signal.Sinusoidal(amplitude, 1 / T / (OSR << 4))
    Ts = T / 100.0
    size = 1 << 12

    simulator_sc = cbadc.simulator.extended_simulation_result(
        cbadc.simulator.get_simulator(
            analog_system_sc,
            digital_control_sc,
            [analog_signal],
            cbadc.analog_signal.Clock(Ts),
            simulator_type=cbadc.simulator.SimulatorType.analytical,
        )
    )


    analog_system_ref = cbadc.analog_system.AnalogSystem(
        A, B, CT, np.eye(N) * beta, Gamma_tildeT
    )
    digital_control_ref = cbadc.digital_control.DigitalControl(
        cbadc.analog_signal.Clock(T), M
    )
    simulator_ref = cbadc.simulator.extended_simulation_result(
        cbadc.simulator.get_simulator(
            analog_system_ref,
            digital_control_ref,
            [analog_signal],
            cbadc.analog_signal.Clock(Ts),
            simulator_type=cbadc.simulator.SimulatorType.analytical,
        )
    )

    states = np.zeros((size, N))
    states_ref = np.zeros_like(states)
    t = Ts * np.arange(size)

    # Simulations
    for time_step in cbadc.utilities.show_status(range(size)):
        states[time_step, :] = next(simulator_sc)["analog_state"]
        states_ref[time_step, :] = next(simulator_ref)["analog_state"]

    # Plot state trajectories
    for index in range(N):
        plt.figure()
        plt.title("Analog state trajectories for " + f"$x_{index + 1}(t)$")
        plt.plot(t / T, states[:, index], label="SC")
        plt.plot(t / T, states_ref[:, index], label="ref")
        plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
        plt.xlabel("$t/T$")
        plt.legend()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_001.png
         :alt: Analog state trajectories for $x_1(t)$
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_002.png
         :alt: Analog state trajectories for $x_2(t)$
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_003.png
         :alt: Analog state trajectories for $x_3(t)$
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_004.png
         :alt: Analog state trajectories for $x_4(t)$
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/4096 [00:00<?, ?it/s]     18%|#8        | 750/4096 [00:00<00:00, 7496.70it/s]     37%|###6      | 1508/4096 [00:00<00:00, 7545.48it/s]     55%|#####5    | 2263/4096 [00:00<00:00, 7408.63it/s]     73%|#######3  | 3005/4096 [00:00<00:00, 7403.08it/s]     92%|#########1| 3762/4096 [00:00<00:00, 7459.86it/s]    100%|##########| 4096/4096 [00:00<00:00, 7462.16it/s]




.. GENERATED FROM PYTHON SOURCE LINES 156-159

Filter Coefficients
----------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 159-273

.. code-block:: default

    K1 = 1 << 8
    K2 = K1
    eta2 = (
        np.linalg.norm(
            analog_system_sc.transfer_function_matrix(np.array([2 * np.pi / T / OSR]))
        ).flatten()
        ** 2
    )

    # prepending an anti-aliasing filter
    # omega_3dB = 2 * np.pi / T / 16
    # wp = omega_3dB / 2.0
    # ws = omega_3dB
    # gpass = 1.0
    # gstop = 60
    # filter = cbadc.analog_system.IIRDesign(wp, ws, gpass, gstop, ftype="ellip")

    # Post-filtering FIR filter
    fir_filter_numtaps = K1 + K2
    f_cutoff = 1.0 / OSR * 2
    fir_filter = scipy.signal.firwin(fir_filter_numtaps, f_cutoff)


    digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
        # cbadc.analog_system.chain([filter, analog_system_sc]),
        analog_system_sc,
        digital_control_sc,
        eta2,
        K1,
        K2,
    )

    # Apply FIR filter
    digital_estimator_sc.convolve(fir_filter)

    digital_estimator_ref = cbadc.digital_estimator.FIRFilter(
        # cbadc.analog_system.chain([filter, analog_system_ref]),
        analog_system_ref,
        digital_control_ref,
        eta2,
        K1,
        K2,
    )

    # Apply FIR filter
    digital_estimator_ref.convolve(fir_filter)

    plt.figure()
    plt.semilogy(
        np.arange(-K1, K2),
        np.linalg.norm(np.array(digital_estimator_sc.h[0, :, :]), axis=1)[:],
        label="Switched Capacitor Filter",
    )
    plt.semilogy(
        np.arange(-K1, K2),
        np.linalg.norm(np.array(digital_estimator_ref.h[0, :, :]), axis=1)[:],
        label="Ref Filter",
    )

    plt.legend()
    plt.xlabel("filter tap k")
    plt.ylabel("$|| \mathbf{h} [k]||_2$")
    plt.xlim((-K1, K2))
    # plt.ylim((1e-16, 1))
    plt.grid(which="both")

    # Logspace frequencies
    frequencies = np.logspace(-3, 0, 100)
    omega = 4 * np.pi * beta * frequencies

    plt.figure()
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(np.abs(digital_estimator_sc.signal_transfer_function(omega))).flatten(),
        label="$STF(\omega)$ SC",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(np.abs(digital_estimator_ref.signal_transfer_function(omega))).flatten(),
        label="$STF(\omega)$ ref",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(
            np.linalg.norm(
                digital_estimator_sc.noise_transfer_function(omega)[:, 0, :], axis=0
            )
        ),
        "--",
        label="$ || NTF(\omega) ||_2 $ SC",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(
            np.linalg.norm(
                digital_estimator_ref.noise_transfer_function(omega)[:, 0, :], axis=0
            )
        ),
        "--",
        label="$ || NTF(\omega) ||_2 $ ref",
    )
    # Add labels and legends to figure
    plt.legend()
    plt.grid(which="both")
    plt.title("Signal and noise transfer functions")
    plt.xlabel("$f$ [Hz]")
    plt.ylabel("dB")
    # plt.xlim((1e2, 5e3))
    plt.gcf().tight_layout()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_005.png
         :alt: plot e switched capacitor digital control
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_006.png
         :alt: Signal and noise transfer functions
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 274-278

Mismatch Sensitivity to Switch Resistance
-----------------------------------------



.. GENERATED FROM PYTHON SOURCE LINES 278-351

.. code-block:: default


    mismatch_in_percent = np.arange(3) * 10

    size = 1 << 14
    t = np.arange(size) * T

    estimates = []

    for mismatch in mismatch_in_percent:
        digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_sc]),
            analog_system_sc,
            cbadc.digital_control.DigitalControl(
                cbadc.analog_signal.Clock(T),
                M,
                impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
            ),
            eta2,
            K1,
            K2,
        )

        # Apply FIR filter
        digital_estimator_sc.convolve(fir_filter)

        digital_estimator_sc(
            cbadc.simulator.get_simulator(
                cbadc.analog_system.AnalogSystem(
                    A,
                    B,
                    CT,
                    1 / ((1 + mismatch / 100) * R_s * C_x) * np.eye(M),
                    Gamma_tildeT,
                ),
                cbadc.digital_control.DigitalControl(
                    cbadc.analog_signal.Clock(T),
                    M,
                    impulse_response=cbadc.analog_signal.RCImpulseResponse(
                        (1 + mismatch / 100) * R_s * C_Gamma
                    ),
                ),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )
        u_hat = np.zeros(size)
        for index in cbadc.utilities.show_status(range(size)):
            u_hat[index] = next(digital_estimator_sc)
        estimates.append(u_hat)

    # Plot estimates in time domain
    plt.figure()
    plt.title("Estimates")
    for index, mismatch in enumerate(mismatch_in_percent):
        plt.plot(t / T, estimates[index], label=f"Mismatch R_s {mismatch}%")
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 100))
    plt.legend()

    # Plot estimates PSD
    plt.figure()
    plt.title("Estimates PSD")
    for index, mismatch in enumerate(mismatch_in_percent):
        f, psd = cbadc.utilities.compute_power_spectral_density(
            estimates[index][K1 + K2 :], fs=1.0 / T
        )
        plt.semilogx(f, 10 * np.log10(psd), label=f"Mismatch R_s {mismatch}%")
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("f [Hz]")
    plt.ylabel("V^2/Hz [dB]")
    plt.legend()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_007.png
         :alt: Estimates
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_008.png
         :alt: Estimates PSD
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_008.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/16384 [00:00<?, ?it/s]      5%|4         | 802/16384 [00:00<00:01, 8017.22it/s]     10%|9         | 1605/16384 [00:00<00:01, 8020.36it/s]     15%|#4        | 2408/16384 [00:00<00:01, 8015.58it/s]     20%|#9        | 3210/16384 [00:00<00:01, 8013.32it/s]     24%|##4       | 4012/16384 [00:00<00:01, 8006.59it/s]     29%|##9       | 4817/16384 [00:00<00:01, 8019.28it/s]     34%|###4      | 5619/16384 [00:00<00:01, 7897.20it/s]     39%|###9      | 6410/16384 [00:00<00:01, 7877.94it/s]     44%|####3     | 7208/16384 [00:00<00:01, 7909.06it/s]     49%|####8     | 8011/16384 [00:01<00:01, 7946.01it/s]     54%|#####3    | 8810/16384 [00:01<00:00, 7958.41it/s]     59%|#####8    | 9610/16384 [00:01<00:00, 7968.02it/s]     64%|######3   | 10409/16384 [00:01<00:00, 7973.62it/s]     68%|######8   | 11213/16384 [00:01<00:00, 7991.22it/s]     73%|#######3  | 12013/16384 [00:01<00:00, 7992.72it/s]     78%|#######8  | 12816/16384 [00:01<00:00, 8002.03it/s]     83%|########3 | 13617/16384 [00:01<00:00, 7998.98it/s]     88%|########7 | 14417/16384 [00:01<00:00, 7993.49it/s]     93%|#########2| 15217/16384 [00:01<00:00, 7984.74it/s]     98%|#########7| 16016/16384 [00:02<00:00, 7974.00it/s]    100%|##########| 16384/16384 [00:02<00:00, 7974.03it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      5%|4         | 802/16384 [00:00<00:01, 8013.09it/s]     10%|9         | 1604/16384 [00:00<00:01, 7997.47it/s]     15%|#4        | 2411/16384 [00:00<00:01, 8028.58it/s]     20%|#9        | 3220/16384 [00:00<00:01, 8049.66it/s]     25%|##4       | 4025/16384 [00:00<00:01, 7977.62it/s]     29%|##9       | 4831/16384 [00:00<00:01, 8004.39it/s]     34%|###4      | 5641/16384 [00:00<00:01, 8032.97it/s]     39%|###9      | 6450/16384 [00:00<00:01, 8048.54it/s]     44%|####4     | 7258/16384 [00:00<00:01, 8057.03it/s]     49%|####9     | 8069/16384 [00:01<00:01, 8071.04it/s]     54%|#####4    | 8877/16384 [00:01<00:00, 8063.90it/s]     59%|#####9    | 9685/16384 [00:01<00:00, 8065.90it/s]     64%|######4   | 10495/16384 [00:01<00:00, 8075.01it/s]     69%|######9   | 11306/16384 [00:01<00:00, 8085.23it/s]     74%|#######3  | 12115/16384 [00:01<00:00, 8085.25it/s]     79%|#######8  | 12924/16384 [00:01<00:00, 8084.50it/s]     84%|########3 | 13733/16384 [00:01<00:00, 8082.18it/s]     89%|########8 | 14543/16384 [00:01<00:00, 8086.76it/s]     94%|#########3| 15352/16384 [00:01<00:00, 8019.03it/s]     99%|#########8| 16155/16384 [00:02<00:00, 7992.86it/s]    100%|##########| 16384/16384 [00:02<00:00, 8041.88it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      5%|4         | 798/16384 [00:00<00:01, 7978.47it/s]     10%|9         | 1603/16384 [00:00<00:01, 8016.07it/s]     15%|#4        | 2408/16384 [00:00<00:01, 8029.45it/s]     20%|#9        | 3216/16384 [00:00<00:01, 8048.89it/s]     25%|##4       | 4025/16384 [00:00<00:01, 8061.21it/s]     29%|##9       | 4832/16384 [00:00<00:01, 8054.84it/s]     34%|###4      | 5643/16384 [00:00<00:01, 8069.96it/s]     39%|###9      | 6453/16384 [00:00<00:01, 8079.29it/s]     44%|####4     | 7264/16384 [00:00<00:01, 8087.81it/s]     49%|####9     | 8073/16384 [00:01<00:01, 8087.16it/s]     54%|#####4    | 8882/16384 [00:01<00:00, 8047.17it/s]     59%|#####9    | 9694/16384 [00:01<00:00, 8068.86it/s]     64%|######4   | 10502/16384 [00:01<00:00, 8070.75it/s]     69%|######9   | 11312/16384 [00:01<00:00, 8078.62it/s]     74%|#######3  | 12121/16384 [00:01<00:00, 8081.80it/s]     79%|#######8  | 12930/16384 [00:01<00:00, 8083.94it/s]     84%|########3 | 13741/16384 [00:01<00:00, 8089.34it/s]     89%|########8 | 14550/16384 [00:01<00:00, 8058.89it/s]     94%|#########3| 15357/16384 [00:01<00:00, 8061.10it/s]     99%|#########8| 16168/16384 [00:02<00:00, 8075.60it/s]    100%|##########| 16384/16384 [00:02<00:00, 8067.48it/s]

    <matplotlib.legend.Legend object at 0x7f31edbdf820>



.. GENERATED FROM PYTHON SOURCE LINES 352-355

Clock Jitter Sensitivity
------------------------


.. GENERATED FROM PYTHON SOURCE LINES 355-482

.. code-block:: default

    jitter_std = np.power(10.0, np.arange(-6, 0)) * T
    # jitter_std = np.arange(3) * T * 0.3
    clock_jitter = [lambda: (np.random.random() - 0.5) * std for std in jitter_std]

    size = 1 << 14
    t = np.arange(size) * T

    estimates = []
    estimates_ref = []

    for jitter in clock_jitter:
        digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_sc]),
            analog_system_sc,
            cbadc.digital_control.DigitalControl(
                cbadc.analog_signal.Clock(T),
                M,
                impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
            ),
            eta2,
            K1,
            K2,
            solver_type=cbadc.digital_estimator.FilterComputationBackend.mpmath,
        )

        # Apply FIR filter
        # digital_estimator_sc.convolve(fir_filter)

        digital_estimator_sc(
            cbadc.simulator.get_simulator(
                analog_system_sc,
                cbadc.digital_control.DigitalControl(
                    cbadc.analog_signal.Clock(T),
                    M,
                    impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
                ),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )

        digital_estimator_ref = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_ref]),
            analog_system_ref,
            cbadc.digital_control.DigitalControl(cbadc.analog_signal.Clock(T), M),
            eta2,
            K1,
            K2,
            solver_type=cbadc.digital_estimator.FilterComputationBackend.mpmath,
        )

        # Apply FIR filter
        # digital_estimator_ref.convolve(fir_filter)

        digital_estimator_ref(
            cbadc.simulator.get_simulator(
                analog_system_ref,
                cbadc.digital_control.DigitalControl(cbadc.analog_signal.Clock(T), M),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )

        u_hat = np.zeros(size)
        u_hat_ref = np.zeros_like(u_hat)
        digital_estimator_sc.warm_up()
        digital_estimator_ref.warm_up()
        for index in cbadc.utilities.show_status(range(size)):
            u_hat[index] = next(digital_estimator_sc)
            u_hat_ref[index] = next(digital_estimator_ref)
        estimates.append(u_hat)
        estimates_ref.append(u_hat_ref)

    # Plot estimates in time domain
    plt.figure()
    plt.title("Estimates")
    for index, jitter in enumerate(clock_jitter):
        plt.plot(
            t / T,
            estimates[index],
            label=f"Std / T = {np.round(jitter_std[index] / T * 100, 3)}%",
        )
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 1000))
    plt.legend()

    # Plot estimates in time domain
    plt.figure()
    plt.title("Ref Estimates")
    for index, jitter in enumerate(clock_jitter):
        plt.plot(
            t / T,
            estimates_ref[index],
            label=f"Ref Std / T = {np.round(jitter_std[index] / T * 100, 3)}%",
        )
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 1000))
    plt.legend()

    # Plot estimates PSD
    for index, jitter in enumerate(clock_jitter):
        plt.figure()
        plt.title("Estimates PSD Clock Jitter")

        f, psd = cbadc.utilities.compute_power_spectral_density(
            estimates[index][K1 + K2 :], fs=1.0 / T
        )
        f_ref, psd_ref = cbadc.utilities.compute_power_spectral_density(
            estimates_ref[index][K1 + K2 :], fs=1.0 / T
        )
        plt.semilogx(
            f,
            10 * np.log10(psd),
            label=f"SC (Std/T) = +- {np.round(jitter_std[index] / T * 100, 3)}%",
        )
        plt.semilogx(
            f_ref,
            10 * np.log10(psd_ref),
            "--",
            label=f"Ref (Std/T) = +- {np.round(jitter_std[index] / T  * 100, 3)}%",
        )
        plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
        plt.xlabel("f [Hz]")
        plt.ylabel("V^2/Hz [dB]")
        plt.legend()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_009.png
         :alt: Estimates
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_010.png
         :alt: Ref Estimates
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_011.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_011.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_012.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_012.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_013.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_014.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_014.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_015.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_015.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_016.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_general/images/sphx_glr_plot_e_switched_capacitor_digital_control_016.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/16384 [00:00<?, ?it/s]      2%|2         | 404/16384 [00:00<00:03, 4031.06it/s]      5%|4         | 809/16384 [00:00<00:03, 4037.06it/s]      7%|7         | 1214/16384 [00:00<00:03, 4042.38it/s]     10%|9         | 1620/16384 [00:00<00:03, 4046.80it/s]     12%|#2        | 2025/16384 [00:00<00:03, 4037.47it/s]     15%|#4        | 2429/16384 [00:00<00:03, 4036.16it/s]     17%|#7        | 2835/16384 [00:00<00:03, 4040.85it/s]     20%|#9        | 3240/16384 [00:00<00:03, 4042.75it/s]     22%|##2       | 3645/16384 [00:00<00:03, 4042.65it/s]     25%|##4       | 4051/16384 [00:01<00:03, 4045.22it/s]     27%|##7       | 4456/16384 [00:01<00:02, 4044.64it/s]     30%|##9       | 4861/16384 [00:01<00:02, 4042.59it/s]     32%|###2      | 5267/16384 [00:01<00:02, 4045.15it/s]     35%|###4      | 5674/16384 [00:01<00:02, 4049.81it/s]     37%|###7      | 6080/16384 [00:01<00:02, 4051.66it/s]     40%|###9      | 6486/16384 [00:01<00:02, 4048.00it/s]     42%|####2     | 6891/16384 [00:01<00:02, 4006.16it/s]     45%|####4     | 7295/16384 [00:01<00:02, 4014.85it/s]     47%|####6     | 7699/16384 [00:01<00:02, 4020.43it/s]     49%|####9     | 8102/16384 [00:02<00:02, 4017.35it/s]     52%|#####1    | 8504/16384 [00:02<00:01, 4002.81it/s]     54%|#####4    | 8908/16384 [00:02<00:01, 4013.82it/s]     57%|#####6    | 9313/16384 [00:02<00:01, 4022.37it/s]     59%|#####9    | 9716/16384 [00:02<00:01, 4010.84it/s]     62%|######1   | 10119/16384 [00:02<00:01, 4013.72it/s]     64%|######4   | 10522/16384 [00:02<00:01, 4018.07it/s]     67%|######6   | 10924/16384 [00:02<00:01, 4015.61it/s]     69%|######9   | 11327/16384 [00:02<00:01, 4019.10it/s]     72%|#######1  | 11731/16384 [00:02<00:01, 4025.24it/s]     74%|#######4  | 12135/16384 [00:03<00:01, 4028.35it/s]     77%|#######6  | 12538/16384 [00:03<00:00, 4027.49it/s]     79%|#######8  | 12941/16384 [00:03<00:00, 4020.73it/s]     81%|########1 | 13345/16384 [00:03<00:00, 4023.62it/s]     84%|########3 | 13749/16384 [00:03<00:00, 4026.77it/s]     86%|########6 | 14152/16384 [00:03<00:00, 3972.73it/s]     89%|########8 | 14556/16384 [00:03<00:00, 3990.40it/s]     91%|#########1| 14960/16384 [00:03<00:00, 4004.03it/s]     94%|#########3| 15366/16384 [00:03<00:00, 4020.10it/s]     96%|#########6| 15769/16384 [00:03<00:00, 3986.33it/s]     99%|#########8| 16168/16384 [00:04<00:00, 3967.54it/s]    100%|##########| 16384/16384 [00:04<00:00, 4019.43it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 305/16384 [00:00<00:05, 3047.61it/s]      4%|4         | 699/16384 [00:00<00:04, 3567.63it/s]      7%|6         | 1097/16384 [00:00<00:04, 3754.85it/s]      9%|9         | 1495/16384 [00:00<00:03, 3843.00it/s]     12%|#1        | 1886/16384 [00:00<00:03, 3866.12it/s]     14%|#3        | 2281/16384 [00:00<00:03, 3893.11it/s]     16%|#6        | 2681/16384 [00:00<00:03, 3927.30it/s]     19%|#8        | 3082/16384 [00:00<00:03, 3952.94it/s]     21%|##1       | 3483/16384 [00:00<00:03, 3967.94it/s]     24%|##3       | 3883/16384 [00:01<00:03, 3975.11it/s]     26%|##6       | 4281/16384 [00:01<00:03, 3968.96it/s]     29%|##8       | 4678/16384 [00:01<00:02, 3967.21it/s]     31%|###       | 5079/16384 [00:01<00:02, 3978.43it/s]     33%|###3      | 5479/16384 [00:01<00:02, 3983.58it/s]     36%|###5      | 5880/16384 [00:01<00:02, 3989.35it/s]     38%|###8      | 6279/16384 [00:01<00:02, 3972.31it/s]     41%|####      | 6677/16384 [00:01<00:02, 3948.53it/s]     43%|####3     | 7074/16384 [00:01<00:02, 3954.24it/s]     46%|####5     | 7470/16384 [00:01<00:02, 3955.48it/s]     48%|####8     | 7866/16384 [00:02<00:02, 3954.70it/s]     50%|#####     | 8266/16384 [00:02<00:02, 3965.75it/s]     53%|#####2    | 8663/16384 [00:02<00:01, 3945.44it/s]     55%|#####5    | 9058/16384 [00:02<00:01, 3801.99it/s]     58%|#####7    | 9440/16384 [00:02<00:02, 3393.49it/s]     60%|#####9    | 9788/16384 [00:02<00:02, 3287.33it/s]     62%|######1   | 10156/16384 [00:02<00:01, 3393.46it/s]     64%|######4   | 10541/16384 [00:02<00:01, 3518.94it/s]     67%|######6   | 10939/16384 [00:02<00:01, 3648.11it/s]     69%|######9   | 11330/16384 [00:02<00:01, 3721.77it/s]     71%|#######1  | 11706/16384 [00:03<00:01, 3704.18it/s]     74%|#######3  | 12079/16384 [00:03<00:01, 3508.87it/s]     76%|#######5  | 12434/16384 [00:03<00:01, 3248.42it/s]     78%|#######7  | 12765/16384 [00:03<00:01, 3159.45it/s]     80%|########  | 13162/16384 [00:03<00:00, 3379.92it/s]     83%|########2 | 13546/16384 [00:03<00:00, 3506.56it/s]     85%|########5 | 13929/16384 [00:03<00:00, 3597.61it/s]     87%|########7 | 14324/16384 [00:03<00:00, 3697.39it/s]     90%|########9 | 14720/16384 [00:03<00:00, 3771.41it/s]     92%|#########2| 15117/16384 [00:04<00:00, 3829.91it/s]     95%|#########4| 15515/16384 [00:04<00:00, 3874.20it/s]     97%|#########7| 15916/16384 [00:04<00:00, 3914.08it/s]    100%|#########9| 16315/16384 [00:04<00:00, 3936.40it/s]    100%|##########| 16384/16384 [00:04<00:00, 3756.76it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|2         | 397/16384 [00:00<00:04, 3961.77it/s]      5%|4         | 794/16384 [00:00<00:03, 3930.64it/s]      7%|7         | 1188/16384 [00:00<00:04, 3795.64it/s]     10%|9         | 1580/16384 [00:00<00:03, 3842.27it/s]     12%|#2        | 1968/16384 [00:00<00:03, 3854.69it/s]     14%|#4        | 2354/16384 [00:00<00:03, 3763.08it/s]     17%|#6        | 2739/16384 [00:00<00:03, 3788.45it/s]     19%|#9        | 3131/16384 [00:00<00:03, 3827.61it/s]     22%|##1       | 3533/16384 [00:00<00:03, 3886.22it/s]     24%|##3       | 3930/16384 [00:01<00:03, 3909.04it/s]     26%|##6       | 4322/16384 [00:01<00:03, 3904.77it/s]     29%|##8       | 4716/16384 [00:01<00:02, 3913.58it/s]     31%|###1      | 5108/16384 [00:01<00:02, 3834.20it/s]     34%|###3      | 5509/16384 [00:01<00:02, 3884.94it/s]     36%|###6      | 5912/16384 [00:01<00:02, 3926.21it/s]     39%|###8      | 6313/16384 [00:01<00:02, 3948.73it/s]     41%|####      | 6715/16384 [00:01<00:02, 3968.64it/s]     43%|####3     | 7117/16384 [00:01<00:02, 3983.74it/s]     46%|####5     | 7519/16384 [00:01<00:02, 3994.27it/s]     48%|####8     | 7922/16384 [00:02<00:02, 4002.44it/s]     51%|#####     | 8325/16384 [00:02<00:02, 4008.43it/s]     53%|#####3    | 8728/16384 [00:02<00:01, 4013.52it/s]     56%|#####5    | 9130/16384 [00:02<00:01, 4015.15it/s]     58%|#####8    | 9533/16384 [00:02<00:01, 4017.23it/s]     61%|######    | 9937/16384 [00:02<00:01, 4022.08it/s]     63%|######3   | 10341/16384 [00:02<00:01, 4025.10it/s]     66%|######5   | 10744/16384 [00:02<00:01, 3988.51it/s]     68%|######8   | 11143/16384 [00:02<00:01, 3963.08it/s]     70%|#######   | 11543/16384 [00:02<00:01, 3971.71it/s]     73%|#######2  | 11942/16384 [00:03<00:01, 3977.11it/s]     75%|#######5  | 12343/16384 [00:03<00:01, 3984.40it/s]     78%|#######7  | 12744/16384 [00:03<00:00, 3990.86it/s]     80%|########  | 13144/16384 [00:03<00:00, 3843.67it/s]     83%|########2 | 13530/16384 [00:03<00:00, 3799.15it/s]     85%|########4 | 13911/16384 [00:03<00:00, 3757.64it/s]     87%|########7 | 14293/16384 [00:03<00:00, 3775.59it/s]     90%|########9 | 14692/16384 [00:03<00:00, 3837.49it/s]     92%|#########2| 15088/16384 [00:03<00:00, 3871.44it/s]     95%|#########4| 15487/16384 [00:03<00:00, 3905.23it/s]     97%|#########6| 15878/16384 [00:04<00:00, 3858.26it/s]     99%|#########9| 16265/16384 [00:04<00:00, 3858.93it/s]    100%|##########| 16384/16384 [00:04<00:00, 3908.91it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|2         | 405/16384 [00:00<00:03, 4048.55it/s]      5%|4         | 810/16384 [00:00<00:03, 4042.39it/s]      7%|7         | 1215/16384 [00:00<00:04, 3725.80it/s]     10%|9         | 1615/16384 [00:00<00:03, 3828.19it/s]     12%|#2        | 2012/16384 [00:00<00:03, 3877.33it/s]     15%|#4        | 2409/16384 [00:00<00:03, 3906.00it/s]     17%|#7        | 2808/16384 [00:00<00:03, 3931.75it/s]     20%|#9        | 3210/16384 [00:00<00:03, 3956.45it/s]     22%|##2       | 3610/16384 [00:00<00:03, 3967.33it/s]     24%|##4       | 4011/16384 [00:01<00:03, 3979.40it/s]     27%|##6       | 4412/16384 [00:01<00:03, 3986.78it/s]     29%|##9       | 4811/16384 [00:01<00:02, 3985.18it/s]     32%|###1      | 5213/16384 [00:01<00:02, 3993.06it/s]     34%|###4      | 5613/16384 [00:01<00:02, 3981.85it/s]     37%|###6      | 6015/16384 [00:01<00:02, 3991.72it/s]     39%|###9      | 6416/16384 [00:01<00:02, 3995.42it/s]     42%|####1     | 6817/16384 [00:01<00:02, 3997.36it/s]     44%|####4     | 7218/16384 [00:01<00:02, 4000.58it/s]     47%|####6     | 7619/16384 [00:01<00:02, 4003.09it/s]     49%|####8     | 8020/16384 [00:02<00:02, 4002.19it/s]     51%|#####1    | 8421/16384 [00:02<00:01, 4004.47it/s]     54%|#####3    | 8822/16384 [00:02<00:01, 4005.92it/s]     56%|#####6    | 9223/16384 [00:02<00:01, 4002.47it/s]     59%|#####8    | 9624/16384 [00:02<00:01, 3948.13it/s]     61%|######1   | 10019/16384 [00:02<00:01, 3940.01it/s]     64%|######3   | 10419/16384 [00:02<00:01, 3956.37it/s]     66%|######6   | 10818/16384 [00:02<00:01, 3965.86it/s]     68%|######8   | 11217/16384 [00:02<00:01, 3972.73it/s]     71%|#######   | 11619/16384 [00:02<00:01, 3984.20it/s]     73%|#######3  | 12020/16384 [00:03<00:01, 3989.79it/s]     76%|#######5  | 12421/16384 [00:03<00:00, 3995.70it/s]     78%|#######8  | 12823/16384 [00:03<00:00, 4000.32it/s]     81%|########  | 13224/16384 [00:03<00:00, 4001.77it/s]     83%|########3 | 13626/16384 [00:03<00:00, 4006.85it/s]     86%|########5 | 14028/16384 [00:03<00:00, 4009.34it/s]     88%|########8 | 14430/16384 [00:03<00:00, 4012.21it/s]     91%|######### | 14832/16384 [00:03<00:00, 4012.65it/s]     93%|#########2| 15234/16384 [00:03<00:00, 4012.67it/s]     95%|#########5| 15636/16384 [00:03<00:00, 4010.88it/s]     98%|#########7| 16038/16384 [00:04<00:00, 4013.15it/s]    100%|##########| 16384/16384 [00:04<00:00, 3977.38it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|2         | 401/16384 [00:00<00:03, 4008.91it/s]      5%|4         | 802/16384 [00:00<00:03, 4007.08it/s]      7%|7         | 1203/16384 [00:00<00:03, 4004.72it/s]     10%|9         | 1604/16384 [00:00<00:03, 3998.71it/s]     12%|#2        | 2004/16384 [00:00<00:03, 3965.23it/s]     15%|#4        | 2402/16384 [00:00<00:03, 3970.06it/s]     17%|#7        | 2800/16384 [00:00<00:03, 3963.47it/s]     20%|#9        | 3198/16384 [00:00<00:03, 3967.16it/s]     22%|##1       | 3598/16384 [00:00<00:03, 3975.78it/s]     24%|##4       | 3996/16384 [00:01<00:03, 3961.67it/s]     27%|##6       | 4393/16384 [00:01<00:03, 3940.38it/s]     29%|##9       | 4788/16384 [00:01<00:02, 3923.73it/s]     32%|###1      | 5188/16384 [00:01<00:02, 3946.19it/s]     34%|###4      | 5587/16384 [00:01<00:02, 3958.42it/s]     37%|###6      | 5987/16384 [00:01<00:02, 3970.19it/s]     39%|###8      | 6388/16384 [00:01<00:02, 3980.50it/s]     41%|####1     | 6788/16384 [00:01<00:02, 3984.56it/s]     44%|####3     | 7188/16384 [00:01<00:02, 3989.07it/s]     46%|####6     | 7587/16384 [00:01<00:02, 3964.85it/s]     49%|####8     | 7984/16384 [00:02<00:02, 3961.08it/s]     51%|#####1    | 8381/16384 [00:02<00:02, 3866.26it/s]     54%|#####3    | 8769/16384 [00:02<00:02, 3329.69it/s]     56%|#####5    | 9159/16384 [00:02<00:02, 3478.86it/s]     58%|#####8    | 9556/16384 [00:02<00:01, 3612.58it/s]     61%|######    | 9927/16384 [00:02<00:01, 3346.85it/s]     63%|######3   | 10323/16384 [00:02<00:01, 3512.37it/s]     65%|######5   | 10718/16384 [00:02<00:01, 3632.30it/s]     68%|######7   | 11108/16384 [00:02<00:01, 3708.03it/s]     70%|#######   | 11505/16384 [00:03<00:01, 3783.23it/s]     73%|#######2  | 11903/16384 [00:03<00:01, 3840.09it/s]     75%|#######5  | 12301/16384 [00:03<00:01, 3879.70it/s]     78%|#######7  | 12700/16384 [00:03<00:00, 3910.36it/s]     80%|#######9  | 13096/16384 [00:03<00:00, 3924.00it/s]     82%|########2 | 13490/16384 [00:03<00:00, 3358.03it/s]     85%|########4 | 13885/16384 [00:03<00:00, 3514.12it/s]     87%|########7 | 14282/16384 [00:03<00:00, 3637.87it/s]     90%|########9 | 14680/16384 [00:03<00:00, 3734.20it/s]     92%|#########2| 15076/16384 [00:03<00:00, 3797.19it/s]     94%|#########4| 15475/16384 [00:04<00:00, 3853.10it/s]     97%|#########6| 15873/16384 [00:04<00:00, 3889.98it/s]     99%|#########9| 16271/16384 [00:04<00:00, 3915.41it/s]    100%|##########| 16384/16384 [00:04<00:00, 3815.20it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|2         | 398/16384 [00:00<00:04, 3970.91it/s]      5%|4         | 796/16384 [00:00<00:03, 3968.78it/s]      7%|7         | 1193/16384 [00:00<00:03, 3931.68it/s]     10%|9         | 1587/16384 [00:00<00:03, 3920.21it/s]     12%|#2        | 1980/16384 [00:00<00:03, 3922.23it/s]     14%|#4        | 2375/16384 [00:00<00:03, 3929.78it/s]     17%|#6        | 2770/16384 [00:00<00:03, 3935.77it/s]     19%|#9        | 3165/16384 [00:00<00:03, 3939.85it/s]     22%|##1       | 3559/16384 [00:00<00:03, 3863.99it/s]     24%|##4       | 3951/16384 [00:01<00:03, 3880.35it/s]     27%|##6       | 4345/16384 [00:01<00:03, 3898.11it/s]     29%|##8       | 4739/16384 [00:01<00:02, 3910.37it/s]     31%|###1      | 5134/16384 [00:01<00:02, 3919.89it/s]     34%|###3      | 5529/16384 [00:01<00:02, 3927.05it/s]     36%|###6      | 5922/16384 [00:01<00:02, 3875.50it/s]     39%|###8      | 6310/16384 [00:01<00:02, 3867.90it/s]     41%|####      | 6704/16384 [00:01<00:02, 3886.59it/s]     43%|####3     | 7102/16384 [00:01<00:02, 3913.11it/s]     46%|####5     | 7502/16384 [00:01<00:02, 3938.53it/s]     48%|####8     | 7896/16384 [00:02<00:02, 3922.77it/s]     51%|#####     | 8295/16384 [00:02<00:02, 3941.09it/s]     53%|#####3    | 8694/16384 [00:02<00:01, 3953.69it/s]     56%|#####5    | 9095/16384 [00:02<00:01, 3968.10it/s]     58%|#####7    | 9492/16384 [00:02<00:01, 3893.90it/s]     60%|######    | 9887/16384 [00:02<00:01, 3910.00it/s]     63%|######2   | 10287/16384 [00:02<00:01, 3934.40it/s]     65%|######5   | 10687/16384 [00:02<00:01, 3952.68it/s]     68%|######7   | 11087/16384 [00:02<00:01, 3965.35it/s]     70%|#######   | 11488/16384 [00:02<00:01, 3976.72it/s]     73%|#######2  | 11886/16384 [00:03<00:01, 3965.90it/s]     75%|#######4  | 12287/16384 [00:03<00:01, 3978.40it/s]     77%|#######7  | 12688/16384 [00:03<00:00, 3985.06it/s]     80%|#######9  | 13090/16384 [00:03<00:00, 3993.56it/s]     82%|########2 | 13490/16384 [00:03<00:00, 3991.60it/s]     85%|########4 | 13890/16384 [00:03<00:00, 3926.84it/s]     87%|########7 | 14288/16384 [00:03<00:00, 3939.90it/s]     90%|########9 | 14686/16384 [00:03<00:00, 3950.74it/s]     92%|#########2| 15085/16384 [00:03<00:00, 3960.20it/s]     94%|#########4| 15482/16384 [00:03<00:00, 3884.64it/s]     97%|#########6| 15879/16384 [00:04<00:00, 3909.59it/s]     99%|#########9| 16279/16384 [00:04<00:00, 3935.51it/s]    100%|##########| 16384/16384 [00:04<00:00, 3932.01it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  33.076 seconds)


.. _sphx_glr_download_tutorials_b_general_plot_e_switched_capacitor_digital_control.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_e_switched_capacitor_digital_control.py <plot_e_switched_capacitor_digital_control.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_e_switched_capacitor_digital_control.ipynb <plot_e_switched_capacitor_digital_control.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
