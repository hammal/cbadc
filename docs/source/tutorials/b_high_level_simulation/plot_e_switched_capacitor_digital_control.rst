
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/b_high_level_simulation/plot_e_switched_capacitor_digital_control.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_b_high_level_simulation_plot_e_switched_capacitor_digital_control.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_b_high_level_simulation_plot_e_switched_capacitor_digital_control.py:


Switched-Capacitor Digital Control
==================================

In this tutorial we show how to use switched-capacitor digital control
in combination with a continuous-time system.

.. GENERATED FROM PYTHON SOURCE LINES 8-13

.. code-block:: default

    import cbadc
    import scipy
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 14-48

Integration Node
----------------

Initially we consider a integration node as shown in the figure below.

.. image:: /images/RC-amp.svg
   :width: 500
   :align: center
   :alt: The RC integrator with switched-capacitor digital control.

Which is goverened by the differential equations

:math:`\dot{v}_{x_{\ell}}(t) = \frac{1}{C_{x_{\ell}}} \left( \frac{v_{\Gamma_{\ell}}(t) - v_{s_\ell}(t)}{R_{s}} - \frac{1}{R_{\beta_\ell}}  v_{x_{\ell - 1}}(t) \right)`

:math:`\dot{v}_{\Gamma_{\ell}}(t) = \frac{1}{2R_{s} C_{\Gamma_{\ell}}} \left( v_{s_\ell}(t) - v_{\Gamma_{\ell}}(t) \right)`

during phase :math:`\phi_1` and

:math:`\dot{v}_{x_{\ell}}(t)  =  - \frac{1}{R_{\beta_\ell} C_{x_{\ell}}} v_{x_{\ell - 1}}(t)`

:math:`\dot{v}_{\Gamma_{\ell}}(t) = - \frac{1}{2 R_{s} C_{\Gamma_{\ell}}}  v_{\Gamma_{\ell}}(t)`

during phase :math:`\bar{\phi}_1` where a full control phase :math:`T = T_{\phi_1} + T_{\bar{\phi}_1}`.

To simulate this control-bounded converter we need to specify the whole system which for this
tutorial will be a chain-of-integrators system as shown below.

.. image:: /images/chainOfIntegratorsGeneral.svg
   :width: 1500
   :align: center
   :alt: The chain-of-integrators ADC.

where the digital controls are implemented as above.
Thus the system equations can be written as

.. GENERATED FROM PYTHON SOURCE LINES 48-65

.. code-block:: default


    N = 4
    M = N

    C_x = 1e-9
    C_Gamma = C_x / 2
    R_s = 1e1
    R_beta = 1e3

    beta = 1 / (R_beta * C_x)
    T = 1 / (2 * beta)

    A = beta * np.eye(N, k=-1)
    B = np.zeros(N)
    B[0] = beta
    CT = np.eye(N)








.. GENERATED FROM PYTHON SOURCE LINES 66-84

Simplifying the Differential Equation
-------------------------------------

Due to the virtual ground of the op-amp integrator we can treat the
second differential equation (the one involving :math:`v_{\Gamma_\ell}(t)`)
seperately. Specifically, if we assume the
capacitor :math:`C_{\Gamma}` empties completely during :math:`\bar{\phi}_1`,
and that :math:`v_{s_\ell} = \{\pm 1\}` for all :math:`t`, the digital
control's effect on the analog system can be written as

:math:`v_{\Gamma_\ell}(t) - v_{s_\ell}(t) = v_{s_\ell}(t) \cdot e^{-t/\tau}`

where :math:`\tau=R_s C_{\Gamma_\ell}`.

This can be modeled by instantiating the digital control
:class:`cbadc.digital_control.DigitalControl`
using the impulse response :func:`cbadc.digital_control.RCImpulseResponse`
as

.. GENERATED FROM PYTHON SOURCE LINES 84-98

.. code-block:: default


    impulse_response = cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma)
    digital_control_sc = cbadc.digital_control.DigitalControl(
        cbadc.analog_signal.Clock(T), M, impulse_response=impulse_response
    )

    Gamma = 1 / (R_s * C_x) * np.eye(M)
    Gamma_tildeT = -np.eye(M)

    analog_system_sc = cbadc.analog_system.AnalogSystem(A, B, CT, Gamma, Gamma_tildeT)

    print(digital_control_sc)
    print(analog_system_sc)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ================================================================================

    The Digital Control is parameterized as:

    --------------------------------------------------------------------------------

    clock:
    Analog signal returns constant 0, i.e., maps t |-> 0.

    M:
    4
    ================================================================================
        
    The analog system is parameterized as:
    A =
    [[ 0.00e+00  0.00e+00  0.00e+00  0.00e+00]
     [ 1.00e+06  0.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  1.00e+06  0.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  1.00e+06  0.00e+00]],
    B =
    [[ 1.00e+06]
     [ 0.00e+00]
     [ 0.00e+00]
     [ 0.00e+00]],
    CT = 
    [[ 1.00e+00  0.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  1.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  1.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  0.00e+00  1.00e+00]],
    Gamma =
    [[ 1.00e+08  0.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  1.00e+08  0.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  1.00e+08  0.00e+00]
     [ 0.00e+00  0.00e+00  0.00e+00  1.00e+08]],
    Gamma_tildeT =
    [[-1.00e+00 -0.00e+00 -0.00e+00 -0.00e+00]
     [-0.00e+00 -1.00e+00 -0.00e+00 -0.00e+00]
     [-0.00e+00 -0.00e+00 -1.00e+00 -0.00e+00]
     [-0.00e+00 -0.00e+00 -0.00e+00 -1.00e+00]], and D=[[ 0.00e+00]
     [ 0.00e+00]
     [ 0.00e+00]
     [ 0.00e+00]]




.. GENERATED FROM PYTHON SOURCE LINES 99-102

Visualizing the State Trajectories
----------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 102-155

.. code-block:: default

    OSR = 32
    amplitude = 1.0
    analog_signal = cbadc.analog_signal.Sinusoidal(amplitude, 1 / T / (OSR << 4))
    Ts = T / 100.0
    size = 1 << 12

    simulator_sc = cbadc.simulator.extended_simulation_result(
        cbadc.simulator.get_simulator(
            analog_system_sc,
            digital_control_sc,
            [analog_signal],
            cbadc.analog_signal.Clock(Ts),
            simulator_type=cbadc.simulator.SimulatorType.analytical,
        )
    )


    analog_system_ref = cbadc.analog_system.AnalogSystem(
        A, B, CT, np.eye(N) * beta, Gamma_tildeT
    )
    digital_control_ref = cbadc.digital_control.DigitalControl(
        cbadc.analog_signal.Clock(T), M
    )
    simulator_ref = cbadc.simulator.extended_simulation_result(
        cbadc.simulator.get_simulator(
            analog_system_ref,
            digital_control_ref,
            [analog_signal],
            cbadc.analog_signal.Clock(Ts),
            simulator_type=cbadc.simulator.SimulatorType.analytical,
        )
    )

    states = np.zeros((size, N))
    states_ref = np.zeros_like(states)
    t = Ts * np.arange(size)

    # Simulations
    for time_step in cbadc.utilities.show_status(range(size)):
        states[time_step, :] = next(simulator_sc)["analog_state"]
        states_ref[time_step, :] = next(simulator_ref)["analog_state"]

    # Plot state trajectories
    for index in range(N):
        plt.figure()
        plt.title("Analog state trajectories for " + f"$x_{index + 1}(t)$")
        plt.plot(t / T, states[:, index], label="SC")
        plt.plot(t / T, states_ref[:, index], label="ref")
        plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
        plt.xlabel("$t/T$")
        plt.legend()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_001.png
         :alt: Analog state trajectories for $x_1(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_002.png
         :alt: Analog state trajectories for $x_2(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_003.png
         :alt: Analog state trajectories for $x_3(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_004.png
         :alt: Analog state trajectories for $x_4(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/4096 [00:00<?, ?it/s]      7%|7         | 291/4096 [00:00<00:01, 2904.10it/s]     14%|#4        | 582/4096 [00:00<00:01, 2866.25it/s]     21%|##1       | 870/4096 [00:00<00:01, 2868.45it/s]     28%|##8       | 1165/4096 [00:00<00:01, 2899.88it/s]     36%|###5      | 1461/4096 [00:00<00:00, 2919.71it/s]     43%|####2     | 1754/4096 [00:00<00:00, 2920.93it/s]     50%|#####     | 2049/4096 [00:00<00:00, 2930.19it/s]     57%|#####7    | 2346/4096 [00:00<00:00, 2940.51it/s]     64%|######4   | 2641/4096 [00:00<00:00, 2932.99it/s]     72%|#######1  | 2937/4096 [00:01<00:00, 2939.40it/s]     79%|#######8  | 3233/4096 [00:01<00:00, 2943.68it/s]     86%|########6 | 3532/4096 [00:01<00:00, 2954.86it/s]     94%|#########3| 3833/4096 [00:01<00:00, 2971.01it/s]    100%|##########| 4096/4096 [00:01<00:00, 2937.53it/s]




.. GENERATED FROM PYTHON SOURCE LINES 156-159

Filter Coefficients
----------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 159-273

.. code-block:: default

    K1 = 1 << 8
    K2 = K1
    eta2 = (
        np.linalg.norm(
            analog_system_sc.transfer_function_matrix(np.array([2 * np.pi / T / OSR]))
        ).flatten()
        ** 2
    )

    # prepending an anti-aliasing filter
    # omega_3dB = 2 * np.pi / T / 16
    # wp = omega_3dB / 2.0
    # ws = omega_3dB
    # gpass = 1.0
    # gstop = 60
    # filter = cbadc.analog_system.IIRDesign(wp, ws, gpass, gstop, ftype="ellip")

    # Post-filtering FIR filter
    fir_filter_numtaps = K1 + K2
    f_cutoff = 1.0 / OSR * 2
    fir_filter = scipy.signal.firwin(fir_filter_numtaps, f_cutoff)


    digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
        # cbadc.analog_system.chain([filter, analog_system_sc]),
        analog_system_sc,
        digital_control_sc,
        eta2,
        K1,
        K2,
    )

    # Apply FIR filter
    digital_estimator_sc.convolve(fir_filter)

    digital_estimator_ref = cbadc.digital_estimator.FIRFilter(
        # cbadc.analog_system.chain([filter, analog_system_ref]),
        analog_system_ref,
        digital_control_ref,
        eta2,
        K1,
        K2,
    )

    # Apply FIR filter
    digital_estimator_ref.convolve(fir_filter)

    plt.figure()
    plt.semilogy(
        np.arange(-K1, K2),
        np.linalg.norm(np.array(digital_estimator_sc.h[0, :, :]), axis=1)[:],
        label="Switched Capacitor Filter",
    )
    plt.semilogy(
        np.arange(-K1, K2),
        np.linalg.norm(np.array(digital_estimator_ref.h[0, :, :]), axis=1)[:],
        label="Ref Filter",
    )

    plt.legend()
    plt.xlabel("filter tap k")
    plt.ylabel("$|| \mathbf{h} [k]||_2$")
    plt.xlim((-K1, K2))
    # plt.ylim((1e-16, 1))
    plt.grid(which="both")

    # Logspace frequencies
    frequencies = np.logspace(-3, 0, 100)
    omega = 4 * np.pi * beta * frequencies

    plt.figure()
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(np.abs(digital_estimator_sc.signal_transfer_function(omega))).flatten(),
        label="$STF(\omega)$ SC",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(np.abs(digital_estimator_ref.signal_transfer_function(omega))).flatten(),
        label="$STF(\omega)$ ref",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(
            np.linalg.norm(
                digital_estimator_sc.noise_transfer_function(omega)[:, 0, :], axis=0
            )
        ),
        "--",
        label="$ || NTF(\omega) ||_2 $ SC",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(
            np.linalg.norm(
                digital_estimator_ref.noise_transfer_function(omega)[:, 0, :], axis=0
            )
        ),
        "--",
        label="$ || NTF(\omega) ||_2 $ ref",
    )
    # Add labels and legends to figure
    plt.legend()
    plt.grid(which="both")
    plt.title("Signal and noise transfer functions")
    plt.xlabel("$f$ [Hz]")
    plt.ylabel("dB")
    # plt.xlim((1e2, 5e3))
    plt.gcf().tight_layout()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_005.png
         :alt: plot e switched capacitor digital control
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_006.png
         :alt: Signal and noise transfer functions
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 274-278

Mismatch Sensitivity to Switch Resistance
-----------------------------------------



.. GENERATED FROM PYTHON SOURCE LINES 278-351

.. code-block:: default


    mismatch_in_percent = np.arange(3) * 10

    size = 1 << 14
    t = np.arange(size) * T

    estimates = []

    for mismatch in mismatch_in_percent:
        digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_sc]),
            analog_system_sc,
            cbadc.digital_control.DigitalControl(
                cbadc.analog_signal.Clock(T),
                M,
                impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
            ),
            eta2,
            K1,
            K2,
        )

        # Apply FIR filter
        digital_estimator_sc.convolve(fir_filter)

        digital_estimator_sc(
            cbadc.simulator.get_simulator(
                cbadc.analog_system.AnalogSystem(
                    A,
                    B,
                    CT,
                    1 / ((1 + mismatch / 100) * R_s * C_x) * np.eye(M),
                    Gamma_tildeT,
                ),
                cbadc.digital_control.DigitalControl(
                    cbadc.analog_signal.Clock(T),
                    M,
                    impulse_response=cbadc.analog_signal.RCImpulseResponse(
                        (1 + mismatch / 100) * R_s * C_Gamma
                    ),
                ),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )
        u_hat = np.zeros(size)
        for index in cbadc.utilities.show_status(range(size)):
            u_hat[index] = next(digital_estimator_sc)
        estimates.append(u_hat)

    # Plot estimates in time domain
    plt.figure()
    plt.title("Estimates")
    for index, mismatch in enumerate(mismatch_in_percent):
        plt.plot(t / T, estimates[index], label=f"Mismatch R_s {mismatch}%")
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 100))
    plt.legend()

    # Plot estimates PSD
    plt.figure()
    plt.title("Estimates PSD")
    for index, mismatch in enumerate(mismatch_in_percent):
        f, psd = cbadc.utilities.compute_power_spectral_density(
            estimates[index][K1 + K2 :], fs=1.0 / T
        )
        plt.semilogx(f, 10 * np.log10(psd), label=f"Mismatch R_s {mismatch}%")
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("f [Hz]")
    plt.ylabel("V^2/Hz [dB]")
    plt.legend()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_007.png
         :alt: Estimates
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_008.png
         :alt: Estimates PSD
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_008.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/16384 [00:00<?, ?it/s]      3%|3         | 511/16384 [00:00<00:03, 5102.24it/s]      6%|6         | 1028/16384 [00:00<00:02, 5139.87it/s]      9%|9         | 1549/16384 [00:00<00:02, 5171.54it/s]     13%|#2        | 2069/16384 [00:00<00:02, 5182.22it/s]     16%|#5        | 2596/16384 [00:00<00:02, 5211.42it/s]     19%|#9        | 3118/16384 [00:00<00:02, 5210.34it/s]     22%|##2       | 3640/16384 [00:00<00:02, 5184.57it/s]     25%|##5       | 4161/16384 [00:00<00:02, 5191.89it/s]     29%|##8       | 4689/16384 [00:00<00:02, 5218.75it/s]     32%|###1      | 5212/16384 [00:01<00:02, 5220.09it/s]     35%|###5      | 5735/16384 [00:01<00:02, 5199.61it/s]     38%|###8      | 6255/16384 [00:01<00:02, 5033.08it/s]     41%|####1     | 6760/16384 [00:01<00:01, 5036.01it/s]     44%|####4     | 7283/16384 [00:01<00:01, 5093.29it/s]     48%|####7     | 7798/16384 [00:01<00:01, 5110.10it/s]     51%|#####     | 8318/16384 [00:01<00:01, 5136.17it/s]     54%|#####4    | 8851/16384 [00:01<00:01, 5192.34it/s]     57%|#####7    | 9371/16384 [00:01<00:01, 5178.46it/s]     60%|######    | 9894/16384 [00:01<00:01, 5193.25it/s]     64%|######3   | 10423/16384 [00:02<00:01, 5220.18it/s]     67%|######6   | 10951/16384 [00:02<00:01, 5236.03it/s]     70%|#######   | 11475/16384 [00:02<00:00, 5235.75it/s]     73%|#######3  | 12006/16384 [00:02<00:00, 5256.55it/s]     76%|#######6  | 12532/16384 [00:02<00:00, 5237.31it/s]     80%|#######9  | 13056/16384 [00:02<00:00, 5231.15it/s]     83%|########2 | 13580/16384 [00:02<00:00, 5213.15it/s]     86%|########6 | 14106/16384 [00:02<00:00, 5226.68it/s]     89%|########9 | 14630/16384 [00:02<00:00, 5228.18it/s]     93%|#########2| 15156/16384 [00:02<00:00, 5235.55it/s]     96%|#########5| 15684/16384 [00:03<00:00, 5248.13it/s]     99%|#########8| 16214/16384 [00:03<00:00, 5263.18it/s]    100%|##########| 16384/16384 [00:03<00:00, 5197.24it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      3%|3         | 532/16384 [00:00<00:02, 5316.15it/s]      6%|6         | 1064/16384 [00:00<00:02, 5285.84it/s]     10%|9         | 1593/16384 [00:00<00:02, 5261.66it/s]     13%|#2        | 2121/16384 [00:00<00:02, 5266.34it/s]     16%|#6        | 2666/16384 [00:00<00:02, 5330.85it/s]     20%|#9        | 3209/16384 [00:00<00:02, 5364.02it/s]     23%|##2       | 3752/16384 [00:00<00:02, 5383.90it/s]     26%|##6       | 4291/16384 [00:00<00:02, 5346.43it/s]     29%|##9       | 4829/16384 [00:00<00:02, 5355.34it/s]     33%|###2      | 5368/16384 [00:01<00:02, 5364.02it/s]     36%|###6      | 5910/16384 [00:01<00:01, 5380.85it/s]     39%|###9      | 6455/16384 [00:01<00:01, 5399.79it/s]     43%|####2     | 7004/16384 [00:01<00:01, 5426.13it/s]     46%|####6     | 7550/16384 [00:01<00:01, 5433.54it/s]     49%|####9     | 8098/16384 [00:01<00:01, 5445.02it/s]     53%|#####2    | 8643/16384 [00:01<00:01, 5444.21it/s]     56%|#####6    | 9188/16384 [00:01<00:01, 5440.15it/s]     59%|#####9    | 9733/16384 [00:01<00:01, 5442.68it/s]     63%|######2   | 10278/16384 [00:01<00:01, 5439.74it/s]     66%|######6   | 10823/16384 [00:02<00:01, 5439.91it/s]     69%|######9   | 11372/16384 [00:02<00:00, 5454.32it/s]     73%|#######2  | 11918/16384 [00:02<00:00, 5442.53it/s]     76%|#######6  | 12463/16384 [00:02<00:00, 5411.74it/s]     79%|#######9  | 13006/16384 [00:02<00:00, 5416.99it/s]     83%|########2 | 13553/16384 [00:02<00:00, 5431.42it/s]     86%|########6 | 14103/16384 [00:02<00:00, 5449.73it/s]     89%|########9 | 14653/16384 [00:02<00:00, 5461.86it/s]     93%|#########2| 15202/16384 [00:02<00:00, 5468.57it/s]     96%|#########6| 15749/16384 [00:02<00:00, 5452.89it/s]     99%|#########9| 16295/16384 [00:03<00:00, 5450.49it/s]    100%|##########| 16384/16384 [00:03<00:00, 5411.01it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      3%|3         | 545/16384 [00:00<00:02, 5446.25it/s]      7%|6         | 1093/16384 [00:00<00:02, 5464.04it/s]     10%|#         | 1645/16384 [00:00<00:02, 5486.13it/s]     13%|#3        | 2195/16384 [00:00<00:02, 5490.46it/s]     17%|#6        | 2747/16384 [00:00<00:02, 5499.80it/s]     20%|##        | 3300/16384 [00:00<00:02, 5508.39it/s]     24%|##3       | 3852/16384 [00:00<00:02, 5511.77it/s]     27%|##6       | 4404/16384 [00:00<00:02, 5507.87it/s]     30%|###       | 4957/16384 [00:00<00:02, 5514.63it/s]     34%|###3      | 5510/16384 [00:01<00:01, 5518.98it/s]     37%|###7      | 6063/16384 [00:01<00:01, 5521.10it/s]     40%|####      | 6616/16384 [00:01<00:01, 5514.97it/s]     44%|####3     | 7168/16384 [00:01<00:01, 5493.99it/s]     47%|####7     | 7720/16384 [00:01<00:01, 5500.97it/s]     50%|#####     | 8271/16384 [00:01<00:01, 5481.82it/s]     54%|#####3    | 8820/16384 [00:01<00:01, 5471.24it/s]     57%|#####7    | 9373/16384 [00:01<00:01, 5486.34it/s]     61%|######    | 9923/16384 [00:01<00:01, 5490.05it/s]     64%|######3   | 10477/16384 [00:01<00:01, 5504.06it/s]     67%|######7   | 11031/16384 [00:02<00:00, 5513.27it/s]     71%|#######   | 11583/16384 [00:02<00:00, 5513.98it/s]     74%|#######4  | 12136/16384 [00:02<00:00, 5516.09it/s]     77%|#######7  | 12688/16384 [00:02<00:00, 5514.65it/s]     81%|########  | 13242/16384 [00:02<00:00, 5520.68it/s]     84%|########4 | 13795/16384 [00:02<00:00, 5520.13it/s]     88%|########7 | 14348/16384 [00:02<00:00, 5513.69it/s]     91%|######### | 14903/16384 [00:02<00:00, 5521.96it/s]     94%|#########4| 15456/16384 [00:02<00:00, 5523.26it/s]     98%|#########7| 16010/16384 [00:02<00:00, 5527.06it/s]    100%|##########| 16384/16384 [00:02<00:00, 5508.13it/s]

    <matplotlib.legend.Legend object at 0x289709630>



.. GENERATED FROM PYTHON SOURCE LINES 352-355

Clock Jitter Sensitivity
------------------------


.. GENERATED FROM PYTHON SOURCE LINES 355-483

.. code-block:: default

    jitter_std = np.power(10.0, np.arange(-6, 0)) * T
    # jitter_std = np.arange(3) * T * 0.3
    clock_jitter = [lambda: (np.random.random() - 0.5) * std for std in jitter_std]

    size = 1 << 14
    t = np.arange(size) * T

    estimates = []
    estimates_ref = []

    for jitter in clock_jitter:
        digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_sc]),
            analog_system_sc,
            cbadc.digital_control.DigitalControl(
                cbadc.analog_signal.Clock(T),
                M,
                impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
            ),
            eta2,
            K1,
            K2,
            solver_type=cbadc.digital_estimator.FilterComputationBackend.mpmath,
        )

        # Apply FIR filter
        # digital_estimator_sc.convolve(fir_filter)

        digital_estimator_sc(
            cbadc.simulator.get_simulator(
                analog_system_sc,
                cbadc.digital_control.DigitalControl(
                    cbadc.analog_signal.Clock(T),
                    M,
                    impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
                ),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )

        digital_estimator_ref = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_ref]),
            analog_system_ref,
            cbadc.digital_control.DigitalControl(cbadc.analog_signal.Clock(T), M),
            eta2,
            K1,
            K2,
            solver_type=cbadc.digital_estimator.FilterComputationBackend.mpmath,
        )

        # Apply FIR filter
        # digital_estimator_ref.convolve(fir_filter)

        digital_estimator_ref(
            cbadc.simulator.get_simulator(
                analog_system_ref,
                cbadc.digital_control.DigitalControl(cbadc.analog_signal.Clock(T), M),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )

        u_hat = np.zeros(size)
        u_hat_ref = np.zeros_like(u_hat)
        digital_estimator_sc.warm_up()
        digital_estimator_ref.warm_up()
        for index in cbadc.utilities.show_status(range(size)):
            u_hat[index] = next(digital_estimator_sc)
            u_hat_ref[index] = next(digital_estimator_ref)
        estimates.append(u_hat)
        estimates_ref.append(u_hat_ref)

    # Plot estimates in time domain
    plt.figure()
    plt.title("Estimates")
    for index, jitter in enumerate(clock_jitter):
        plt.plot(
            t / T,
            estimates[index],
            label=f"Std / T = {np.round(jitter_std[index] / T * 100, 3)}%",
        )
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 1000))
    plt.legend()

    # Plot estimates in time domain
    plt.figure()
    plt.title("Ref Estimates")
    for index, jitter in enumerate(clock_jitter):
        plt.plot(
            t / T,
            estimates_ref[index],
            label=f"Ref Std / T = {np.round(jitter_std[index] / T * 100, 3)}%",
        )
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 1000))
    plt.legend()


    # Plot estimates PSD
    for index, jitter in enumerate(clock_jitter):
        plt.figure()
        plt.title("Estimates PSD Clock Jitter")

        f, psd = cbadc.utilities.compute_power_spectral_density(
            estimates[index][K1 + K2 :], fs=1.0 / T
        )
        f_ref, psd_ref = cbadc.utilities.compute_power_spectral_density(
            estimates_ref[index][K1 + K2 :], fs=1.0 / T
        )
        plt.semilogx(
            f,
            10 * np.log10(psd),
            label=f"SC (Std/T) = +- {np.round(jitter_std[index] / T * 100, 3)}%",
        )
        plt.semilogx(
            f_ref,
            10 * np.log10(psd_ref),
            "--",
            label=f"Ref (Std/T) = +- {np.round(jitter_std[index] / T  * 100, 3)}%",
        )
        plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
        plt.xlabel("f [Hz]")
        plt.ylabel("V^2/Hz [dB]")
        plt.legend()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_009.png
         :alt: Estimates
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_010.png
         :alt: Ref Estimates
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_011.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_011.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_012.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_012.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_013.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_014.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_014.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_015.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_015.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_016.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_016.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 273/16384 [00:00<00:05, 2724.44it/s]      3%|3         | 547/16384 [00:00<00:05, 2728.79it/s]      5%|5         | 821/16384 [00:00<00:05, 2733.34it/s]      7%|6         | 1097/16384 [00:00<00:05, 2741.65it/s]      8%|8         | 1373/16384 [00:00<00:05, 2746.19it/s]     10%|#         | 1648/16384 [00:00<00:05, 2741.52it/s]     12%|#1        | 1925/16384 [00:00<00:05, 2748.08it/s]     13%|#3        | 2200/16384 [00:00<00:05, 2740.86it/s]     15%|#5        | 2475/16384 [00:00<00:05, 2736.27it/s]     17%|#6        | 2749/16384 [00:01<00:04, 2727.92it/s]     18%|#8        | 3025/16384 [00:01<00:04, 2734.98it/s]     20%|##        | 3299/16384 [00:01<00:04, 2732.91it/s]     22%|##1       | 3573/16384 [00:01<00:04, 2722.10it/s]     23%|##3       | 3848/16384 [00:01<00:04, 2727.57it/s]     25%|##5       | 4123/16384 [00:01<00:04, 2733.42it/s]     27%|##6       | 4397/16384 [00:01<00:04, 2727.47it/s]     29%|##8       | 4671/16384 [00:01<00:04, 2728.05it/s]     30%|###       | 4946/16384 [00:01<00:04, 2732.06it/s]     32%|###1      | 5221/16384 [00:01<00:04, 2736.24it/s]     34%|###3      | 5497/16384 [00:02<00:03, 2742.16it/s]     35%|###5      | 5772/16384 [00:02<00:03, 2741.01it/s]     37%|###6      | 6048/16384 [00:02<00:03, 2744.79it/s]     39%|###8      | 6323/16384 [00:02<00:03, 2735.32it/s]     40%|####      | 6597/16384 [00:02<00:03, 2733.50it/s]     42%|####1     | 6871/16384 [00:02<00:03, 2734.97it/s]     44%|####3     | 7147/16384 [00:02<00:03, 2739.71it/s]     45%|####5     | 7422/16384 [00:02<00:03, 2741.62it/s]     47%|####6     | 7698/16384 [00:02<00:03, 2744.44it/s]     49%|####8     | 7973/16384 [00:02<00:03, 2743.23it/s]     50%|#####     | 8248/16384 [00:03<00:02, 2743.61it/s]     52%|#####2    | 8523/16384 [00:03<00:02, 2737.58it/s]     54%|#####3    | 8798/16384 [00:03<00:02, 2738.92it/s]     55%|#####5    | 9072/16384 [00:03<00:02, 2737.10it/s]     57%|#####7    | 9346/16384 [00:03<00:02, 2735.95it/s]     59%|#####8    | 9620/16384 [00:03<00:02, 2733.75it/s]     60%|######    | 9896/16384 [00:03<00:02, 2739.66it/s]     62%|######2   | 10171/16384 [00:03<00:02, 2740.74it/s]     64%|######3   | 10446/16384 [00:03<00:02, 2743.26it/s]     65%|######5   | 10721/16384 [00:03<00:02, 2742.78it/s]     67%|######7   | 10996/16384 [00:04<00:01, 2743.23it/s]     69%|######8   | 11271/16384 [00:04<00:01, 2742.37it/s]     70%|#######   | 11546/16384 [00:04<00:01, 2729.14it/s]     72%|#######2  | 11820/16384 [00:04<00:01, 2731.72it/s]     74%|#######3  | 12095/16384 [00:04<00:01, 2734.33it/s]     75%|#######5  | 12369/16384 [00:04<00:01, 2734.65it/s]     77%|#######7  | 12643/16384 [00:04<00:01, 2733.49it/s]     79%|#######8  | 12918/16384 [00:04<00:01, 2736.85it/s]     81%|########  | 13192/16384 [00:04<00:01, 2734.29it/s]     82%|########2 | 13466/16384 [00:04<00:01, 2733.01it/s]     84%|########3 | 13742/16384 [00:05<00:00, 2738.59it/s]     86%|########5 | 14016/16384 [00:05<00:00, 2736.63it/s]     87%|########7 | 14290/16384 [00:05<00:00, 2733.37it/s]     89%|########8 | 14564/16384 [00:05<00:00, 2729.27it/s]     91%|######### | 14837/16384 [00:05<00:00, 2712.76it/s]     92%|#########2| 15109/16384 [00:05<00:00, 2710.19it/s]     94%|#########3| 15384/16384 [00:05<00:00, 2721.14it/s]     96%|#########5| 15657/16384 [00:05<00:00, 2707.11it/s]     97%|#########7| 15928/16384 [00:05<00:00, 2707.27it/s]     99%|#########8| 16202/16384 [00:05<00:00, 2716.35it/s]    100%|##########| 16384/16384 [00:05<00:00, 2733.43it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 270/16384 [00:00<00:05, 2697.30it/s]      3%|3         | 542/16384 [00:00<00:05, 2709.70it/s]      5%|4         | 817/16384 [00:00<00:05, 2725.94it/s]      7%|6         | 1091/16384 [00:00<00:05, 2727.66it/s]      8%|8         | 1366/16384 [00:00<00:05, 2735.48it/s]     10%|#         | 1641/16384 [00:00<00:05, 2739.22it/s]     12%|#1        | 1915/16384 [00:00<00:05, 2733.15it/s]     13%|#3        | 2189/16384 [00:00<00:05, 2718.14it/s]     15%|#5        | 2464/16384 [00:00<00:05, 2725.60it/s]     17%|#6        | 2743/16384 [00:01<00:04, 2743.35it/s]     18%|#8        | 3021/16384 [00:01<00:04, 2753.26it/s]     20%|##        | 3297/16384 [00:01<00:04, 2737.24it/s]     22%|##1       | 3571/16384 [00:01<00:04, 2720.00it/s]     23%|##3       | 3844/16384 [00:01<00:04, 2717.66it/s]     25%|##5       | 4117/16384 [00:01<00:04, 2719.29it/s]     27%|##6       | 4391/16384 [00:01<00:04, 2723.14it/s]     28%|##8       | 4664/16384 [00:01<00:04, 2719.38it/s]     30%|###       | 4936/16384 [00:01<00:04, 2712.67it/s]     32%|###1      | 5208/16384 [00:01<00:04, 2695.41it/s]     33%|###3      | 5479/16384 [00:02<00:04, 2698.78it/s]     35%|###5      | 5751/16384 [00:02<00:03, 2704.67it/s]     37%|###6      | 6022/16384 [00:02<00:03, 2691.78it/s]     38%|###8      | 6292/16384 [00:02<00:03, 2683.99it/s]     40%|####      | 6561/16384 [00:02<00:03, 2678.56it/s]     42%|####1     | 6829/16384 [00:02<00:03, 2672.86it/s]     43%|####3     | 7100/16384 [00:02<00:03, 2682.41it/s]     45%|####4     | 7369/16384 [00:02<00:03, 2680.26it/s]     47%|####6     | 7638/16384 [00:02<00:03, 2682.46it/s]     48%|####8     | 7907/16384 [00:02<00:03, 2673.50it/s]     50%|####9     | 8179/16384 [00:03<00:03, 2684.99it/s]     52%|#####1    | 8454/16384 [00:03<00:02, 2703.56it/s]     53%|#####3    | 8729/16384 [00:03<00:02, 2715.33it/s]     55%|#####4    | 9001/16384 [00:03<00:02, 2704.94it/s]     57%|#####6    | 9272/16384 [00:03<00:02, 2703.41it/s]     58%|#####8    | 9543/16384 [00:03<00:02, 2687.95it/s]     60%|#####9    | 9812/16384 [00:03<00:02, 2681.19it/s]     62%|######1   | 10083/16384 [00:03<00:02, 2686.87it/s]     63%|######3   | 10353/16384 [00:03<00:02, 2690.43it/s]     65%|######4   | 10624/16384 [00:03<00:02, 2695.07it/s]     66%|######6   | 10894/16384 [00:04<00:02, 2692.42it/s]     68%|######8   | 11165/16384 [00:04<00:01, 2695.30it/s]     70%|######9   | 11436/16384 [00:04<00:01, 2699.36it/s]     71%|#######1  | 11710/16384 [00:04<00:01, 2708.89it/s]     73%|#######3  | 11981/16384 [00:04<00:01, 2706.79it/s]     75%|#######4  | 12254/16384 [00:04<00:01, 2711.55it/s]     76%|#######6  | 12528/16384 [00:04<00:01, 2718.35it/s]     78%|#######8  | 12802/16384 [00:04<00:01, 2723.45it/s]     80%|#######9  | 13075/16384 [00:04<00:01, 2719.67it/s]     81%|########1 | 13350/16384 [00:04<00:01, 2728.35it/s]     83%|########3 | 13623/16384 [00:05<00:01, 2723.39it/s]     85%|########4 | 13896/16384 [00:05<00:00, 2652.00it/s]     86%|########6 | 14162/16384 [00:05<00:00, 2610.74it/s]     88%|########8 | 14424/16384 [00:05<00:00, 2545.24it/s]     90%|########9 | 14679/16384 [00:05<00:00, 2486.08it/s]     91%|#########1| 14929/16384 [00:05<00:00, 2410.97it/s]     93%|#########2| 15171/16384 [00:05<00:00, 2406.60it/s]     94%|#########4| 15413/16384 [00:05<00:00, 2393.31it/s]     96%|#########5| 15653/16384 [00:05<00:00, 2365.84it/s]     97%|#########7| 15911/16384 [00:05<00:00, 2427.71it/s]     99%|#########8| 16173/16384 [00:06<00:00, 2482.50it/s]    100%|##########| 16384/16384 [00:06<00:00, 2656.12it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 277/16384 [00:00<00:05, 2762.82it/s]      3%|3         | 554/16384 [00:00<00:05, 2754.07it/s]      5%|5         | 830/16384 [00:00<00:05, 2738.70it/s]      7%|6         | 1104/16384 [00:00<00:05, 2726.16it/s]      8%|8         | 1377/16384 [00:00<00:05, 2715.97it/s]     10%|#         | 1651/16384 [00:00<00:05, 2720.76it/s]     12%|#1        | 1927/16384 [00:00<00:05, 2732.90it/s]     13%|#3        | 2204/16384 [00:00<00:05, 2743.48it/s]     15%|#5        | 2480/16384 [00:00<00:05, 2746.50it/s]     17%|#6        | 2757/16384 [00:01<00:04, 2753.00it/s]     19%|#8        | 3033/16384 [00:01<00:04, 2738.13it/s]     20%|##        | 3307/16384 [00:01<00:04, 2733.52it/s]     22%|##1       | 3581/16384 [00:01<00:04, 2725.43it/s]     24%|##3       | 3854/16384 [00:01<00:04, 2715.16it/s]     25%|##5       | 4128/16384 [00:01<00:04, 2720.88it/s]     27%|##6       | 4401/16384 [00:01<00:04, 2706.80it/s]     29%|##8       | 4672/16384 [00:01<00:04, 2705.15it/s]     30%|###       | 4946/16384 [00:01<00:04, 2713.66it/s]     32%|###1      | 5221/16384 [00:01<00:04, 2722.90it/s]     34%|###3      | 5494/16384 [00:02<00:04, 2721.81it/s]     35%|###5      | 5768/16384 [00:02<00:03, 2726.28it/s]     37%|###6      | 6042/16384 [00:02<00:03, 2727.47it/s]     39%|###8      | 6315/16384 [00:02<00:03, 2721.92it/s]     40%|####      | 6588/16384 [00:02<00:03, 2722.10it/s]     42%|####1     | 6861/16384 [00:02<00:03, 2708.64it/s]     44%|####3     | 7134/16384 [00:02<00:03, 2713.76it/s]     45%|####5     | 7406/16384 [00:02<00:03, 2695.36it/s]     47%|####6     | 7681/16384 [00:02<00:03, 2710.99it/s]     49%|####8     | 7953/16384 [00:02<00:03, 2703.80it/s]     50%|#####     | 8229/16384 [00:03<00:02, 2719.57it/s]     52%|#####1    | 8505/16384 [00:03<00:02, 2730.97it/s]     54%|#####3    | 8782/16384 [00:03<00:02, 2742.44it/s]     55%|#####5    | 9057/16384 [00:03<00:02, 2738.73it/s]     57%|#####6    | 9332/16384 [00:03<00:02, 2740.66it/s]     59%|#####8    | 9607/16384 [00:03<00:02, 2731.09it/s]     60%|######    | 9881/16384 [00:03<00:02, 2725.09it/s]     62%|######1   | 10154/16384 [00:03<00:02, 2720.15it/s]     64%|######3   | 10427/16384 [00:03<00:02, 2713.31it/s]     65%|######5   | 10699/16384 [00:03<00:02, 2713.00it/s]     67%|######6   | 10974/16384 [00:04<00:01, 2723.44it/s]     69%|######8   | 11248/16384 [00:04<00:01, 2726.37it/s]     70%|#######   | 11522/16384 [00:04<00:01, 2727.52it/s]     72%|#######2  | 11798/16384 [00:04<00:01, 2736.56it/s]     74%|#######3  | 12072/16384 [00:04<00:01, 2719.95it/s]     75%|#######5  | 12347/16384 [00:04<00:01, 2727.36it/s]     77%|#######7  | 12621/16384 [00:04<00:01, 2728.90it/s]     79%|#######8  | 12895/16384 [00:04<00:01, 2731.62it/s]     80%|########  | 13170/16384 [00:04<00:01, 2736.73it/s]     82%|########2 | 13448/16384 [00:04<00:01, 2746.73it/s]     84%|########3 | 13726/16384 [00:05<00:00, 2754.54it/s]     85%|########5 | 14002/16384 [00:05<00:00, 2753.54it/s]     87%|########7 | 14278/16384 [00:05<00:00, 2753.50it/s]     89%|########8 | 14554/16384 [00:05<00:00, 2750.75it/s]     91%|######### | 14830/16384 [00:05<00:00, 2750.79it/s]     92%|#########2| 15106/16384 [00:05<00:00, 2752.15it/s]     94%|#########3| 15383/16384 [00:05<00:00, 2755.65it/s]     96%|#########5| 15660/16384 [00:05<00:00, 2757.00it/s]     97%|#########7| 15936/16384 [00:05<00:00, 2747.00it/s]     99%|#########8| 16213/16384 [00:05<00:00, 2750.85it/s]    100%|##########| 16384/16384 [00:05<00:00, 2730.91it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 268/16384 [00:00<00:06, 2673.13it/s]      3%|3         | 536/16384 [00:00<00:06, 2624.83it/s]      5%|4         | 804/16384 [00:00<00:05, 2648.11it/s]      7%|6         | 1082/16384 [00:00<00:05, 2695.96it/s]      8%|8         | 1357/16384 [00:00<00:05, 2711.98it/s]     10%|9         | 1629/16384 [00:00<00:05, 2709.01it/s]     12%|#1        | 1900/16384 [00:00<00:05, 2624.33it/s]     13%|#3        | 2169/16384 [00:00<00:05, 2644.27it/s]     15%|#4        | 2445/16384 [00:00<00:05, 2678.01it/s]     17%|#6        | 2723/16384 [00:01<00:05, 2707.10it/s]     18%|#8        | 3002/16384 [00:01<00:04, 2731.09it/s]     20%|#9        | 3276/16384 [00:01<00:04, 2729.85it/s]     22%|##1       | 3550/16384 [00:01<00:04, 2731.60it/s]     23%|##3       | 3824/16384 [00:01<00:04, 2728.07it/s]     25%|##5       | 4102/16384 [00:01<00:04, 2741.36it/s]     27%|##6       | 4377/16384 [00:01<00:04, 2743.18it/s]     28%|##8       | 4652/16384 [00:01<00:04, 2744.04it/s]     30%|###       | 4930/16384 [00:01<00:04, 2752.16it/s]     32%|###1      | 5209/16384 [00:01<00:04, 2762.07it/s]     33%|###3      | 5487/16384 [00:02<00:03, 2766.45it/s]     35%|###5      | 5767/16384 [00:02<00:03, 2773.81it/s]     37%|###6      | 6046/16384 [00:02<00:03, 2777.12it/s]     39%|###8      | 6324/16384 [00:02<00:03, 2776.76it/s]     40%|####      | 6602/16384 [00:02<00:03, 2765.12it/s]     42%|####1     | 6880/16384 [00:02<00:03, 2767.72it/s]     44%|####3     | 7160/16384 [00:02<00:03, 2775.17it/s]     45%|####5     | 7438/16384 [00:02<00:03, 2723.10it/s]     47%|####7     | 7711/16384 [00:02<00:03, 2682.89it/s]     49%|####8     | 7980/16384 [00:02<00:03, 2637.29it/s]     50%|#####     | 8244/16384 [00:03<00:03, 2618.68it/s]     52%|#####1    | 8508/16384 [00:03<00:03, 2623.65it/s]     54%|#####3    | 8771/16384 [00:03<00:02, 2601.99it/s]     55%|#####5    | 9032/16384 [00:03<00:02, 2579.69it/s]     57%|#####6    | 9291/16384 [00:03<00:02, 2562.34it/s]     58%|#####8    | 9549/16384 [00:03<00:02, 2566.36it/s]     60%|#####9    | 9824/16384 [00:03<00:02, 2619.14it/s]     62%|######1   | 10088/16384 [00:03<00:02, 2623.67it/s]     63%|######3   | 10351/16384 [00:03<00:02, 2596.90it/s]     65%|######4   | 10611/16384 [00:03<00:02, 2591.65it/s]     66%|######6   | 10871/16384 [00:04<00:02, 2580.06it/s]     68%|######7   | 11131/16384 [00:04<00:02, 2585.75it/s]     70%|######9   | 11390/16384 [00:04<00:01, 2579.55it/s]     71%|#######1  | 11657/16384 [00:04<00:01, 2606.31it/s]     73%|#######2  | 11927/16384 [00:04<00:01, 2633.39it/s]     74%|#######4  | 12202/16384 [00:04<00:01, 2666.03it/s]     76%|#######6  | 12476/16384 [00:04<00:01, 2687.88it/s]     78%|#######7  | 12752/16384 [00:04<00:01, 2708.13it/s]     80%|#######9  | 13028/16384 [00:04<00:01, 2722.92it/s]     81%|########1 | 13305/16384 [00:04<00:01, 2734.24it/s]     83%|########2 | 13582/16384 [00:05<00:01, 2742.21it/s]     85%|########4 | 13857/16384 [00:05<00:00, 2731.28it/s]     86%|########6 | 14131/16384 [00:05<00:00, 2726.37it/s]     88%|########7 | 14405/16384 [00:05<00:00, 2728.12it/s]     90%|########9 | 14678/16384 [00:05<00:00, 2723.60it/s]     91%|#########1| 14952/16384 [00:05<00:00, 2728.14it/s]     93%|#########2| 15225/16384 [00:05<00:00, 2728.02it/s]     95%|#########4| 15499/16384 [00:05<00:00, 2729.00it/s]     96%|#########6| 15774/16384 [00:05<00:00, 2733.16it/s]     98%|#########7| 16049/16384 [00:05<00:00, 2735.84it/s]    100%|#########9| 16327/16384 [00:06<00:00, 2746.81it/s]    100%|##########| 16384/16384 [00:06<00:00, 2692.30it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 275/16384 [00:00<00:05, 2743.15it/s]      3%|3         | 550/16384 [00:00<00:05, 2734.78it/s]      5%|5         | 825/16384 [00:00<00:05, 2738.68it/s]      7%|6         | 1099/16384 [00:00<00:05, 2728.67it/s]      8%|8         | 1373/16384 [00:00<00:05, 2729.54it/s]     10%|#         | 1647/16384 [00:00<00:05, 2731.28it/s]     12%|#1        | 1923/16384 [00:00<00:05, 2739.39it/s]     13%|#3        | 2198/16384 [00:00<00:05, 2741.55it/s]     15%|#5        | 2473/16384 [00:00<00:05, 2742.70it/s]     17%|#6        | 2749/16384 [00:01<00:04, 2747.32it/s]     18%|#8        | 3025/16384 [00:01<00:04, 2749.12it/s]     20%|##        | 3301/16384 [00:01<00:04, 2751.99it/s]     22%|##1       | 3578/16384 [00:01<00:04, 2756.86it/s]     24%|##3       | 3854/16384 [00:01<00:04, 2743.36it/s]     25%|##5       | 4130/16384 [00:01<00:04, 2748.14it/s]     27%|##6       | 4406/16384 [00:01<00:04, 2750.32it/s]     29%|##8       | 4683/16384 [00:01<00:04, 2754.44it/s]     30%|###       | 4959/16384 [00:01<00:04, 2742.32it/s]     32%|###1      | 5234/16384 [00:01<00:04, 2744.12it/s]     34%|###3      | 5509/16384 [00:02<00:03, 2742.77it/s]     35%|###5      | 5784/16384 [00:02<00:03, 2737.90it/s]     37%|###6      | 6060/16384 [00:02<00:03, 2741.63it/s]     39%|###8      | 6335/16384 [00:02<00:03, 2741.16it/s]     40%|####      | 6613/16384 [00:02<00:03, 2750.71it/s]     42%|####2     | 6890/16384 [00:02<00:03, 2754.41it/s]     44%|####3     | 7167/16384 [00:02<00:03, 2757.33it/s]     45%|####5     | 7444/16384 [00:02<00:03, 2758.52it/s]     47%|####7     | 7720/16384 [00:02<00:03, 2757.96it/s]     49%|####8     | 7996/16384 [00:02<00:03, 2755.78it/s]     50%|#####     | 8272/16384 [00:03<00:02, 2753.14it/s]     52%|#####2    | 8548/16384 [00:03<00:02, 2753.79it/s]     54%|#####3    | 8824/16384 [00:03<00:02, 2741.13it/s]     56%|#####5    | 9101/16384 [00:03<00:02, 2747.38it/s]     57%|#####7    | 9378/16384 [00:03<00:02, 2753.72it/s]     59%|#####8    | 9656/16384 [00:03<00:02, 2759.18it/s]     61%|######    | 9933/16384 [00:03<00:02, 2759.97it/s]     62%|######2   | 10211/16384 [00:03<00:02, 2765.07it/s]     64%|######4   | 10488/16384 [00:03<00:02, 2757.85it/s]     66%|######5   | 10764/16384 [00:03<00:02, 2750.00it/s]     67%|######7   | 11040/16384 [00:04<00:01, 2749.86it/s]     69%|######9   | 11315/16384 [00:04<00:01, 2748.93it/s]     71%|#######   | 11590/16384 [00:04<00:01, 2737.97it/s]     72%|#######2  | 11866/16384 [00:04<00:01, 2743.09it/s]     74%|#######4  | 12142/16384 [00:04<00:01, 2746.43it/s]     76%|#######5  | 12419/16384 [00:04<00:01, 2750.84it/s]     77%|#######7  | 12696/16384 [00:04<00:01, 2756.42it/s]     79%|#######9  | 12973/16384 [00:04<00:01, 2757.65it/s]     81%|########  | 13249/16384 [00:04<00:01, 2741.33it/s]     83%|########2 | 13524/16384 [00:04<00:01, 2730.60it/s]     84%|########4 | 13801/16384 [00:05<00:00, 2739.39it/s]     86%|########5 | 14076/16384 [00:05<00:00, 2741.90it/s]     88%|########7 | 14352/16384 [00:05<00:00, 2746.64it/s]     89%|########9 | 14627/16384 [00:05<00:00, 2745.93it/s]     91%|######### | 14903/16384 [00:05<00:00, 2749.51it/s]     93%|#########2| 15178/16384 [00:05<00:00, 2748.31it/s]     94%|#########4| 15453/16384 [00:05<00:00, 2737.75it/s]     96%|#########5| 15727/16384 [00:05<00:00, 2730.99it/s]     98%|#########7| 16001/16384 [00:05<00:00, 2731.27it/s]     99%|#########9| 16277/16384 [00:05<00:00, 2739.63it/s]    100%|##########| 16384/16384 [00:05<00:00, 2746.44it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 270/16384 [00:00<00:05, 2697.39it/s]      3%|3         | 546/16384 [00:00<00:05, 2728.78it/s]      5%|5         | 820/16384 [00:00<00:05, 2730.25it/s]      7%|6         | 1098/16384 [00:00<00:05, 2748.20it/s]      8%|8         | 1377/16384 [00:00<00:05, 2760.36it/s]     10%|#         | 1654/16384 [00:00<00:05, 2749.08it/s]     12%|#1        | 1931/16384 [00:00<00:05, 2754.30it/s]     13%|#3        | 2209/16384 [00:00<00:05, 2762.11it/s]     15%|#5        | 2487/16384 [00:00<00:05, 2765.12it/s]     17%|#6        | 2764/16384 [00:01<00:04, 2759.02it/s]     19%|#8        | 3040/16384 [00:01<00:04, 2758.90it/s]     20%|##        | 3318/16384 [00:01<00:04, 2765.09it/s]     22%|##1       | 3598/16384 [00:01<00:04, 2773.86it/s]     24%|##3       | 3876/16384 [00:01<00:04, 2766.24it/s]     25%|##5       | 4156/16384 [00:01<00:04, 2774.74it/s]     27%|##7       | 4434/16384 [00:01<00:04, 2775.21it/s]     29%|##8       | 4712/16384 [00:01<00:04, 2761.78it/s]     30%|###       | 4990/16384 [00:01<00:04, 2766.54it/s]     32%|###2      | 5269/16384 [00:01<00:04, 2773.08it/s]     34%|###3      | 5549/16384 [00:02<00:03, 2778.29it/s]     36%|###5      | 5827/16384 [00:02<00:03, 2770.93it/s]     37%|###7      | 6106/16384 [00:02<00:03, 2774.59it/s]     39%|###8      | 6384/16384 [00:02<00:03, 2774.37it/s]     41%|####      | 6663/16384 [00:02<00:03, 2777.61it/s]     42%|####2     | 6941/16384 [00:02<00:03, 2778.27it/s]     44%|####4     | 7220/16384 [00:02<00:03, 2780.85it/s]     46%|####5     | 7499/16384 [00:02<00:03, 2775.97it/s]     47%|####7     | 7778/16384 [00:02<00:03, 2778.55it/s]     49%|####9     | 8057/16384 [00:02<00:02, 2779.38it/s]     51%|#####     | 8336/16384 [00:03<00:02, 2781.19it/s]     53%|#####2    | 8615/16384 [00:03<00:02, 2774.49it/s]     54%|#####4    | 8893/16384 [00:03<00:02, 2775.56it/s]     56%|#####5    | 9173/16384 [00:03<00:02, 2781.10it/s]     58%|#####7    | 9452/16384 [00:03<00:02, 2777.18it/s]     59%|#####9    | 9731/16384 [00:03<00:02, 2778.82it/s]     61%|######1   | 10009/16384 [00:03<00:02, 2779.13it/s]     63%|######2   | 10287/16384 [00:03<00:02, 2774.86it/s]     64%|######4   | 10565/16384 [00:03<00:02, 2776.14it/s]     66%|######6   | 10845/16384 [00:03<00:01, 2782.05it/s]     68%|######7   | 11124/16384 [00:04<00:01, 2784.27it/s]     70%|######9   | 11403/16384 [00:04<00:01, 2771.71it/s]     71%|#######1  | 11682/16384 [00:04<00:01, 2774.26it/s]     73%|#######3  | 11961/16384 [00:04<00:01, 2776.60it/s]     75%|#######4  | 12240/16384 [00:04<00:01, 2780.31it/s]     76%|#######6  | 12519/16384 [00:04<00:01, 2779.04it/s]     78%|#######8  | 12799/16384 [00:04<00:01, 2782.97it/s]     80%|#######9  | 13078/16384 [00:04<00:01, 2780.74it/s]     82%|########1 | 13357/16384 [00:04<00:01, 2780.37it/s]     83%|########3 | 13636/16384 [00:04<00:00, 2764.61it/s]     85%|########4 | 13914/16384 [00:05<00:00, 2769.03it/s]     87%|########6 | 14191/16384 [00:05<00:00, 2762.09it/s]     88%|########8 | 14470/16384 [00:05<00:00, 2768.40it/s]     90%|######### | 14750/16384 [00:05<00:00, 2776.19it/s]     92%|#########1| 15028/16384 [00:05<00:00, 2774.95it/s]     93%|#########3| 15307/16384 [00:05<00:00, 2778.43it/s]     95%|#########5| 15585/16384 [00:05<00:00, 2777.19it/s]     97%|#########6| 15863/16384 [00:05<00:00, 2775.52it/s]     99%|#########8| 16141/16384 [00:05<00:00, 2769.21it/s]    100%|##########| 16384/16384 [00:05<00:00, 2771.52it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 22 minutes  28.757 seconds)


.. _sphx_glr_download_tutorials_b_high_level_simulation_plot_e_switched_capacitor_digital_control.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_e_switched_capacitor_digital_control.py <plot_e_switched_capacitor_digital_control.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_e_switched_capacitor_digital_control.ipynb <plot_e_switched_capacitor_digital_control.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
