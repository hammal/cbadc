
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/b_high_level_simulation/plot_e_switched_capacitor_digital_control.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_b_high_level_simulation_plot_e_switched_capacitor_digital_control.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_b_high_level_simulation_plot_e_switched_capacitor_digital_control.py:


Switched-Capacitor Digital Control
==================================

In this tutorial we show how to use switched-capacitor digital control
in combination with a continuous-time system.

.. GENERATED FROM PYTHON SOURCE LINES 8-13

.. code-block:: default

    import cbadc
    import scipy
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 14-48

Integration Node
----------------

Initially we consider a integration node as shown in the figure below.

.. image:: /images/RC-amp.svg
   :width: 500
   :align: center
   :alt: The RC integrator with switched-capacitor digital control.

Which is goverened by the differential equations

:math:`\dot{v}_{x_{\ell}}(t) = \frac{1}{C_{x_{\ell}}} \left( \frac{v_{\Gamma_{\ell}}(t) - v_{s_\ell}(t)}{R_{s}} - \frac{1}{R_{\beta_\ell}}  v_{x_{\ell - 1}}(t) \right)`

:math:`\dot{v}_{\Gamma_{\ell}}(t) = \frac{1}{2R_{s} C_{\Gamma_{\ell}}} \left( v_{s_\ell}(t) - v_{\Gamma_{\ell}}(t) \right)`

during phase :math:`\phi_1` and

:math:`\dot{v}_{x_{\ell}}(t)  =  - \frac{1}{R_{\beta_\ell} C_{x_{\ell}}} v_{x_{\ell - 1}}(t)`

:math:`\dot{v}_{\Gamma_{\ell}}(t) = - \frac{1}{2 R_{s} C_{\Gamma_{\ell}}}  v_{\Gamma_{\ell}}(t)`

during phase :math:`\bar{\phi}_1` where a full control phase :math:`T = T_{\phi_1} + T_{\bar{\phi}_1}`.

To simulate this control-bounded converter we need to specify the whole system which for this
tutorial will be a chain-of-integrators system as shown below.

.. image:: /images/chainOfIntegratorsGeneral.svg
   :width: 1500
   :align: center
   :alt: The chain-of-integrators ADC.

where the digital controls are implemented as above.
Thus the system equations can be written as

.. GENERATED FROM PYTHON SOURCE LINES 48-65

.. code-block:: default


    N = 4
    M = N

    C_x = 1e-9
    C_Gamma = C_x / 2
    R_s = 1e1
    R_beta = 1e3

    beta = 1 / (R_beta * C_x)
    T = 1 / (2 * beta)

    A = beta * np.eye(N, k=-1)
    B = np.zeros(N)
    B[0] = beta
    CT = np.eye(N)








.. GENERATED FROM PYTHON SOURCE LINES 66-84

Simplifying the Differential Equation
-------------------------------------

Due to the virtual ground of the op-amp integrator we can treat the
second differential equation (the one involving :math:`v_{\Gamma_\ell}(t)`)
seperately. Specifically, if we assume the
capacitor :math:`C_{\Gamma}` empties completely during :math:`\bar{\phi}_1`,
and that :math:`v_{s_\ell} = \{\pm 1\}` for all :math:`t`, the digital
control's effect on the analog system can be written as

:math:`v_{\Gamma_\ell}(t) - v_{s_\ell}(t) = v_{s_\ell}(t) \cdot e^{-t/\tau}`

where :math:`\tau=R_s C_{\Gamma_\ell}`.

This can be modeled by instantiating the digital control
:class:`cbadc.digital_control.DigitalControl`
using the impulse response :func:`cbadc.digital_control.RCImpulseResponse`
as

.. GENERATED FROM PYTHON SOURCE LINES 84-98

.. code-block:: default


    impulse_response = cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma)
    digital_control_sc = cbadc.digital_control.DigitalControl(
        cbadc.analog_signal.Clock(T), M, impulse_response=impulse_response
    )

    Gamma = 1 / (R_s * C_x) * np.eye(M)
    Gamma_tildeT = -np.eye(M)

    analog_system_sc = cbadc.analog_system.AnalogSystem(A, B, CT, Gamma, Gamma_tildeT)

    print(digital_control_sc)
    print(analog_system_sc)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ================================================================================

    The Digital Control is parameterized as:

    --------------------------------------------------------------------------------

    clock:
    Analog signal returns constant 0, i.e., maps t |-> 0.

    M:
    4
    ================================================================================

    The analog system is parameterized as:
    A =
    [[ 0.00e+00  0.00e+00  0.00e+00  0.00e+00]
     [ 1.00e+06  0.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  1.00e+06  0.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  1.00e+06  0.00e+00]],
    B =
    [[ 1.00e+06]
     [ 0.00e+00]
     [ 0.00e+00]
     [ 0.00e+00]],
    CT =
    [[ 1.00e+00  0.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  1.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  1.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  0.00e+00  1.00e+00]],
    Gamma =
    [[ 1.00e+08  0.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  1.00e+08  0.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  1.00e+08  0.00e+00]
     [ 0.00e+00  0.00e+00  0.00e+00  1.00e+08]],
    Gamma_tildeT =
    [[-1.00e+00 -0.00e+00 -0.00e+00 -0.00e+00]
     [-0.00e+00 -1.00e+00 -0.00e+00 -0.00e+00]
     [-0.00e+00 -0.00e+00 -1.00e+00 -0.00e+00]
     [-0.00e+00 -0.00e+00 -0.00e+00 -1.00e+00]], and D=[[ 0.00e+00]
     [ 0.00e+00]
     [ 0.00e+00]
     [ 0.00e+00]]




.. GENERATED FROM PYTHON SOURCE LINES 99-102

Visualizing the State Trajectories
----------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 102-155

.. code-block:: default

    OSR = 32
    amplitude = 1.0
    analog_signal = cbadc.analog_signal.Sinusoidal(amplitude, 1 / T / (OSR << 4))
    Ts = T / 100.0
    size = 1 << 12

    simulator_sc = cbadc.simulator.extended_simulation_result(
        cbadc.simulator.get_simulator(
            analog_system_sc,
            digital_control_sc,
            [analog_signal],
            cbadc.analog_signal.Clock(Ts),
            simulator_type=cbadc.simulator.SimulatorType.analytical,
        )
    )


    analog_system_ref = cbadc.analog_system.AnalogSystem(
        A, B, CT, np.eye(N) * beta, Gamma_tildeT
    )
    digital_control_ref = cbadc.digital_control.DigitalControl(
        cbadc.analog_signal.Clock(T), M
    )
    simulator_ref = cbadc.simulator.extended_simulation_result(
        cbadc.simulator.get_simulator(
            analog_system_ref,
            digital_control_ref,
            [analog_signal],
            cbadc.analog_signal.Clock(Ts),
            simulator_type=cbadc.simulator.SimulatorType.analytical,
        )
    )

    states = np.zeros((size, N))
    states_ref = np.zeros_like(states)
    t = Ts * np.arange(size)

    # Simulations
    for time_step in cbadc.utilities.show_status(range(size)):
        states[time_step, :] = next(simulator_sc)["analog_state"]
        states_ref[time_step, :] = next(simulator_ref)["analog_state"]

    # Plot state trajectories
    for index in range(N):
        plt.figure()
        plt.title("Analog state trajectories for " + f"$x_{index + 1}(t)$")
        plt.plot(t / T, states[:, index], label="SC")
        plt.plot(t / T, states_ref[:, index], label="ref")
        plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
        plt.xlabel("$t/T$")
        plt.legend()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_001.png
         :alt: Analog state trajectories for $x_1(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_002.png
         :alt: Analog state trajectories for $x_2(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_003.png
         :alt: Analog state trajectories for $x_3(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_004.png
         :alt: Analog state trajectories for $x_4(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/4096 [00:00<?, ?it/s]      7%|7         | 294/4096 [00:00<00:01, 2938.15it/s]     14%|#4        | 588/4096 [00:00<00:01, 2899.13it/s]     21%|##1       | 879/4096 [00:00<00:01, 2901.79it/s]     29%|##8       | 1170/4096 [00:00<00:01, 2885.66it/s]     36%|###5      | 1459/4096 [00:00<00:00, 2863.72it/s]     43%|####2     | 1746/4096 [00:00<00:00, 2859.71it/s]     50%|####9     | 2032/4096 [00:00<00:00, 2854.58it/s]     57%|#####6    | 2323/4096 [00:00<00:00, 2870.02it/s]     64%|######3   | 2611/4096 [00:00<00:00, 2866.30it/s]     71%|#######   | 2900/4096 [00:01<00:00, 2872.04it/s]     78%|#######7  | 3191/4096 [00:01<00:00, 2883.27it/s]     85%|########5 | 3483/4096 [00:01<00:00, 2891.61it/s]     92%|#########2| 3776/4096 [00:01<00:00, 2900.31it/s]     99%|#########9| 4067/4096 [00:01<00:00, 2892.57it/s]    100%|##########| 4096/4096 [00:01<00:00, 2881.92it/s]




.. GENERATED FROM PYTHON SOURCE LINES 156-159

Filter Coefficients
----------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 159-273

.. code-block:: default

    K1 = 1 << 8
    K2 = K1
    eta2 = (
        np.linalg.norm(
            analog_system_sc.transfer_function_matrix(np.array([2 * np.pi / T / OSR]))
        ).flatten()
        ** 2
    )

    # prepending an anti-aliasing filter
    # omega_3dB = 2 * np.pi / T / 16
    # wp = omega_3dB / 2.0
    # ws = omega_3dB
    # gpass = 1.0
    # gstop = 60
    # filter = cbadc.analog_system.IIRDesign(wp, ws, gpass, gstop, ftype="ellip")

    # Post-filtering FIR filter
    fir_filter_numtaps = K1 + K2
    f_cutoff = 1.0 / OSR * 2
    fir_filter = scipy.signal.firwin(fir_filter_numtaps, f_cutoff)


    digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
        # cbadc.analog_system.chain([filter, analog_system_sc]),
        analog_system_sc,
        digital_control_sc,
        eta2,
        K1,
        K2,
    )

    # Apply FIR filter
    digital_estimator_sc.convolve(fir_filter)

    digital_estimator_ref = cbadc.digital_estimator.FIRFilter(
        # cbadc.analog_system.chain([filter, analog_system_ref]),
        analog_system_ref,
        digital_control_ref,
        eta2,
        K1,
        K2,
    )

    # Apply FIR filter
    digital_estimator_ref.convolve(fir_filter)

    plt.figure()
    plt.semilogy(
        np.arange(-K1, K2),
        np.linalg.norm(np.array(digital_estimator_sc.h[0, :, :]), axis=1)[:],
        label="Switched Capacitor Filter",
    )
    plt.semilogy(
        np.arange(-K1, K2),
        np.linalg.norm(np.array(digital_estimator_ref.h[0, :, :]), axis=1)[:],
        label="Ref Filter",
    )

    plt.legend()
    plt.xlabel("filter tap k")
    plt.ylabel("$|| \mathbf{h} [k]||_2$")
    plt.xlim((-K1, K2))
    # plt.ylim((1e-16, 1))
    plt.grid(which="both")

    # Logspace frequencies
    frequencies = np.logspace(-3, 0, 100)
    omega = 4 * np.pi * beta * frequencies

    plt.figure()
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(np.abs(digital_estimator_sc.signal_transfer_function(omega))).flatten(),
        label="$STF(\omega)$ SC",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(np.abs(digital_estimator_ref.signal_transfer_function(omega))).flatten(),
        label="$STF(\omega)$ ref",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(
            np.linalg.norm(
                digital_estimator_sc.noise_transfer_function(omega)[:, 0, :], axis=0
            )
        ),
        "--",
        label="$ || NTF(\omega) ||_2 $ SC",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(
            np.linalg.norm(
                digital_estimator_ref.noise_transfer_function(omega)[:, 0, :], axis=0
            )
        ),
        "--",
        label="$ || NTF(\omega) ||_2 $ ref",
    )
    # Add labels and legends to figure
    plt.legend()
    plt.grid(which="both")
    plt.title("Signal and noise transfer functions")
    plt.xlabel("$f$ [Hz]")
    plt.ylabel("dB")
    # plt.xlim((1e2, 5e3))
    plt.gcf().tight_layout()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_005.png
         :alt: plot e switched capacitor digital control
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_006.png
         :alt: Signal and noise transfer functions
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 274-278

Mismatch Sensitivity to Switch Resistance
-----------------------------------------



.. GENERATED FROM PYTHON SOURCE LINES 278-351

.. code-block:: default


    mismatch_in_percent = np.arange(3) * 10

    size = 1 << 14
    t = np.arange(size) * T

    estimates = []

    for mismatch in mismatch_in_percent:
        digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_sc]),
            analog_system_sc,
            cbadc.digital_control.DigitalControl(
                cbadc.analog_signal.Clock(T),
                M,
                impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
            ),
            eta2,
            K1,
            K2,
        )

        # Apply FIR filter
        digital_estimator_sc.convolve(fir_filter)

        digital_estimator_sc(
            cbadc.simulator.get_simulator(
                cbadc.analog_system.AnalogSystem(
                    A,
                    B,
                    CT,
                    1 / ((1 + mismatch / 100) * R_s * C_x) * np.eye(M),
                    Gamma_tildeT,
                ),
                cbadc.digital_control.DigitalControl(
                    cbadc.analog_signal.Clock(T),
                    M,
                    impulse_response=cbadc.analog_signal.RCImpulseResponse(
                        (1 + mismatch / 100) * R_s * C_Gamma
                    ),
                ),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )
        u_hat = np.zeros(size)
        for index in cbadc.utilities.show_status(range(size)):
            u_hat[index] = next(digital_estimator_sc)
        estimates.append(u_hat)

    # Plot estimates in time domain
    plt.figure()
    plt.title("Estimates")
    for index, mismatch in enumerate(mismatch_in_percent):
        plt.plot(t / T, estimates[index], label=f"Mismatch R_s {mismatch}%")
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 100))
    plt.legend()

    # Plot estimates PSD
    plt.figure()
    plt.title("Estimates PSD")
    for index, mismatch in enumerate(mismatch_in_percent):
        f, psd = cbadc.utilities.compute_power_spectral_density(
            estimates[index][K1 + K2 :], fs=1.0 / T
        )
        plt.semilogx(f, 10 * np.log10(psd), label=f"Mismatch R_s {mismatch}%")
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("f [Hz]")
    plt.ylabel("V^2/Hz [dB]")
    plt.legend()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_007.png
         :alt: Estimates
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_008.png
         :alt: Estimates PSD
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_008.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/16384 [00:00<?, ?it/s]      3%|3         | 521/16384 [00:00<00:03, 5201.57it/s]      6%|6         | 1052/16384 [00:00<00:02, 5263.35it/s]     10%|9         | 1579/16384 [00:00<00:02, 5134.65it/s]     13%|#2        | 2113/16384 [00:00<00:02, 5213.43it/s]     16%|#6        | 2648/16384 [00:00<00:02, 5261.11it/s]     19%|#9        | 3192/16384 [00:00<00:02, 5320.13it/s]     23%|##2       | 3725/16384 [00:00<00:02, 5230.76it/s]     26%|##5       | 4249/16384 [00:00<00:02, 5228.35it/s]     29%|##9       | 4786/16384 [00:00<00:02, 5269.77it/s]     32%|###2      | 5314/16384 [00:01<00:02, 5244.75it/s]     36%|###5      | 5839/16384 [00:01<00:02, 5032.26it/s]     39%|###8      | 6361/16384 [00:01<00:01, 5085.92it/s]     42%|####2     | 6889/16384 [00:01<00:01, 5141.37it/s]     45%|####5     | 7421/16384 [00:01<00:01, 5193.15it/s]     49%|####8     | 7958/16384 [00:01<00:01, 5244.58it/s]     52%|#####1    | 8484/16384 [00:01<00:01, 5220.03it/s]     55%|#####4    | 9007/16384 [00:01<00:01, 5164.76it/s]     58%|#####8    | 9546/16384 [00:01<00:01, 5230.74it/s]     62%|######1   | 10087/16384 [00:01<00:01, 5282.95it/s]     65%|######4   | 10616/16384 [00:02<00:01, 5229.20it/s]     68%|######7   | 11140/16384 [00:02<00:01, 5221.00it/s]     71%|#######1  | 11672/16384 [00:02<00:00, 5248.83it/s]     75%|#######4  | 12213/16384 [00:02<00:00, 5294.68it/s]     78%|#######7  | 12743/16384 [00:02<00:00, 5173.92it/s]     81%|########  | 13264/16384 [00:02<00:00, 5181.91it/s]     84%|########4 | 13792/16384 [00:02<00:00, 5209.34it/s]     87%|########7 | 14322/16384 [00:02<00:00, 5235.45it/s]     91%|######### | 14846/16384 [00:02<00:00, 5108.90it/s]     94%|#########3| 15370/16384 [00:02<00:00, 5145.47it/s]     97%|#########7| 15895/16384 [00:03<00:00, 5173.99it/s]    100%|##########| 16384/16384 [00:03<00:00, 5206.61it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      3%|3         | 552/16384 [00:00<00:02, 5516.35it/s]      7%|6         | 1108/16384 [00:00<00:02, 5537.17it/s]     10%|#         | 1669/16384 [00:00<00:02, 5566.01it/s]     14%|#3        | 2227/16384 [00:00<00:02, 5570.32it/s]     17%|#7        | 2787/16384 [00:00<00:02, 5578.30it/s]     20%|##        | 3345/16384 [00:00<00:02, 5546.04it/s]     24%|##3       | 3905/16384 [00:00<00:02, 5562.57it/s]     27%|##7       | 4463/16384 [00:00<00:02, 5567.45it/s]     31%|###       | 5021/16384 [00:00<00:02, 5568.93it/s]     34%|###4      | 5580/16384 [00:01<00:01, 5572.77it/s]     37%|###7      | 6141/16384 [00:01<00:01, 5581.41it/s]     41%|####      | 6700/16384 [00:01<00:01, 5581.90it/s]     44%|####4     | 7262/16384 [00:01<00:01, 5590.63it/s]     48%|####7     | 7822/16384 [00:01<00:01, 5585.34it/s]     51%|#####1    | 8382/16384 [00:01<00:01, 5588.97it/s]     55%|#####4    | 8941/16384 [00:01<00:01, 5564.43it/s]     58%|#####7    | 9501/16384 [00:01<00:01, 5572.51it/s]     61%|######1   | 10062/16384 [00:01<00:01, 5582.14it/s]     65%|######4   | 10621/16384 [00:01<00:01, 5572.61it/s]     68%|######8   | 11180/16384 [00:02<00:00, 5576.51it/s]     72%|#######1  | 11738/16384 [00:02<00:00, 5576.15it/s]     75%|#######5  | 12296/16384 [00:02<00:00, 5572.75it/s]     78%|#######8  | 12855/16384 [00:02<00:00, 5575.95it/s]     82%|########1 | 13414/16384 [00:02<00:00, 5578.95it/s]     85%|########5 | 13973/16384 [00:02<00:00, 5581.36it/s]     89%|########8 | 14532/16384 [00:02<00:00, 5571.78it/s]     92%|#########2| 15093/16384 [00:02<00:00, 5582.51it/s]     96%|#########5| 15652/16384 [00:02<00:00, 5579.38it/s]     99%|#########8| 16213/16384 [00:02<00:00, 5585.62it/s]    100%|##########| 16384/16384 [00:02<00:00, 5575.01it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      3%|3         | 550/16384 [00:00<00:02, 5497.37it/s]      7%|6         | 1103/16384 [00:00<00:02, 5513.05it/s]     10%|#         | 1659/16384 [00:00<00:02, 5531.68it/s]     14%|#3        | 2216/16384 [00:00<00:02, 5546.23it/s]     17%|#6        | 2773/16384 [00:00<00:02, 5552.98it/s]     20%|##        | 3330/16384 [00:00<00:02, 5557.57it/s]     24%|##3       | 3886/16384 [00:00<00:02, 5533.78it/s]     27%|##7       | 4443/16384 [00:00<00:02, 5542.65it/s]     31%|###       | 4998/16384 [00:00<00:02, 5532.40it/s]     34%|###3      | 5555/16384 [00:01<00:01, 5540.98it/s]     37%|###7      | 6113/16384 [00:01<00:01, 5552.40it/s]     41%|####      | 6671/16384 [00:01<00:01, 5560.35it/s]     44%|####4     | 7229/16384 [00:01<00:01, 5565.68it/s]     48%|####7     | 7788/16384 [00:01<00:01, 5570.83it/s]     51%|#####     | 8347/16384 [00:01<00:01, 5575.70it/s]     54%|#####4    | 8906/16384 [00:01<00:01, 5579.38it/s]     58%|#####7    | 9465/16384 [00:01<00:01, 5581.48it/s]     61%|######1   | 10024/16384 [00:01<00:01, 5574.22it/s]     65%|######4   | 10582/16384 [00:01<00:01, 5559.01it/s]     68%|######7   | 11138/16384 [00:02<00:00, 5557.38it/s]     71%|#######1  | 11696/16384 [00:02<00:00, 5561.66it/s]     75%|#######4  | 12253/16384 [00:02<00:00, 5563.18it/s]     78%|#######8  | 12810/16384 [00:02<00:00, 5561.20it/s]     82%|########1 | 13367/16384 [00:02<00:00, 5558.46it/s]     85%|########4 | 13924/16384 [00:02<00:00, 5559.82it/s]     88%|########8 | 14480/16384 [00:02<00:00, 5559.03it/s]     92%|#########1| 15037/16384 [00:02<00:00, 5560.47it/s]     95%|#########5| 15594/16384 [00:02<00:00, 5561.92it/s]     99%|#########8| 16151/16384 [00:02<00:00, 5550.70it/s]    100%|##########| 16384/16384 [00:02<00:00, 5554.71it/s]

    <matplotlib.legend.Legend object at 0x293de2200>



.. GENERATED FROM PYTHON SOURCE LINES 352-355

Clock Jitter Sensitivity
------------------------


.. GENERATED FROM PYTHON SOURCE LINES 355-483

.. code-block:: default

    jitter_std = np.power(10.0, np.arange(-6, 0)) * T
    # jitter_std = np.arange(3) * T * 0.3
    clock_jitter = [lambda: (np.random.random() - 0.5) * std for std in jitter_std]

    size = 1 << 14
    t = np.arange(size) * T

    estimates = []
    estimates_ref = []

    for jitter in clock_jitter:
        digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_sc]),
            analog_system_sc,
            cbadc.digital_control.DigitalControl(
                cbadc.analog_signal.Clock(T),
                M,
                impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
            ),
            eta2,
            K1,
            K2,
            solver_type=cbadc.digital_estimator.FilterComputationBackend.mpmath,
        )

        # Apply FIR filter
        # digital_estimator_sc.convolve(fir_filter)

        digital_estimator_sc(
            cbadc.simulator.get_simulator(
                analog_system_sc,
                cbadc.digital_control.DigitalControl(
                    cbadc.analog_signal.Clock(T),
                    M,
                    impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
                ),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )

        digital_estimator_ref = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_ref]),
            analog_system_ref,
            cbadc.digital_control.DigitalControl(cbadc.analog_signal.Clock(T), M),
            eta2,
            K1,
            K2,
            solver_type=cbadc.digital_estimator.FilterComputationBackend.mpmath,
        )

        # Apply FIR filter
        # digital_estimator_ref.convolve(fir_filter)

        digital_estimator_ref(
            cbadc.simulator.get_simulator(
                analog_system_ref,
                cbadc.digital_control.DigitalControl(cbadc.analog_signal.Clock(T), M),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )

        u_hat = np.zeros(size)
        u_hat_ref = np.zeros_like(u_hat)
        digital_estimator_sc.warm_up()
        digital_estimator_ref.warm_up()
        for index in cbadc.utilities.show_status(range(size)):
            u_hat[index] = next(digital_estimator_sc)
            u_hat_ref[index] = next(digital_estimator_ref)
        estimates.append(u_hat)
        estimates_ref.append(u_hat_ref)

    # Plot estimates in time domain
    plt.figure()
    plt.title("Estimates")
    for index, jitter in enumerate(clock_jitter):
        plt.plot(
            t / T,
            estimates[index],
            label=f"Std / T = {np.round(jitter_std[index] / T * 100, 3)}%",
        )
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 1000))
    plt.legend()

    # Plot estimates in time domain
    plt.figure()
    plt.title("Ref Estimates")
    for index, jitter in enumerate(clock_jitter):
        plt.plot(
            t / T,
            estimates_ref[index],
            label=f"Ref Std / T = {np.round(jitter_std[index] / T * 100, 3)}%",
        )
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 1000))
    plt.legend()


    # Plot estimates PSD
    for index, jitter in enumerate(clock_jitter):
        plt.figure()
        plt.title("Estimates PSD Clock Jitter")

        f, psd = cbadc.utilities.compute_power_spectral_density(
            estimates[index][K1 + K2 :], fs=1.0 / T
        )
        f_ref, psd_ref = cbadc.utilities.compute_power_spectral_density(
            estimates_ref[index][K1 + K2 :], fs=1.0 / T
        )
        plt.semilogx(
            f,
            10 * np.log10(psd),
            label=f"SC (Std/T) = +- {np.round(jitter_std[index] / T * 100, 3)}%",
        )
        plt.semilogx(
            f_ref,
            10 * np.log10(psd_ref),
            "--",
            label=f"Ref (Std/T) = +- {np.round(jitter_std[index] / T  * 100, 3)}%",
        )
        plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
        plt.xlabel("f [Hz]")
        plt.ylabel("V^2/Hz [dB]")
        plt.legend()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_009.png
         :alt: Estimates
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_010.png
         :alt: Ref Estimates
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_011.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_011.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_012.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_012.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_013.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_014.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_014.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_015.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_015.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_016.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_016.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 272/16384 [00:00<00:05, 2716.41it/s]      3%|3         | 544/16384 [00:00<00:05, 2703.20it/s]      5%|5         | 821/16384 [00:00<00:05, 2729.84it/s]      7%|6         | 1100/16384 [00:00<00:05, 2753.26it/s]      8%|8         | 1379/16384 [00:00<00:05, 2764.68it/s]     10%|#         | 1656/16384 [00:00<00:05, 2757.59it/s]     12%|#1        | 1932/16384 [00:00<00:05, 2749.37it/s]     13%|#3        | 2207/16384 [00:00<00:05, 2745.76it/s]     15%|#5        | 2482/16384 [00:00<00:05, 2741.97it/s]     17%|#6        | 2757/16384 [00:01<00:04, 2743.36it/s]     19%|#8        | 3032/16384 [00:01<00:04, 2728.38it/s]     20%|##        | 3305/16384 [00:01<00:04, 2717.09it/s]     22%|##1       | 3579/16384 [00:01<00:04, 2722.60it/s]     24%|##3       | 3857/16384 [00:01<00:04, 2738.17it/s]     25%|##5       | 4137/16384 [00:01<00:04, 2754.75it/s]     27%|##6       | 4416/16384 [00:01<00:04, 2764.78it/s]     29%|##8       | 4696/16384 [00:01<00:04, 2772.52it/s]     30%|###       | 4975/16384 [00:01<00:04, 2776.35it/s]     32%|###2      | 5255/16384 [00:01<00:04, 2781.21it/s]     34%|###3      | 5534/16384 [00:02<00:03, 2782.98it/s]     35%|###5      | 5814/16384 [00:02<00:03, 2785.11it/s]     37%|###7      | 6094/16384 [00:02<00:03, 2788.33it/s]     39%|###8      | 6373/16384 [00:02<00:03, 2786.39it/s]     41%|####      | 6653/16384 [00:02<00:03, 2788.98it/s]     42%|####2     | 6932/16384 [00:02<00:03, 2787.37it/s]     44%|####4     | 7212/16384 [00:02<00:03, 2790.72it/s]     46%|####5     | 7492/16384 [00:02<00:03, 2789.93it/s]     47%|####7     | 7771/16384 [00:02<00:03, 2787.45it/s]     49%|####9     | 8051/16384 [00:02<00:02, 2789.80it/s]     51%|#####     | 8332/16384 [00:03<00:02, 2792.91it/s]     53%|#####2    | 8612/16384 [00:03<00:02, 2794.38it/s]     54%|#####4    | 8892/16384 [00:03<00:02, 2780.08it/s]     56%|#####5    | 9172/16384 [00:03<00:02, 2783.68it/s]     58%|#####7    | 9451/16384 [00:03<00:02, 2784.65it/s]     59%|#####9    | 9731/16384 [00:03<00:02, 2788.15it/s]     61%|######1   | 10010/16384 [00:03<00:02, 2787.34it/s]     63%|######2   | 10291/16384 [00:03<00:02, 2791.59it/s]     65%|######4   | 10571/16384 [00:03<00:02, 2791.36it/s]     66%|######6   | 10852/16384 [00:03<00:01, 2793.93it/s]     68%|######7   | 11132/16384 [00:04<00:01, 2795.69it/s]     70%|######9   | 11412/16384 [00:04<00:01, 2783.74it/s]     71%|#######1  | 11691/16384 [00:04<00:01, 2781.87it/s]     73%|#######3  | 11970/16384 [00:04<00:01, 2781.59it/s]     75%|#######4  | 12250/16384 [00:04<00:01, 2785.30it/s]     76%|#######6  | 12529/16384 [00:04<00:01, 2758.85it/s]     78%|#######8  | 12808/16384 [00:04<00:01, 2765.80it/s]     80%|#######9  | 13087/16384 [00:04<00:01, 2770.72it/s]     82%|########1 | 13365/16384 [00:04<00:01, 2734.53it/s]     83%|########3 | 13639/16384 [00:04<00:01, 2720.18it/s]     85%|########4 | 13912/16384 [00:05<00:00, 2713.20it/s]     87%|########6 | 14184/16384 [00:05<00:00, 2712.59it/s]     88%|########8 | 14458/16384 [00:05<00:00, 2718.67it/s]     90%|########9 | 14737/16384 [00:05<00:00, 2739.20it/s]     92%|#########1| 15016/16384 [00:05<00:00, 2753.67it/s]     93%|#########3| 15292/16384 [00:05<00:00, 2744.43it/s]     95%|#########5| 15569/16384 [00:05<00:00, 2751.95it/s]     97%|#########6| 15846/16384 [00:05<00:00, 2755.32it/s]     98%|#########8| 16122/16384 [00:05<00:00, 2724.18it/s]    100%|##########| 16384/16384 [00:05<00:00, 2761.49it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 271/16384 [00:00<00:05, 2705.21it/s]      3%|3         | 545/16384 [00:00<00:05, 2722.54it/s]      5%|4         | 818/16384 [00:00<00:05, 2718.85it/s]      7%|6         | 1091/16384 [00:00<00:05, 2720.63it/s]      8%|8         | 1364/16384 [00:00<00:05, 2707.10it/s]     10%|9         | 1635/16384 [00:00<00:05, 2704.48it/s]     12%|#1        | 1906/16384 [00:00<00:05, 2705.22it/s]     13%|#3        | 2180/16384 [00:00<00:05, 2713.66it/s]     15%|#4        | 2452/16384 [00:00<00:05, 2703.64it/s]     17%|#6        | 2723/16384 [00:01<00:05, 2702.34it/s]     18%|#8        | 2994/16384 [00:01<00:04, 2704.15it/s]     20%|#9        | 3265/16384 [00:01<00:04, 2703.59it/s]     22%|##1       | 3536/16384 [00:01<00:04, 2690.99it/s]     23%|##3       | 3806/16384 [00:01<00:04, 2689.07it/s]     25%|##4       | 4083/16384 [00:01<00:04, 2713.09it/s]     27%|##6       | 4361/16384 [00:01<00:04, 2732.15it/s]     28%|##8       | 4640/16384 [00:01<00:04, 2747.27it/s]     30%|###       | 4916/16384 [00:01<00:04, 2749.50it/s]     32%|###1      | 5191/16384 [00:01<00:04, 2727.42it/s]     33%|###3      | 5466/16384 [00:02<00:03, 2733.39it/s]     35%|###5      | 5740/16384 [00:02<00:03, 2729.22it/s]     37%|###6      | 6015/16384 [00:02<00:03, 2732.94it/s]     38%|###8      | 6292/16384 [00:02<00:03, 2742.59it/s]     40%|####      | 6568/16384 [00:02<00:03, 2747.68it/s]     42%|####1     | 6843/16384 [00:02<00:03, 2732.77it/s]     43%|####3     | 7117/16384 [00:02<00:03, 2718.16it/s]     45%|####5     | 7389/16384 [00:02<00:03, 2713.29it/s]     47%|####6     | 7663/16384 [00:02<00:03, 2720.83it/s]     48%|####8     | 7936/16384 [00:02<00:03, 2721.91it/s]     50%|#####     | 8209/16384 [00:03<00:03, 2723.82it/s]     52%|#####1    | 8482/16384 [00:03<00:02, 2720.14it/s]     53%|#####3    | 8755/16384 [00:03<00:02, 2720.17it/s]     55%|#####5    | 9029/16384 [00:03<00:02, 2724.20it/s]     57%|#####6    | 9303/16384 [00:03<00:02, 2727.88it/s]     58%|#####8    | 9576/16384 [00:03<00:02, 2727.26it/s]     60%|######    | 9855/16384 [00:03<00:02, 2744.13it/s]     62%|######1   | 10133/16384 [00:03<00:02, 2752.15it/s]     64%|######3   | 10409/16384 [00:03<00:02, 2753.62it/s]     65%|######5   | 10688/16384 [00:03<00:02, 2763.20it/s]     67%|######6   | 10965/16384 [00:04<00:01, 2753.06it/s]     69%|######8   | 11241/16384 [00:04<00:01, 2747.72it/s]     70%|#######   | 11518/16384 [00:04<00:01, 2751.93it/s]     72%|#######1  | 11795/16384 [00:04<00:01, 2755.24it/s]     74%|#######3  | 12071/16384 [00:04<00:01, 2746.86it/s]     75%|#######5  | 12346/16384 [00:04<00:01, 2745.19it/s]     77%|#######7  | 12621/16384 [00:04<00:01, 2736.60it/s]     79%|#######8  | 12895/16384 [00:04<00:01, 2734.26it/s]     80%|########  | 13169/16384 [00:04<00:01, 2729.96it/s]     82%|########2 | 13442/16384 [00:04<00:01, 2726.19it/s]     84%|########3 | 13720/16384 [00:05<00:00, 2741.69it/s]     85%|########5 | 13995/16384 [00:05<00:00, 2743.60it/s]     87%|########7 | 14270/16384 [00:05<00:00, 2735.70it/s]     89%|########8 | 14544/16384 [00:05<00:00, 2735.37it/s]     90%|######### | 14823/16384 [00:05<00:00, 2751.05it/s]     92%|#########2| 15099/16384 [00:05<00:00, 2742.57it/s]     94%|#########3| 15374/16384 [00:05<00:00, 2737.29it/s]     96%|#########5| 15648/16384 [00:05<00:00, 2730.10it/s]     97%|#########7| 15924/16384 [00:05<00:00, 2739.00it/s]     99%|#########8| 16198/16384 [00:05<00:00, 2723.24it/s]    100%|##########| 16384/16384 [00:06<00:00, 2729.55it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 271/16384 [00:00<00:05, 2707.02it/s]      3%|3         | 543/16384 [00:00<00:05, 2714.32it/s]      5%|4         | 815/16384 [00:00<00:05, 2715.17it/s]      7%|6         | 1088/16384 [00:00<00:05, 2717.39it/s]      8%|8         | 1360/16384 [00:00<00:05, 2705.69it/s]     10%|9         | 1632/16384 [00:00<00:05, 2708.31it/s]     12%|#1        | 1905/16384 [00:00<00:05, 2714.37it/s]     13%|#3        | 2178/16384 [00:00<00:05, 2718.89it/s]     15%|#4        | 2452/16384 [00:00<00:05, 2722.97it/s]     17%|#6        | 2725/16384 [00:01<00:05, 2723.74it/s]     18%|#8        | 3000/16384 [00:01<00:04, 2731.02it/s]     20%|#9        | 3274/16384 [00:01<00:04, 2728.11it/s]     22%|##1       | 3547/16384 [00:01<00:04, 2720.19it/s]     23%|##3       | 3820/16384 [00:01<00:04, 2719.66it/s]     25%|##4       | 4094/16384 [00:01<00:04, 2724.28it/s]     27%|##6       | 4371/16384 [00:01<00:04, 2735.62it/s]     28%|##8       | 4645/16384 [00:01<00:04, 2735.96it/s]     30%|###       | 4923/16384 [00:01<00:04, 2748.79it/s]     32%|###1      | 5198/16384 [00:01<00:04, 2745.92it/s]     33%|###3      | 5475/16384 [00:02<00:03, 2750.56it/s]     35%|###5      | 5751/16384 [00:02<00:03, 2753.12it/s]     37%|###6      | 6027/16384 [00:02<00:03, 2748.71it/s]     38%|###8      | 6302/16384 [00:02<00:03, 2741.26it/s]     40%|####      | 6577/16384 [00:02<00:03, 2736.31it/s]     42%|####1     | 6851/16384 [00:02<00:03, 2735.56it/s]     43%|####3     | 7125/16384 [00:02<00:03, 2734.88it/s]     45%|####5     | 7399/16384 [00:02<00:03, 2731.45it/s]     47%|####6     | 7674/16384 [00:02<00:03, 2734.00it/s]     49%|####8     | 7948/16384 [00:02<00:03, 2730.38it/s]     50%|#####     | 8223/16384 [00:03<00:02, 2735.87it/s]     52%|#####1    | 8503/16384 [00:03<00:02, 2752.47it/s]     54%|#####3    | 8781/16384 [00:03<00:02, 2760.56it/s]     55%|#####5    | 9060/16384 [00:03<00:02, 2766.76it/s]     57%|#####7    | 9340/16384 [00:03<00:02, 2775.40it/s]     59%|#####8    | 9620/16384 [00:03<00:02, 2781.88it/s]     60%|######    | 9899/16384 [00:03<00:02, 2782.77it/s]     62%|######2   | 10178/16384 [00:03<00:02, 2768.54it/s]     64%|######3   | 10456/16384 [00:03<00:02, 2771.68it/s]     66%|######5   | 10734/16384 [00:03<00:02, 2772.72it/s]     67%|######7   | 11012/16384 [00:04<00:01, 2762.81it/s]     69%|######8   | 11290/16384 [00:04<00:01, 2767.19it/s]     71%|#######   | 11568/16384 [00:04<00:01, 2768.79it/s]     72%|#######2  | 11845/16384 [00:04<00:01, 2762.10it/s]     74%|#######3  | 12122/16384 [00:04<00:01, 2752.53it/s]     76%|#######5  | 12398/16384 [00:04<00:01, 2751.98it/s]     77%|#######7  | 12674/16384 [00:04<00:01, 2750.90it/s]     79%|#######9  | 12950/16384 [00:04<00:01, 2751.92it/s]     81%|########  | 13228/16384 [00:04<00:01, 2759.34it/s]     82%|########2 | 13504/16384 [00:04<00:01, 2752.15it/s]     84%|########4 | 13780/16384 [00:05<00:00, 2754.19it/s]     86%|########5 | 14056/16384 [00:05<00:00, 2747.78it/s]     87%|########7 | 14331/16384 [00:05<00:00, 2745.52it/s]     89%|########9 | 14606/16384 [00:05<00:00, 2736.14it/s]     91%|######### | 14880/16384 [00:05<00:00, 2733.55it/s]     93%|#########2| 15157/16384 [00:05<00:00, 2742.45it/s]     94%|#########4| 15432/16384 [00:05<00:00, 2736.10it/s]     96%|#########5| 15706/16384 [00:05<00:00, 2735.69it/s]     98%|#########7| 15984/16384 [00:05<00:00, 2747.74it/s]     99%|#########9| 16264/16384 [00:05<00:00, 2761.49it/s]    100%|##########| 16384/16384 [00:05<00:00, 2744.95it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 277/16384 [00:00<00:05, 2764.66it/s]      3%|3         | 557/16384 [00:00<00:05, 2781.05it/s]      5%|5         | 836/16384 [00:00<00:05, 2779.03it/s]      7%|6         | 1116/16384 [00:00<00:05, 2783.67it/s]      9%|8         | 1395/16384 [00:00<00:05, 2757.79it/s]     10%|#         | 1673/16384 [00:00<00:05, 2763.91it/s]     12%|#1        | 1951/16384 [00:00<00:05, 2766.70it/s]     14%|#3        | 2228/16384 [00:00<00:05, 2716.72it/s]     15%|#5        | 2506/16384 [00:00<00:05, 2734.52it/s]     17%|#6        | 2784/16384 [00:01<00:04, 2746.24it/s]     19%|#8        | 3064/16384 [00:01<00:04, 2760.12it/s]     20%|##        | 3341/16384 [00:01<00:04, 2759.72it/s]     22%|##2       | 3620/16384 [00:01<00:04, 2766.63it/s]     24%|##3       | 3897/16384 [00:01<00:04, 2758.78it/s]     25%|##5       | 4174/16384 [00:01<00:04, 2761.02it/s]     27%|##7       | 4451/16384 [00:01<00:04, 2758.09it/s]     29%|##8       | 4728/16384 [00:01<00:04, 2761.46it/s]     31%|###       | 5006/16384 [00:01<00:04, 2765.91it/s]     32%|###2      | 5285/16384 [00:01<00:04, 2771.68it/s]     34%|###3      | 5563/16384 [00:02<00:03, 2769.62it/s]     36%|###5      | 5842/16384 [00:02<00:03, 2773.18it/s]     37%|###7      | 6120/16384 [00:02<00:03, 2769.46it/s]     39%|###9      | 6397/16384 [00:02<00:03, 2768.01it/s]     41%|####      | 6676/16384 [00:02<00:03, 2772.57it/s]     42%|####2     | 6954/16384 [00:02<00:03, 2770.57it/s]     44%|####4     | 7233/16384 [00:02<00:03, 2774.26it/s]     46%|####5     | 7511/16384 [00:02<00:03, 2767.59it/s]     48%|####7     | 7790/16384 [00:02<00:03, 2773.52it/s]     49%|####9     | 8069/16384 [00:02<00:02, 2777.07it/s]     51%|#####     | 8348/16384 [00:03<00:02, 2780.67it/s]     53%|#####2    | 8628/16384 [00:03<00:02, 2783.67it/s]     54%|#####4    | 8907/16384 [00:03<00:02, 2781.35it/s]     56%|#####6    | 9186/16384 [00:03<00:02, 2776.24it/s]     58%|#####7    | 9464/16384 [00:03<00:02, 2776.66it/s]     59%|#####9    | 9742/16384 [00:03<00:02, 2777.04it/s]     61%|######1   | 10020/16384 [00:03<00:02, 2774.81it/s]     63%|######2   | 10299/16384 [00:03<00:02, 2777.25it/s]     65%|######4   | 10577/16384 [00:03<00:02, 2773.10it/s]     66%|######6   | 10857/16384 [00:03<00:01, 2778.52it/s]     68%|######7   | 11135/16384 [00:04<00:01, 2770.30it/s]     70%|######9   | 11413/16384 [00:04<00:01, 2772.08it/s]     71%|#######1  | 11691/16384 [00:04<00:01, 2773.83it/s]     73%|#######3  | 11969/16384 [00:04<00:01, 2774.51it/s]     75%|#######4  | 12248/16384 [00:04<00:01, 2777.96it/s]     76%|#######6  | 12526/16384 [00:04<00:01, 2777.67it/s]     78%|#######8  | 12806/16384 [00:04<00:01, 2783.48it/s]     80%|#######9  | 13085/16384 [00:04<00:01, 2782.57it/s]     82%|########1 | 13364/16384 [00:04<00:01, 2776.15it/s]     83%|########3 | 13642/16384 [00:04<00:00, 2767.77it/s]     85%|########4 | 13919/16384 [00:05<00:00, 2765.37it/s]     87%|########6 | 14198/16384 [00:05<00:00, 2770.91it/s]     88%|########8 | 14476/16384 [00:05<00:00, 2765.77it/s]     90%|######### | 14754/16384 [00:05<00:00, 2768.33it/s]     92%|#########1| 15033/16384 [00:05<00:00, 2774.49it/s]     93%|#########3| 15312/16384 [00:05<00:00, 2778.29it/s]     95%|#########5| 15590/16384 [00:05<00:00, 2777.76it/s]     97%|#########6| 15869/16384 [00:05<00:00, 2779.78it/s]     99%|#########8| 16147/16384 [00:05<00:00, 2776.58it/s]    100%|##########| 16384/16384 [00:05<00:00, 2770.55it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 273/16384 [00:00<00:05, 2726.08it/s]      3%|3         | 547/16384 [00:00<00:05, 2733.79it/s]      5%|5         | 824/16384 [00:00<00:05, 2749.33it/s]      7%|6         | 1103/16384 [00:00<00:05, 2763.57it/s]      8%|8         | 1380/16384 [00:00<00:05, 2765.74it/s]     10%|#         | 1659/16384 [00:00<00:05, 2772.79it/s]     12%|#1        | 1938/16384 [00:00<00:05, 2777.34it/s]     14%|#3        | 2217/16384 [00:00<00:05, 2780.43it/s]     15%|#5        | 2496/16384 [00:00<00:04, 2783.37it/s]     17%|#6        | 2775/16384 [00:01<00:04, 2783.67it/s]     19%|#8        | 3055/16384 [00:01<00:04, 2786.79it/s]     20%|##        | 3334/16384 [00:01<00:04, 2786.35it/s]     22%|##2       | 3614/16384 [00:01<00:04, 2787.40it/s]     24%|##3       | 3893/16384 [00:01<00:04, 2773.56it/s]     25%|##5       | 4173/16384 [00:01<00:04, 2779.40it/s]     27%|##7       | 4452/16384 [00:01<00:04, 2781.85it/s]     29%|##8       | 4731/16384 [00:01<00:04, 2783.88it/s]     31%|###       | 5011/16384 [00:01<00:04, 2786.53it/s]     32%|###2      | 5290/16384 [00:01<00:03, 2787.22it/s]     34%|###3      | 5570/16384 [00:02<00:03, 2788.64it/s]     36%|###5      | 5849/16384 [00:02<00:03, 2787.60it/s]     37%|###7      | 6129/16384 [00:02<00:03, 2789.10it/s]     39%|###9      | 6408/16384 [00:02<00:03, 2788.19it/s]     41%|####      | 6688/16384 [00:02<00:03, 2790.92it/s]     43%|####2     | 6968/16384 [00:02<00:03, 2785.24it/s]     44%|####4     | 7247/16384 [00:02<00:03, 2785.95it/s]     46%|####5     | 7526/16384 [00:02<00:03, 2786.55it/s]     48%|####7     | 7805/16384 [00:02<00:03, 2781.60it/s]     49%|####9     | 8084/16384 [00:02<00:02, 2783.52it/s]     51%|#####1    | 8363/16384 [00:03<00:02, 2784.68it/s]     53%|#####2    | 8643/16384 [00:03<00:02, 2786.48it/s]     54%|#####4    | 8922/16384 [00:03<00:02, 2785.00it/s]     56%|#####6    | 9201/16384 [00:03<00:02, 2778.48it/s]     58%|#####7    | 9480/16384 [00:03<00:02, 2781.11it/s]     60%|#####9    | 9760/16384 [00:03<00:02, 2786.46it/s]     61%|######1   | 10039/16384 [00:03<00:02, 2787.46it/s]     63%|######2   | 10319/16384 [00:03<00:02, 2790.51it/s]     65%|######4   | 10599/16384 [00:03<00:02, 2791.24it/s]     66%|######6   | 10880/16384 [00:03<00:01, 2794.37it/s]     68%|######8   | 11160/16384 [00:04<00:01, 2795.99it/s]     70%|######9   | 11440/16384 [00:04<00:01, 2795.77it/s]     72%|#######1  | 11721/16384 [00:04<00:01, 2798.37it/s]     73%|#######3  | 12001/16384 [00:04<00:01, 2790.87it/s]     75%|#######4  | 12281/16384 [00:04<00:01, 2791.16it/s]     77%|#######6  | 12561/16384 [00:04<00:01, 2787.38it/s]     78%|#######8  | 12840/16384 [00:04<00:01, 2780.72it/s]     80%|########  | 13119/16384 [00:04<00:01, 2776.40it/s]     82%|########1 | 13399/16384 [00:04<00:01, 2781.61it/s]     83%|########3 | 13678/16384 [00:04<00:00, 2783.11it/s]     85%|########5 | 13958/16384 [00:05<00:00, 2786.25it/s]     87%|########6 | 14238/16384 [00:05<00:00, 2787.63it/s]     89%|########8 | 14517/16384 [00:05<00:00, 2786.94it/s]     90%|######### | 14797/16384 [00:05<00:00, 2788.95it/s]     92%|#########2| 15076/16384 [00:05<00:00, 2787.89it/s]     94%|#########3| 15356/16384 [00:05<00:00, 2789.56it/s]     95%|#########5| 15635/16384 [00:05<00:00, 2787.15it/s]     97%|#########7| 15915/16384 [00:05<00:00, 2790.83it/s]     99%|#########8| 16195/16384 [00:05<00:00, 2788.91it/s]    100%|##########| 16384/16384 [00:05<00:00, 2784.58it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 278/16384 [00:00<00:05, 2778.16it/s]      3%|3         | 558/16384 [00:00<00:05, 2790.89it/s]      5%|5         | 838/16384 [00:00<00:05, 2790.17it/s]      7%|6         | 1119/16384 [00:00<00:05, 2795.41it/s]      9%|8         | 1399/16384 [00:00<00:05, 2796.73it/s]     10%|#         | 1679/16384 [00:00<00:05, 2797.82it/s]     12%|#1        | 1960/16384 [00:00<00:05, 2799.75it/s]     14%|#3        | 2240/16384 [00:00<00:05, 2799.68it/s]     15%|#5        | 2521/16384 [00:00<00:04, 2800.74it/s]     17%|#7        | 2802/16384 [00:01<00:04, 2799.71it/s]     19%|#8        | 3084/16384 [00:01<00:04, 2803.02it/s]     21%|##        | 3365/16384 [00:01<00:04, 2786.86it/s]     22%|##2       | 3644/16384 [00:01<00:04, 2773.93it/s]     24%|##3       | 3922/16384 [00:01<00:04, 2757.50it/s]     26%|##5       | 4199/16384 [00:01<00:04, 2759.93it/s]     27%|##7       | 4476/16384 [00:01<00:04, 2756.94it/s]     29%|##9       | 4754/16384 [00:01<00:04, 2761.77it/s]     31%|###       | 5031/16384 [00:01<00:04, 2763.86it/s]     32%|###2      | 5309/16384 [00:01<00:04, 2766.55it/s]     34%|###4      | 5587/16384 [00:02<00:03, 2767.82it/s]     36%|###5      | 5865/16384 [00:02<00:03, 2769.34it/s]     37%|###7      | 6143/16384 [00:02<00:03, 2770.53it/s]     39%|###9      | 6421/16384 [00:02<00:03, 2767.49it/s]     41%|####      | 6698/16384 [00:02<00:03, 2763.19it/s]     43%|####2     | 6975/16384 [00:02<00:03, 2764.57it/s]     44%|####4     | 7253/16384 [00:02<00:03, 2767.41it/s]     46%|####5     | 7533/16384 [00:02<00:03, 2775.85it/s]     48%|####7     | 7813/16384 [00:02<00:03, 2782.98it/s]     49%|####9     | 8093/16384 [00:02<00:02, 2787.28it/s]     51%|#####1    | 8373/16384 [00:03<00:02, 2789.59it/s]     53%|#####2    | 8653/16384 [00:03<00:02, 2792.35it/s]     55%|#####4    | 8933/16384 [00:03<00:02, 2776.55it/s]     56%|#####6    | 9214/16384 [00:03<00:02, 2784.66it/s]     58%|#####7    | 9494/16384 [00:03<00:02, 2787.49it/s]     60%|#####9    | 9775/16384 [00:03<00:02, 2792.78it/s]     61%|######1   | 10055/16384 [00:03<00:02, 2793.39it/s]     63%|######3   | 10336/16384 [00:03<00:02, 2795.38it/s]     65%|######4   | 10616/16384 [00:03<00:02, 2796.13it/s]     67%|######6   | 10896/16384 [00:03<00:01, 2795.95it/s]     68%|######8   | 11177/16384 [00:04<00:01, 2797.92it/s]     70%|######9   | 11457/16384 [00:04<00:01, 2796.74it/s]     72%|#######1  | 11738/16384 [00:04<00:01, 2799.01it/s]     73%|#######3  | 12018/16384 [00:04<00:01, 2797.72it/s]     75%|#######5  | 12299/16384 [00:04<00:01, 2800.29it/s]     77%|#######6  | 12580/16384 [00:04<00:01, 2798.40it/s]     78%|#######8  | 12861/16384 [00:04<00:01, 2799.70it/s]     80%|########  | 13141/16384 [00:04<00:01, 2793.81it/s]     82%|########1 | 13422/16384 [00:04<00:01, 2795.99it/s]     84%|########3 | 13703/16384 [00:04<00:00, 2798.31it/s]     85%|########5 | 13984/16384 [00:05<00:00, 2800.26it/s]     87%|########7 | 14265/16384 [00:05<00:00, 2801.03it/s]     89%|########8 | 14546/16384 [00:05<00:00, 2800.12it/s]     90%|######### | 14827/16384 [00:05<00:00, 2802.76it/s]     92%|#########2| 15108/16384 [00:05<00:00, 2801.32it/s]     94%|#########3| 15389/16384 [00:05<00:00, 2803.81it/s]     96%|#########5| 15670/16384 [00:05<00:00, 2802.29it/s]     97%|#########7| 15951/16384 [00:05<00:00, 2803.94it/s]     99%|#########9| 16232/16384 [00:05<00:00, 2803.28it/s]    100%|##########| 16384/16384 [00:05<00:00, 2788.60it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 50 minutes  9.884 seconds)


.. _sphx_glr_download_tutorials_b_high_level_simulation_plot_e_switched_capacitor_digital_control.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_e_switched_capacitor_digital_control.py <plot_e_switched_capacitor_digital_control.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_e_switched_capacitor_digital_control.ipynb <plot_e_switched_capacitor_digital_control.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
