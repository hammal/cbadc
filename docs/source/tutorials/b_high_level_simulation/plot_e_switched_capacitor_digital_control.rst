
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/b_high_level_simulation/plot_e_switched_capacitor_digital_control.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_b_high_level_simulation_plot_e_switched_capacitor_digital_control.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_b_high_level_simulation_plot_e_switched_capacitor_digital_control.py:


Switched-Capacitor Digital Control
==================================

In this tutorial we show how to use switched-capacitor digital control
in combination with a continuous-time system.

.. GENERATED FROM PYTHON SOURCE LINES 8-13

.. code-block:: default

    import cbadc
    import scipy
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 14-48

Integration Node
----------------

Initially we consider a integration node as shown in the figure below.

.. image:: /images/RC-amp.svg
   :width: 500
   :align: center
   :alt: The RC integrator with switched-capacitor digital control.

Which is goverened by the differential equations

:math:`\dot{v}_{x_{\ell}}(t) = \frac{1}{C_{x_{\ell}}} \left( \frac{v_{\Gamma_{\ell}}(t) - v_{s_\ell}(t)}{R_{s}} - \frac{1}{R_{\beta_\ell}}  v_{x_{\ell - 1}}(t) \right)`

:math:`\dot{v}_{\Gamma_{\ell}}(t) = \frac{1}{2R_{s} C_{\Gamma_{\ell}}} \left( v_{s_\ell}(t) - v_{\Gamma_{\ell}}(t) \right)`

during phase :math:`\phi_1` and

:math:`\dot{v}_{x_{\ell}}(t)  =  - \frac{1}{R_{\beta_\ell} C_{x_{\ell}}} v_{x_{\ell - 1}}(t)`

:math:`\dot{v}_{\Gamma_{\ell}}(t) = - \frac{1}{2 R_{s} C_{\Gamma_{\ell}}}  v_{\Gamma_{\ell}}(t)`

during phase :math:`\bar{\phi}_1` where a full control phase :math:`T = T_{\phi_1} + T_{\bar{\phi}_1}`.

To simulate this control-bounded converter we need to specify the whole system which for this
tutorial will be a chain-of-integrators system as shown below.

.. image:: /images/chainOfIntegratorsGeneral.svg
   :width: 1500
   :align: center
   :alt: The chain-of-integrators ADC.

where the digital controls are implemented as above.
Thus the system equations can be written as

.. GENERATED FROM PYTHON SOURCE LINES 48-65

.. code-block:: default


    N = 4
    M = N

    C_x = 1e-9
    C_Gamma = C_x / 2
    R_s = 1e1
    R_beta = 1e3

    beta = 1 / (R_beta * C_x)
    T = 1 / (2 * beta)

    A = beta * np.eye(N, k=-1)
    B = np.zeros(N)
    B[0] = beta
    CT = np.eye(N)








.. GENERATED FROM PYTHON SOURCE LINES 66-84

Simplifying the Differential Equation
-------------------------------------

Due to the virtual ground of the op-amp integrator we can treat the
second differential equation (the one involving :math:`v_{\Gamma_\ell}(t)`)
seperately. Specifically, if we assume the
capacitor :math:`C_{\Gamma}` empties completely during :math:`\bar{\phi}_1`,
and that :math:`v_{s_\ell} = \{\pm 1\}` for all :math:`t`, the digital
control's effect on the analog system can be written as

:math:`v_{\Gamma_\ell}(t) - v_{s_\ell}(t) = v_{s_\ell}(t) \cdot e^{-t/\tau}`

where :math:`\tau=R_s C_{\Gamma_\ell}`.

This can be modeled by instantiating the digital control
:class:`cbadc.digital_control.DigitalControl`
using the impulse response :func:`cbadc.digital_control.RCImpulseResponse`
as

.. GENERATED FROM PYTHON SOURCE LINES 84-98

.. code-block:: default


    impulse_response = cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma)
    digital_control_sc = cbadc.digital_control.DigitalControl(
        cbadc.analog_signal.Clock(T), M, impulse_response=impulse_response
    )

    Gamma = 1 / (R_s * C_x) * np.eye(M)
    Gamma_tildeT = -np.eye(M)

    analog_system_sc = cbadc.analog_system.AnalogSystem(A, B, CT, Gamma, Gamma_tildeT)

    print(digital_control_sc)
    print(analog_system_sc)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ================================================================================

    The Digital Control is parameterized as:

    --------------------------------------------------------------------------------

    clock:
    Analog signal returns constant 0, i.e., maps t |-> 0.

    M:
    4
    ================================================================================
        
    The analog system is parameterized as:
    A =
    [[ 0.00e+00  0.00e+00  0.00e+00  0.00e+00]
     [ 1.00e+06  0.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  1.00e+06  0.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  1.00e+06  0.00e+00]],
    B =
    [[ 1.00e+06]
     [ 0.00e+00]
     [ 0.00e+00]
     [ 0.00e+00]],
    CT = 
    [[ 1.00e+00  0.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  1.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  1.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  0.00e+00  1.00e+00]],
    Gamma =
    [[ 1.00e+08  0.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  1.00e+08  0.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  1.00e+08  0.00e+00]
     [ 0.00e+00  0.00e+00  0.00e+00  1.00e+08]],
    Gamma_tildeT =
    [[-1.00e+00 -0.00e+00 -0.00e+00 -0.00e+00]
     [-0.00e+00 -1.00e+00 -0.00e+00 -0.00e+00]
     [-0.00e+00 -0.00e+00 -1.00e+00 -0.00e+00]
     [-0.00e+00 -0.00e+00 -0.00e+00 -1.00e+00]], and D=[[ 0.00e+00]
     [ 0.00e+00]
     [ 0.00e+00]
     [ 0.00e+00]]




.. GENERATED FROM PYTHON SOURCE LINES 99-102

Visualizing the State Trajectories
----------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 102-155

.. code-block:: default

    OSR = 32
    amplitude = 1.0
    analog_signal = cbadc.analog_signal.Sinusoidal(amplitude, 1 / T / (OSR << 4))
    Ts = T / 100.0
    size = 1 << 12

    simulator_sc = cbadc.simulator.extended_simulation_result(
        cbadc.simulator.get_simulator(
            analog_system_sc,
            digital_control_sc,
            [analog_signal],
            cbadc.analog_signal.Clock(Ts),
            simulator_type=cbadc.simulator.SimulatorType.analytical,
        )
    )


    analog_system_ref = cbadc.analog_system.AnalogSystem(
        A, B, CT, np.eye(N) * beta, Gamma_tildeT
    )
    digital_control_ref = cbadc.digital_control.DigitalControl(
        cbadc.analog_signal.Clock(T), M
    )
    simulator_ref = cbadc.simulator.extended_simulation_result(
        cbadc.simulator.get_simulator(
            analog_system_ref,
            digital_control_ref,
            [analog_signal],
            cbadc.analog_signal.Clock(Ts),
            simulator_type=cbadc.simulator.SimulatorType.analytical,
        )
    )

    states = np.zeros((size, N))
    states_ref = np.zeros_like(states)
    t = Ts * np.arange(size)

    # Simulations
    for time_step in cbadc.utilities.show_status(range(size)):
        states[time_step, :] = next(simulator_sc)["analog_state"]
        states_ref[time_step, :] = next(simulator_ref)["analog_state"]

    # Plot state trajectories
    for index in range(N):
        plt.figure()
        plt.title("Analog state trajectories for " + f"$x_{index + 1}(t)$")
        plt.plot(t / T, states[:, index], label="SC")
        plt.plot(t / T, states_ref[:, index], label="ref")
        plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
        plt.xlabel("$t/T$")
        plt.legend()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_001.png
         :alt: Analog state trajectories for $x_1(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_002.png
         :alt: Analog state trajectories for $x_2(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_003.png
         :alt: Analog state trajectories for $x_3(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_004.png
         :alt: Analog state trajectories for $x_4(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/4096 [00:00<?, ?it/s]      7%|7         | 289/4096 [00:00<00:01, 2884.00it/s]     14%|#4        | 578/4096 [00:00<00:01, 2870.30it/s]     21%|##1       | 869/4096 [00:00<00:01, 2883.71it/s]     28%|##8       | 1158/4096 [00:00<00:01, 2859.71it/s]     35%|###5      | 1445/4096 [00:00<00:00, 2855.69it/s]     42%|####2     | 1731/4096 [00:00<00:00, 2849.01it/s]     49%|####9     | 2021/4096 [00:00<00:00, 2865.20it/s]     56%|#####6    | 2308/4096 [00:00<00:00, 2855.06it/s]     63%|######3   | 2594/4096 [00:00<00:00, 2855.12it/s]     70%|#######   | 2882/4096 [00:01<00:00, 2860.39it/s]     77%|#######7  | 3172/4096 [00:01<00:00, 2871.84it/s]     84%|########4 | 3460/4096 [00:01<00:00, 2865.46it/s]     92%|#########1| 3752/4096 [00:01<00:00, 2881.11it/s]     99%|#########8| 4041/4096 [00:01<00:00, 2879.29it/s]    100%|##########| 4096/4096 [00:01<00:00, 2868.17it/s]




.. GENERATED FROM PYTHON SOURCE LINES 156-159

Filter Coefficients
----------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 159-273

.. code-block:: default

    K1 = 1 << 8
    K2 = K1
    eta2 = (
        np.linalg.norm(
            analog_system_sc.transfer_function_matrix(np.array([2 * np.pi / T / OSR]))
        ).flatten()
        ** 2
    )

    # prepending an anti-aliasing filter
    # omega_3dB = 2 * np.pi / T / 16
    # wp = omega_3dB / 2.0
    # ws = omega_3dB
    # gpass = 1.0
    # gstop = 60
    # filter = cbadc.analog_system.IIRDesign(wp, ws, gpass, gstop, ftype="ellip")

    # Post-filtering FIR filter
    fir_filter_numtaps = K1 + K2
    f_cutoff = 1.0 / OSR * 2
    fir_filter = scipy.signal.firwin(fir_filter_numtaps, f_cutoff)


    digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
        # cbadc.analog_system.chain([filter, analog_system_sc]),
        analog_system_sc,
        digital_control_sc,
        eta2,
        K1,
        K2,
    )

    # Apply FIR filter
    digital_estimator_sc.convolve(fir_filter)

    digital_estimator_ref = cbadc.digital_estimator.FIRFilter(
        # cbadc.analog_system.chain([filter, analog_system_ref]),
        analog_system_ref,
        digital_control_ref,
        eta2,
        K1,
        K2,
    )

    # Apply FIR filter
    digital_estimator_ref.convolve(fir_filter)

    plt.figure()
    plt.semilogy(
        np.arange(-K1, K2),
        np.linalg.norm(np.array(digital_estimator_sc.h[0, :, :]), axis=1)[:],
        label="Switched Capacitor Filter",
    )
    plt.semilogy(
        np.arange(-K1, K2),
        np.linalg.norm(np.array(digital_estimator_ref.h[0, :, :]), axis=1)[:],
        label="Ref Filter",
    )

    plt.legend()
    plt.xlabel("filter tap k")
    plt.ylabel("$|| \mathbf{h} [k]||_2$")
    plt.xlim((-K1, K2))
    # plt.ylim((1e-16, 1))
    plt.grid(which="both")

    # Logspace frequencies
    frequencies = np.logspace(-3, 0, 100)
    omega = 4 * np.pi * beta * frequencies

    plt.figure()
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(np.abs(digital_estimator_sc.signal_transfer_function(omega))).flatten(),
        label="$STF(\omega)$ SC",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(np.abs(digital_estimator_ref.signal_transfer_function(omega))).flatten(),
        label="$STF(\omega)$ ref",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(
            np.linalg.norm(
                digital_estimator_sc.noise_transfer_function(omega)[:, 0, :], axis=0
            )
        ),
        "--",
        label="$ || NTF(\omega) ||_2 $ SC",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(
            np.linalg.norm(
                digital_estimator_ref.noise_transfer_function(omega)[:, 0, :], axis=0
            )
        ),
        "--",
        label="$ || NTF(\omega) ||_2 $ ref",
    )
    # Add labels and legends to figure
    plt.legend()
    plt.grid(which="both")
    plt.title("Signal and noise transfer functions")
    plt.xlabel("$f$ [Hz]")
    plt.ylabel("dB")
    # plt.xlim((1e2, 5e3))
    plt.gcf().tight_layout()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_005.png
         :alt: plot e switched capacitor digital control
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_006.png
         :alt: Signal and noise transfer functions
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 274-278

Mismatch Sensitivity to Switch Resistance
-----------------------------------------



.. GENERATED FROM PYTHON SOURCE LINES 278-351

.. code-block:: default


    mismatch_in_percent = np.arange(3) * 10

    size = 1 << 14
    t = np.arange(size) * T

    estimates = []

    for mismatch in mismatch_in_percent:
        digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_sc]),
            analog_system_sc,
            cbadc.digital_control.DigitalControl(
                cbadc.analog_signal.Clock(T),
                M,
                impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
            ),
            eta2,
            K1,
            K2,
        )

        # Apply FIR filter
        digital_estimator_sc.convolve(fir_filter)

        digital_estimator_sc(
            cbadc.simulator.get_simulator(
                cbadc.analog_system.AnalogSystem(
                    A,
                    B,
                    CT,
                    1 / ((1 + mismatch / 100) * R_s * C_x) * np.eye(M),
                    Gamma_tildeT,
                ),
                cbadc.digital_control.DigitalControl(
                    cbadc.analog_signal.Clock(T),
                    M,
                    impulse_response=cbadc.analog_signal.RCImpulseResponse(
                        (1 + mismatch / 100) * R_s * C_Gamma
                    ),
                ),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )
        u_hat = np.zeros(size)
        for index in cbadc.utilities.show_status(range(size)):
            u_hat[index] = next(digital_estimator_sc)
        estimates.append(u_hat)

    # Plot estimates in time domain
    plt.figure()
    plt.title("Estimates")
    for index, mismatch in enumerate(mismatch_in_percent):
        plt.plot(t / T, estimates[index], label=f"Mismatch R_s {mismatch}%")
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 100))
    plt.legend()

    # Plot estimates PSD
    plt.figure()
    plt.title("Estimates PSD")
    for index, mismatch in enumerate(mismatch_in_percent):
        f, psd = cbadc.utilities.compute_power_spectral_density(
            estimates[index][K1 + K2 :], fs=1.0 / T
        )
        plt.semilogx(f, 10 * np.log10(psd), label=f"Mismatch R_s {mismatch}%")
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("f [Hz]")
    plt.ylabel("V^2/Hz [dB]")
    plt.legend()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_007.png
         :alt: Estimates
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_008.png
         :alt: Estimates PSD
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_008.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/16384 [00:00<?, ?it/s]      3%|3         | 547/16384 [00:00<00:02, 5461.92it/s]      7%|6         | 1095/16384 [00:00<00:02, 5467.55it/s]     10%|#         | 1642/16384 [00:00<00:02, 5468.14it/s]     13%|#3        | 2191/16384 [00:00<00:02, 5476.40it/s]     17%|#6        | 2741/16384 [00:00<00:02, 5483.82it/s]     20%|##        | 3290/16384 [00:00<00:02, 5467.82it/s]     23%|##3       | 3837/16384 [00:00<00:02, 5463.33it/s]     27%|##6       | 4384/16384 [00:00<00:02, 5453.44it/s]     30%|###       | 4931/16384 [00:00<00:02, 5457.46it/s]     33%|###3      | 5477/16384 [00:01<00:01, 5457.97it/s]     37%|###6      | 6023/16384 [00:01<00:01, 5444.98it/s]     40%|####      | 6568/16384 [00:01<00:01, 5436.66it/s]     43%|####3     | 7114/16384 [00:01<00:01, 5441.78it/s]     47%|####6     | 7666/16384 [00:01<00:01, 5462.44it/s]     50%|#####     | 8213/16384 [00:01<00:01, 5454.47it/s]     53%|#####3    | 8763/16384 [00:01<00:01, 5467.12it/s]     57%|#####6    | 9310/16384 [00:01<00:01, 5462.72it/s]     60%|######    | 9857/16384 [00:01<00:01, 5453.23it/s]     64%|######3   | 10407/16384 [00:01<00:01, 5466.09it/s]     67%|######6   | 10954/16384 [00:02<00:00, 5459.05it/s]     70%|#######   | 11500/16384 [00:02<00:00, 5449.90it/s]     74%|#######3  | 12051/16384 [00:02<00:00, 5466.13it/s]     77%|#######6  | 12602/16384 [00:02<00:00, 5476.32it/s]     80%|########  | 13150/16384 [00:02<00:00, 5474.30it/s]     84%|########3 | 13698/16384 [00:02<00:00, 5434.29it/s]     87%|########6 | 14242/16384 [00:02<00:00, 5420.55it/s]     90%|######### | 14785/16384 [00:02<00:00, 5416.14it/s]     94%|#########3| 15327/16384 [00:02<00:00, 5403.13it/s]     97%|#########6| 15874/16384 [00:02<00:00, 5422.06it/s]    100%|##########| 16384/16384 [00:03<00:00, 5451.26it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      3%|3         | 519/16384 [00:00<00:03, 5184.97it/s]      6%|6         | 1058/16384 [00:00<00:02, 5305.34it/s]     10%|9         | 1591/16384 [00:00<00:02, 5310.56it/s]     13%|#2        | 2123/16384 [00:00<00:02, 5306.66it/s]     16%|#6        | 2663/16384 [00:00<00:02, 5339.66it/s]     20%|#9        | 3208/16384 [00:00<00:02, 5374.01it/s]     23%|##2       | 3747/16384 [00:00<00:02, 5376.32it/s]     26%|##6       | 4293/16384 [00:00<00:02, 5400.03it/s]     30%|##9       | 4837/16384 [00:00<00:02, 5409.47it/s]     33%|###2      | 5378/16384 [00:01<00:02, 5407.15it/s]     36%|###6      | 5923/16384 [00:01<00:01, 5417.98it/s]     39%|###9      | 6465/16384 [00:01<00:01, 5408.35it/s]     43%|####2     | 7014/16384 [00:01<00:01, 5431.13it/s]     46%|####6     | 7558/16384 [00:01<00:01, 5432.99it/s]     49%|####9     | 8103/16384 [00:01<00:01, 5436.14it/s]     53%|#####2    | 8649/16384 [00:01<00:01, 5440.71it/s]     56%|#####6    | 9194/16384 [00:01<00:01, 5429.50it/s]     59%|#####9    | 9740/16384 [00:01<00:01, 5436.45it/s]     63%|######2   | 10284/16384 [00:01<00:01, 5431.13it/s]     66%|######6   | 10828/16384 [00:02<00:01, 5410.99it/s]     69%|######9   | 11374/16384 [00:02<00:00, 5425.00it/s]     73%|#######2  | 11917/16384 [00:02<00:00, 5401.52it/s]     76%|#######6  | 12463/16384 [00:02<00:00, 5418.44it/s]     79%|#######9  | 13009/16384 [00:02<00:00, 5428.81it/s]     83%|########2 | 13556/16384 [00:02<00:00, 5438.23it/s]     86%|########6 | 14101/16384 [00:02<00:00, 5440.71it/s]     89%|########9 | 14646/16384 [00:02<00:00, 5428.01it/s]     93%|#########2| 15189/16384 [00:02<00:00, 5412.68it/s]     96%|#########6| 15731/16384 [00:02<00:00, 5414.12it/s]     99%|#########9| 16277/16384 [00:03<00:00, 5424.97it/s]    100%|##########| 16384/16384 [00:03<00:00, 5408.69it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      3%|3         | 544/16384 [00:00<00:02, 5432.88it/s]      7%|6         | 1090/16384 [00:00<00:02, 5444.44it/s]     10%|9         | 1637/16384 [00:00<00:02, 5455.36it/s]     13%|#3        | 2187/16384 [00:00<00:02, 5469.78it/s]     17%|#6        | 2734/16384 [00:00<00:02, 5463.73it/s]     20%|##        | 3281/16384 [00:00<00:02, 5460.61it/s]     23%|##3       | 3828/16384 [00:00<00:02, 5460.63it/s]     27%|##6       | 4376/16384 [00:00<00:02, 5465.33it/s]     30%|###       | 4923/16384 [00:00<00:02, 5461.25it/s]     33%|###3      | 5470/16384 [00:01<00:02, 5451.01it/s]     37%|###6      | 6019/16384 [00:01<00:01, 5460.02it/s]     40%|####      | 6567/16384 [00:01<00:01, 5464.58it/s]     43%|####3     | 7114/16384 [00:01<00:01, 5422.76it/s]     47%|####6     | 7659/16384 [00:01<00:01, 5430.52it/s]     50%|#####     | 8203/16384 [00:01<00:01, 5426.04it/s]     53%|#####3    | 8750/16384 [00:01<00:01, 5437.15it/s]     57%|#####6    | 9294/16384 [00:01<00:01, 5412.34it/s]     60%|######    | 9837/16384 [00:01<00:01, 5416.44it/s]     63%|######3   | 10385/16384 [00:01<00:01, 5432.95it/s]     67%|######6   | 10929/16384 [00:02<00:01, 5422.82it/s]     70%|#######   | 11476/16384 [00:02<00:00, 5434.85it/s]     73%|#######3  | 12021/16384 [00:02<00:00, 5436.44it/s]     77%|#######6  | 12568/16384 [00:02<00:00, 5445.51it/s]     80%|########  | 13113/16384 [00:02<00:00, 5440.92it/s]     83%|########3 | 13658/16384 [00:02<00:00, 5442.45it/s]     87%|########6 | 14203/16384 [00:02<00:00, 5438.73it/s]     90%|######### | 14747/16384 [00:02<00:00, 5433.48it/s]     93%|#########3| 15291/16384 [00:02<00:00, 5393.96it/s]     97%|#########6| 15831/16384 [00:02<00:00, 5368.33it/s]    100%|#########9| 16370/16384 [00:03<00:00, 5374.66it/s]    100%|##########| 16384/16384 [00:03<00:00, 5430.46it/s]

    <matplotlib.legend.Legend object at 0x1777afeb0>



.. GENERATED FROM PYTHON SOURCE LINES 352-355

Clock Jitter Sensitivity
------------------------


.. GENERATED FROM PYTHON SOURCE LINES 355-483

.. code-block:: default

    jitter_std = np.power(10.0, np.arange(-6, 0)) * T
    # jitter_std = np.arange(3) * T * 0.3
    clock_jitter = [lambda: (np.random.random() - 0.5) * std for std in jitter_std]

    size = 1 << 14
    t = np.arange(size) * T

    estimates = []
    estimates_ref = []

    for jitter in clock_jitter:
        digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_sc]),
            analog_system_sc,
            cbadc.digital_control.DigitalControl(
                cbadc.analog_signal.Clock(T),
                M,
                impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
            ),
            eta2,
            K1,
            K2,
            solver_type=cbadc.digital_estimator.FilterComputationBackend.mpmath,
        )

        # Apply FIR filter
        # digital_estimator_sc.convolve(fir_filter)

        digital_estimator_sc(
            cbadc.simulator.get_simulator(
                analog_system_sc,
                cbadc.digital_control.DigitalControl(
                    cbadc.analog_signal.Clock(T),
                    M,
                    impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
                ),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )

        digital_estimator_ref = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_ref]),
            analog_system_ref,
            cbadc.digital_control.DigitalControl(cbadc.analog_signal.Clock(T), M),
            eta2,
            K1,
            K2,
            solver_type=cbadc.digital_estimator.FilterComputationBackend.mpmath,
        )

        # Apply FIR filter
        # digital_estimator_ref.convolve(fir_filter)

        digital_estimator_ref(
            cbadc.simulator.get_simulator(
                analog_system_ref,
                cbadc.digital_control.DigitalControl(cbadc.analog_signal.Clock(T), M),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )

        u_hat = np.zeros(size)
        u_hat_ref = np.zeros_like(u_hat)
        digital_estimator_sc.warm_up()
        digital_estimator_ref.warm_up()
        for index in cbadc.utilities.show_status(range(size)):
            u_hat[index] = next(digital_estimator_sc)
            u_hat_ref[index] = next(digital_estimator_ref)
        estimates.append(u_hat)
        estimates_ref.append(u_hat_ref)

    # Plot estimates in time domain
    plt.figure()
    plt.title("Estimates")
    for index, jitter in enumerate(clock_jitter):
        plt.plot(
            t / T,
            estimates[index],
            label=f"Std / T = {np.round(jitter_std[index] / T * 100, 3)}%",
        )
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 1000))
    plt.legend()

    # Plot estimates in time domain
    plt.figure()
    plt.title("Ref Estimates")
    for index, jitter in enumerate(clock_jitter):
        plt.plot(
            t / T,
            estimates_ref[index],
            label=f"Ref Std / T = {np.round(jitter_std[index] / T * 100, 3)}%",
        )
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 1000))
    plt.legend()


    # Plot estimates PSD
    for index, jitter in enumerate(clock_jitter):
        plt.figure()
        plt.title("Estimates PSD Clock Jitter")

        f, psd = cbadc.utilities.compute_power_spectral_density(
            estimates[index][K1 + K2 :], fs=1.0 / T
        )
        f_ref, psd_ref = cbadc.utilities.compute_power_spectral_density(
            estimates_ref[index][K1 + K2 :], fs=1.0 / T
        )
        plt.semilogx(
            f,
            10 * np.log10(psd),
            label=f"SC (Std/T) = +- {np.round(jitter_std[index] / T * 100, 3)}%",
        )
        plt.semilogx(
            f_ref,
            10 * np.log10(psd_ref),
            "--",
            label=f"Ref (Std/T) = +- {np.round(jitter_std[index] / T  * 100, 3)}%",
        )
        plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
        plt.xlabel("f [Hz]")
        plt.ylabel("V^2/Hz [dB]")
        plt.legend()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_009.png
         :alt: Estimates
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_010.png
         :alt: Ref Estimates
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_011.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_011.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_012.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_012.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_013.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_014.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_014.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_015.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_015.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_016.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_016.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 265/16384 [00:00<00:06, 2648.01it/s]      3%|3         | 530/16384 [00:00<00:05, 2646.54it/s]      5%|4         | 795/16384 [00:00<00:05, 2635.92it/s]      6%|6         | 1059/16384 [00:00<00:05, 2629.88it/s]      8%|8         | 1326/16384 [00:00<00:05, 2640.77it/s]     10%|9         | 1594/16384 [00:00<00:05, 2652.19it/s]     11%|#1        | 1860/16384 [00:00<00:05, 2650.61it/s]     13%|#2        | 2126/16384 [00:00<00:05, 2647.29it/s]     15%|#4        | 2391/16384 [00:00<00:05, 2633.73it/s]     16%|#6        | 2656/16384 [00:01<00:05, 2638.29it/s]     18%|#7        | 2924/16384 [00:01<00:05, 2649.27it/s]     19%|#9        | 3190/16384 [00:01<00:04, 2649.98it/s]     21%|##1       | 3456/16384 [00:01<00:04, 2652.08it/s]     23%|##2       | 3722/16384 [00:01<00:04, 2644.79it/s]     24%|##4       | 3988/16384 [00:01<00:04, 2647.49it/s]     26%|##5       | 4253/16384 [00:01<00:04, 2647.72it/s]     28%|##7       | 4518/16384 [00:01<00:04, 2642.79it/s]     29%|##9       | 4783/16384 [00:01<00:04, 2636.39it/s]     31%|###       | 5048/16384 [00:01<00:04, 2639.17it/s]     32%|###2      | 5312/16384 [00:02<00:04, 2638.72it/s]     34%|###4      | 5578/16384 [00:02<00:04, 2642.32it/s]     36%|###5      | 5844/16384 [00:02<00:03, 2646.07it/s]     37%|###7      | 6112/16384 [00:02<00:03, 2653.96it/s]     39%|###8      | 6378/16384 [00:02<00:03, 2653.58it/s]     41%|####      | 6646/16384 [00:02<00:03, 2658.87it/s]     42%|####2     | 6912/16384 [00:02<00:03, 2638.92it/s]     44%|####3     | 7176/16384 [00:02<00:03, 2638.69it/s]     45%|####5     | 7442/16384 [00:02<00:03, 2642.36it/s]     47%|####7     | 7707/16384 [00:02<00:03, 2643.16it/s]     49%|####8     | 7975/16384 [00:03<00:03, 2652.95it/s]     50%|#####     | 8241/16384 [00:03<00:03, 2641.93it/s]     52%|#####1    | 8506/16384 [00:03<00:02, 2642.92it/s]     54%|#####3    | 8771/16384 [00:03<00:02, 2630.17it/s]     55%|#####5    | 9035/16384 [00:03<00:02, 2621.08it/s]     57%|#####6    | 9299/16384 [00:03<00:02, 2624.86it/s]     58%|#####8    | 9562/16384 [00:03<00:02, 2615.34it/s]     60%|#####9    | 9825/16384 [00:03<00:02, 2619.22it/s]     62%|######1   | 10088/16384 [00:03<00:02, 2622.29it/s]     63%|######3   | 10356/16384 [00:03<00:02, 2636.61it/s]     65%|######4   | 10625/16384 [00:04<00:02, 2652.38it/s]     66%|######6   | 10891/16384 [00:04<00:02, 2649.52it/s]     68%|######8   | 11156/16384 [00:04<00:01, 2648.00it/s]     70%|######9   | 11422/16384 [00:04<00:01, 2650.94it/s]     71%|#######1  | 11688/16384 [00:04<00:01, 2652.18it/s]     73%|#######2  | 11954/16384 [00:04<00:01, 2653.44it/s]     75%|#######4  | 12222/16384 [00:04<00:01, 2660.52it/s]     76%|#######6  | 12489/16384 [00:04<00:01, 2655.66it/s]     78%|#######7  | 12756/16384 [00:04<00:01, 2657.89it/s]     79%|#######9  | 13022/16384 [00:04<00:01, 2650.94it/s]     81%|########1 | 13289/16384 [00:05<00:01, 2655.15it/s]     83%|########2 | 13555/16384 [00:05<00:01, 2648.63it/s]     84%|########4 | 13823/16384 [00:05<00:00, 2656.10it/s]     86%|########6 | 14091/16384 [00:05<00:00, 2660.15it/s]     88%|########7 | 14358/16384 [00:05<00:00, 2654.66it/s]     89%|########9 | 14624/16384 [00:05<00:00, 2650.36it/s]     91%|######### | 14891/16384 [00:05<00:00, 2654.64it/s]     93%|#########2| 15157/16384 [00:05<00:00, 2654.12it/s]     94%|#########4| 15424/16384 [00:05<00:00, 2656.89it/s]     96%|#########5| 15690/16384 [00:05<00:00, 2654.92it/s]     97%|#########7| 15956/16384 [00:06<00:00, 2650.87it/s]     99%|#########9| 16222/16384 [00:06<00:00, 2643.26it/s]    100%|##########| 16384/16384 [00:06<00:00, 2645.72it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 267/16384 [00:00<00:06, 2666.18it/s]      3%|3         | 541/16384 [00:00<00:05, 2706.73it/s]      5%|4         | 814/16384 [00:00<00:05, 2713.06it/s]      7%|6         | 1088/16384 [00:00<00:05, 2722.19it/s]      8%|8         | 1362/16384 [00:00<00:05, 2726.64it/s]     10%|9         | 1635/16384 [00:00<00:05, 2725.61it/s]     12%|#1        | 1908/16384 [00:00<00:05, 2720.31it/s]     13%|#3        | 2182/16384 [00:00<00:05, 2725.88it/s]     15%|#4        | 2455/16384 [00:00<00:05, 2726.13it/s]     17%|#6        | 2728/16384 [00:01<00:05, 2719.77it/s]     18%|#8        | 3001/16384 [00:01<00:04, 2720.71it/s]     20%|#9        | 3276/16384 [00:01<00:04, 2726.78it/s]     22%|##1       | 3550/16384 [00:01<00:04, 2730.55it/s]     23%|##3       | 3826/16384 [00:01<00:04, 2737.98it/s]     25%|##5       | 4100/16384 [00:01<00:04, 2735.10it/s]     27%|##6       | 4374/16384 [00:01<00:04, 2732.41it/s]     28%|##8       | 4648/16384 [00:01<00:04, 2734.04it/s]     30%|###       | 4922/16384 [00:01<00:04, 2730.31it/s]     32%|###1      | 5196/16384 [00:01<00:04, 2721.77it/s]     33%|###3      | 5469/16384 [00:02<00:04, 2717.75it/s]     35%|###5      | 5743/16384 [00:02<00:03, 2721.94it/s]     37%|###6      | 6017/16384 [00:02<00:03, 2724.70it/s]     38%|###8      | 6292/16384 [00:02<00:03, 2730.11it/s]     40%|####      | 6566/16384 [00:02<00:03, 2727.66it/s]     42%|####1     | 6839/16384 [00:02<00:03, 2727.68it/s]     43%|####3     | 7112/16384 [00:02<00:03, 2722.96it/s]     45%|####5     | 7385/16384 [00:02<00:03, 2719.84it/s]     47%|####6     | 7657/16384 [00:02<00:03, 2709.75it/s]     48%|####8     | 7931/16384 [00:02<00:03, 2716.38it/s]     50%|#####     | 8206/16384 [00:03<00:03, 2725.54it/s]     52%|#####1    | 8479/16384 [00:03<00:02, 2721.86it/s]     53%|#####3    | 8754/16384 [00:03<00:02, 2729.91it/s]     55%|#####5    | 9029/16384 [00:03<00:02, 2733.22it/s]     57%|#####6    | 9303/16384 [00:03<00:02, 2733.85it/s]     58%|#####8    | 9578/16384 [00:03<00:02, 2736.26it/s]     60%|######    | 9852/16384 [00:03<00:02, 2728.24it/s]     62%|######1   | 10125/16384 [00:03<00:02, 2727.59it/s]     63%|######3   | 10398/16384 [00:03<00:02, 2713.89it/s]     65%|######5   | 10673/16384 [00:03<00:02, 2723.02it/s]     67%|######6   | 10947/16384 [00:04<00:01, 2725.38it/s]     68%|######8   | 11222/16384 [00:04<00:01, 2730.55it/s]     70%|#######   | 11496/16384 [00:04<00:01, 2729.84it/s]     72%|#######1  | 11772/16384 [00:04<00:01, 2738.11it/s]     74%|#######3  | 12046/16384 [00:04<00:01, 2734.89it/s]     75%|#######5  | 12320/16384 [00:04<00:01, 2734.32it/s]     77%|#######6  | 12595/16384 [00:04<00:01, 2738.60it/s]     79%|#######8  | 12869/16384 [00:04<00:01, 2738.52it/s]     80%|########  | 13143/16384 [00:04<00:01, 2729.17it/s]     82%|########1 | 13416/16384 [00:04<00:01, 2727.48it/s]     84%|########3 | 13690/16384 [00:05<00:00, 2728.71it/s]     85%|########5 | 13963/16384 [00:05<00:00, 2727.71it/s]     87%|########6 | 14237/16384 [00:05<00:00, 2729.18it/s]     89%|########8 | 14512/16384 [00:05<00:00, 2732.95it/s]     90%|######### | 14786/16384 [00:05<00:00, 2732.13it/s]     92%|#########1| 15060/16384 [00:05<00:00, 2730.60it/s]     94%|#########3| 15334/16384 [00:05<00:00, 2727.22it/s]     95%|#########5| 15608/16384 [00:05<00:00, 2728.57it/s]     97%|#########6| 15883/16384 [00:05<00:00, 2732.37it/s]     99%|#########8| 16157/16384 [00:05<00:00, 2729.96it/s]    100%|##########| 16384/16384 [00:06<00:00, 2727.07it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 267/16384 [00:00<00:06, 2660.51it/s]      3%|3         | 541/16384 [00:00<00:05, 2704.18it/s]      5%|4         | 812/16384 [00:00<00:05, 2702.09it/s]      7%|6         | 1086/16384 [00:00<00:05, 2716.03it/s]      8%|8         | 1359/16384 [00:00<00:05, 2719.94it/s]     10%|9         | 1632/16384 [00:00<00:05, 2723.00it/s]     12%|#1        | 1906/16384 [00:00<00:05, 2728.13it/s]     13%|#3        | 2179/16384 [00:00<00:05, 2726.71it/s]     15%|#4        | 2453/16384 [00:00<00:05, 2729.80it/s]     17%|#6        | 2727/16384 [00:01<00:05, 2731.09it/s]     18%|#8        | 3001/16384 [00:01<00:04, 2725.99it/s]     20%|#9        | 3274/16384 [00:01<00:04, 2719.96it/s]     22%|##1       | 3546/16384 [00:01<00:04, 2715.35it/s]     23%|##3       | 3819/16384 [00:01<00:04, 2717.95it/s]     25%|##4       | 4093/16384 [00:01<00:04, 2723.90it/s]     27%|##6       | 4366/16384 [00:01<00:04, 2710.18it/s]     28%|##8       | 4640/16384 [00:01<00:04, 2716.36it/s]     30%|##9       | 4912/16384 [00:01<00:04, 2715.06it/s]     32%|###1      | 5184/16384 [00:01<00:04, 2716.49it/s]     33%|###3      | 5458/16384 [00:02<00:04, 2720.95it/s]     35%|###4      | 5734/16384 [00:02<00:03, 2730.88it/s]     37%|###6      | 6008/16384 [00:02<00:03, 2727.43it/s]     38%|###8      | 6281/16384 [00:02<00:03, 2727.48it/s]     40%|####      | 6556/16384 [00:02<00:03, 2733.30it/s]     42%|####1     | 6830/16384 [00:02<00:03, 2733.39it/s]     43%|####3     | 7104/16384 [00:02<00:03, 2730.91it/s]     45%|####5     | 7378/16384 [00:02<00:03, 2730.84it/s]     47%|####6     | 7652/16384 [00:02<00:03, 2720.16it/s]     48%|####8     | 7925/16384 [00:02<00:03, 2716.61it/s]     50%|#####     | 8200/16384 [00:03<00:03, 2725.75it/s]     52%|#####1    | 8474/16384 [00:03<00:02, 2729.85it/s]     53%|#####3    | 8748/16384 [00:03<00:02, 2731.28it/s]     55%|#####5    | 9023/16384 [00:03<00:02, 2734.69it/s]     57%|#####6    | 9297/16384 [00:03<00:02, 2733.80it/s]     58%|#####8    | 9572/16384 [00:03<00:02, 2735.73it/s]     60%|######    | 9846/16384 [00:03<00:02, 2734.89it/s]     62%|######1   | 10120/16384 [00:03<00:02, 2735.21it/s]     63%|######3   | 10394/16384 [00:03<00:02, 2725.06it/s]     65%|######5   | 10669/16384 [00:03<00:02, 2729.62it/s]     67%|######6   | 10942/16384 [00:04<00:02, 2715.53it/s]     68%|######8   | 11215/16384 [00:04<00:01, 2718.02it/s]     70%|#######   | 11488/16384 [00:04<00:01, 2720.21it/s]     72%|#######1  | 11761/16384 [00:04<00:01, 2707.39it/s]     73%|#######3  | 12036/16384 [00:04<00:01, 2718.61it/s]     75%|#######5  | 12309/16384 [00:04<00:01, 2720.21it/s]     77%|#######6  | 12582/16384 [00:04<00:01, 2722.62it/s]     78%|#######8  | 12856/16384 [00:04<00:01, 2724.60it/s]     80%|########  | 13131/16384 [00:04<00:01, 2731.35it/s]     82%|########1 | 13408/16384 [00:04<00:01, 2742.82it/s]     84%|########3 | 13683/16384 [00:05<00:00, 2738.65it/s]     85%|########5 | 13957/16384 [00:05<00:00, 2738.69it/s]     87%|########6 | 14231/16384 [00:05<00:00, 2735.37it/s]     89%|########8 | 14505/16384 [00:05<00:00, 2730.61it/s]     90%|######### | 14779/16384 [00:05<00:00, 2727.18it/s]     92%|#########1| 15052/16384 [00:05<00:00, 2725.90it/s]     94%|#########3| 15327/16384 [00:05<00:00, 2731.57it/s]     95%|#########5| 15601/16384 [00:05<00:00, 2731.88it/s]     97%|#########6| 15875/16384 [00:05<00:00, 2726.41it/s]     99%|#########8| 16148/16384 [00:05<00:00, 2704.35it/s]    100%|##########| 16384/16384 [00:06<00:00, 2723.93it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 270/16384 [00:00<00:05, 2694.67it/s]      3%|3         | 544/16384 [00:00<00:05, 2716.93it/s]      5%|4         | 816/16384 [00:00<00:05, 2712.86it/s]      7%|6         | 1089/16384 [00:00<00:05, 2719.39it/s]      8%|8         | 1361/16384 [00:00<00:05, 2702.90it/s]     10%|9         | 1632/16384 [00:00<00:05, 2667.90it/s]     12%|#1        | 1899/16384 [00:00<00:05, 2657.46it/s]     13%|#3        | 2165/16384 [00:00<00:05, 2642.07it/s]     15%|#4        | 2430/16384 [00:00<00:05, 2635.53it/s]     16%|#6        | 2694/16384 [00:01<00:05, 2635.06it/s]     18%|#8        | 2960/16384 [00:01<00:05, 2639.76it/s]     20%|#9        | 3224/16384 [00:01<00:05, 2620.92it/s]     21%|##1       | 3487/16384 [00:01<00:04, 2615.09it/s]     23%|##2       | 3753/16384 [00:01<00:04, 2627.46it/s]     25%|##4       | 4016/16384 [00:01<00:04, 2625.76it/s]     26%|##6       | 4279/16384 [00:01<00:04, 2616.32it/s]     28%|##7       | 4541/16384 [00:01<00:04, 2601.53it/s]     29%|##9       | 4802/16384 [00:01<00:04, 2597.43it/s]     31%|###       | 5062/16384 [00:01<00:04, 2590.98it/s]     33%|###2      | 5326/16384 [00:02<00:04, 2604.29it/s]     34%|###4      | 5591/16384 [00:02<00:04, 2616.81it/s]     36%|###5      | 5853/16384 [00:02<00:04, 2602.61it/s]     37%|###7      | 6124/16384 [00:02<00:03, 2632.21it/s]     39%|###9      | 6395/16384 [00:02<00:03, 2654.99it/s]     41%|####      | 6663/16384 [00:02<00:03, 2660.92it/s]     42%|####2     | 6934/16384 [00:02<00:03, 2675.28it/s]     44%|####3     | 7205/16384 [00:02<00:03, 2684.06it/s]     46%|####5     | 7477/16384 [00:02<00:03, 2693.47it/s]     47%|####7     | 7749/16384 [00:02<00:03, 2700.16it/s]     49%|####8     | 8021/16384 [00:03<00:03, 2705.78it/s]     51%|#####     | 8292/16384 [00:03<00:02, 2703.33it/s]     52%|#####2    | 8564/16384 [00:03<00:02, 2707.83it/s]     54%|#####3    | 8835/16384 [00:03<00:02, 2707.24it/s]     56%|#####5    | 9107/16384 [00:03<00:02, 2710.80it/s]     57%|#####7    | 9379/16384 [00:03<00:02, 2709.46it/s]     59%|#####8    | 9650/16384 [00:03<00:02, 2709.49it/s]     61%|######    | 9921/16384 [00:03<00:02, 2705.01it/s]     62%|######2   | 10193/16384 [00:03<00:02, 2708.82it/s]     64%|######3   | 10464/16384 [00:03<00:02, 2706.97it/s]     66%|######5   | 10735/16384 [00:04<00:02, 2706.81it/s]     67%|######7   | 11007/16384 [00:04<00:01, 2709.98it/s]     69%|######8   | 11279/16384 [00:04<00:01, 2710.70it/s]     71%|#######   | 11551/16384 [00:04<00:01, 2707.31it/s]     72%|#######2  | 11822/16384 [00:04<00:01, 2687.51it/s]     74%|#######3  | 12091/16384 [00:04<00:01, 2672.55it/s]     75%|#######5  | 12359/16384 [00:04<00:01, 2633.05it/s]     77%|#######7  | 12623/16384 [00:04<00:01, 2616.93it/s]     79%|#######8  | 12890/16384 [00:04<00:01, 2629.89it/s]     80%|########  | 13154/16384 [00:04<00:01, 2628.70it/s]     82%|########1 | 13417/16384 [00:05<00:01, 2599.51it/s]     83%|########3 | 13679/16384 [00:05<00:01, 2604.10it/s]     85%|########5 | 13941/16384 [00:05<00:00, 2606.67it/s]     87%|########6 | 14207/16384 [00:05<00:00, 2620.40it/s]     88%|########8 | 14476/16384 [00:05<00:00, 2640.27it/s]     90%|######### | 14748/16384 [00:05<00:00, 2662.64it/s]     92%|#########1| 15018/16384 [00:05<00:00, 2672.82it/s]     93%|#########3| 15291/16384 [00:05<00:00, 2687.88it/s]     95%|#########4| 15562/16384 [00:05<00:00, 2693.01it/s]     97%|#########6| 15834/16384 [00:05<00:00, 2699.51it/s]     98%|#########8| 16104/16384 [00:06<00:00, 2678.72it/s]    100%|#########9| 16372/16384 [00:06<00:00, 2673.15it/s]    100%|##########| 16384/16384 [00:06<00:00, 2662.02it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 270/16384 [00:00<00:05, 2690.61it/s]      3%|3         | 540/16384 [00:00<00:05, 2665.58it/s]      5%|4         | 807/16384 [00:00<00:05, 2663.01it/s]      7%|6         | 1076/16384 [00:00<00:05, 2672.78it/s]      8%|8         | 1344/16384 [00:00<00:05, 2665.94it/s]     10%|9         | 1611/16384 [00:00<00:05, 2657.65it/s]     11%|#1        | 1877/16384 [00:00<00:05, 2654.29it/s]     13%|#3        | 2147/16384 [00:00<00:05, 2667.60it/s]     15%|#4        | 2414/16384 [00:00<00:05, 2639.46it/s]     16%|#6        | 2679/16384 [00:01<00:05, 2639.55it/s]     18%|#7        | 2946/16384 [00:01<00:05, 2647.12it/s]     20%|#9        | 3211/16384 [00:01<00:04, 2644.44it/s]     21%|##1       | 3477/16384 [00:01<00:04, 2647.23it/s]     23%|##2       | 3743/16384 [00:01<00:04, 2650.92it/s]     25%|##4       | 4015/16384 [00:01<00:04, 2669.23it/s]     26%|##6       | 4284/16384 [00:01<00:04, 2674.50it/s]     28%|##7       | 4554/16384 [00:01<00:04, 2680.72it/s]     29%|##9       | 4823/16384 [00:01<00:04, 2681.31it/s]     31%|###1      | 5092/16384 [00:01<00:04, 2681.51it/s]     33%|###2      | 5361/16384 [00:02<00:04, 2678.61it/s]     34%|###4      | 5631/16384 [00:02<00:04, 2683.48it/s]     36%|###6      | 5900/16384 [00:02<00:03, 2679.33it/s]     38%|###7      | 6170/16384 [00:02<00:03, 2685.38it/s]     39%|###9      | 6439/16384 [00:02<00:03, 2680.17it/s]     41%|####      | 6708/16384 [00:02<00:03, 2666.04it/s]     43%|####2     | 6975/16384 [00:02<00:03, 2663.69it/s]     44%|####4     | 7243/16384 [00:02<00:03, 2665.92it/s]     46%|####5     | 7514/16384 [00:02<00:03, 2677.20it/s]     47%|####7     | 7782/16384 [00:02<00:03, 2665.19it/s]     49%|####9     | 8049/16384 [00:03<00:03, 2662.93it/s]     51%|#####     | 8316/16384 [00:03<00:03, 2657.95it/s]     52%|#####2    | 8584/16384 [00:03<00:02, 2663.17it/s]     54%|#####4    | 8856/16384 [00:03<00:02, 2678.35it/s]     56%|#####5    | 9125/16384 [00:03<00:02, 2679.17it/s]     57%|#####7    | 9395/16384 [00:03<00:02, 2684.57it/s]     59%|#####8    | 9664/16384 [00:03<00:02, 2670.52it/s]     61%|######    | 9932/16384 [00:03<00:02, 2667.47it/s]     62%|######2   | 10200/16384 [00:03<00:02, 2669.11it/s]     64%|######3   | 10473/16384 [00:03<00:02, 2685.72it/s]     66%|######5   | 10744/16384 [00:04<00:02, 2692.18it/s]     67%|######7   | 11014/16384 [00:04<00:01, 2691.92it/s]     69%|######8   | 11284/16384 [00:04<00:01, 2670.81it/s]     71%|#######   | 11552/16384 [00:04<00:01, 2667.66it/s]     72%|#######2  | 11820/16384 [00:04<00:01, 2669.68it/s]     74%|#######3  | 12087/16384 [00:04<00:01, 2640.57it/s]     75%|#######5  | 12352/16384 [00:04<00:01, 2637.33it/s]     77%|#######7  | 12616/16384 [00:04<00:01, 2624.44it/s]     79%|#######8  | 12881/16384 [00:04<00:01, 2631.50it/s]     80%|########  | 13149/16384 [00:04<00:01, 2643.88it/s]     82%|########1 | 13414/16384 [00:05<00:01, 2638.69it/s]     83%|########3 | 13678/16384 [00:05<00:01, 2635.04it/s]     85%|########5 | 13942/16384 [00:05<00:00, 2630.94it/s]     87%|########6 | 14208/16384 [00:05<00:00, 2635.92it/s]     88%|########8 | 14472/16384 [00:05<00:00, 2622.10it/s]     90%|########9 | 14735/16384 [00:05<00:00, 2612.92it/s]     92%|#########1| 14997/16384 [00:05<00:00, 2612.80it/s]     93%|#########3| 15266/16384 [00:05<00:00, 2635.59it/s]     95%|#########4| 15535/16384 [00:05<00:00, 2650.40it/s]     96%|#########6| 15802/16384 [00:05<00:00, 2655.48it/s]     98%|#########8| 16068/16384 [00:06<00:00, 2656.33it/s]    100%|#########9| 16334/16384 [00:06<00:00, 2656.85it/s]    100%|##########| 16384/16384 [00:06<00:00, 2659.60it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 268/16384 [00:00<00:06, 2673.37it/s]      3%|3         | 536/16384 [00:00<00:05, 2672.90it/s]      5%|4         | 807/16384 [00:00<00:05, 2688.79it/s]      7%|6         | 1079/16384 [00:00<00:05, 2699.27it/s]      8%|8         | 1349/16384 [00:00<00:05, 2692.94it/s]     10%|9         | 1620/16384 [00:00<00:05, 2697.45it/s]     12%|#1        | 1890/16384 [00:00<00:05, 2683.15it/s]     13%|#3        | 2159/16384 [00:00<00:05, 2682.99it/s]     15%|#4        | 2428/16384 [00:00<00:05, 2677.64it/s]     16%|#6        | 2696/16384 [00:01<00:05, 2644.45it/s]     18%|#8        | 2962/16384 [00:01<00:05, 2646.91it/s]     20%|#9        | 3230/16384 [00:01<00:04, 2655.09it/s]     21%|##1       | 3503/16384 [00:01<00:04, 2676.79it/s]     23%|##3       | 3775/16384 [00:01<00:04, 2687.74it/s]     25%|##4       | 4046/16384 [00:01<00:04, 2692.66it/s]     26%|##6       | 4316/16384 [00:01<00:04, 2673.82it/s]     28%|##7       | 4584/16384 [00:01<00:04, 2648.34it/s]     30%|##9       | 4849/16384 [00:01<00:04, 2638.24it/s]     31%|###1      | 5116/16384 [00:01<00:04, 2647.60it/s]     33%|###2      | 5385/16384 [00:02<00:04, 2660.11it/s]     35%|###4      | 5657/16384 [00:02<00:04, 2675.34it/s]     36%|###6      | 5928/16384 [00:02<00:03, 2683.15it/s]     38%|###7      | 6197/16384 [00:02<00:03, 2679.80it/s]     39%|###9      | 6465/16384 [00:02<00:03, 2677.07it/s]     41%|####1     | 6733/16384 [00:02<00:03, 2674.27it/s]     43%|####2     | 7001/16384 [00:02<00:03, 2674.82it/s]     44%|####4     | 7269/16384 [00:02<00:03, 2670.81it/s]     46%|####6     | 7541/16384 [00:02<00:03, 2683.37it/s]     48%|####7     | 7814/16384 [00:02<00:03, 2695.75it/s]     49%|####9     | 8086/16384 [00:03<00:03, 2701.54it/s]     51%|#####1    | 8358/16384 [00:03<00:02, 2704.69it/s]     53%|#####2    | 8629/16384 [00:03<00:02, 2705.59it/s]     54%|#####4    | 8901/16384 [00:03<00:02, 2708.60it/s]     56%|#####5    | 9174/16384 [00:03<00:02, 2713.40it/s]     58%|#####7    | 9446/16384 [00:03<00:02, 2696.68it/s]     59%|#####9    | 9716/16384 [00:03<00:02, 2679.77it/s]     61%|######    | 9988/16384 [00:03<00:02, 2689.67it/s]     63%|######2   | 10259/16384 [00:03<00:02, 2695.07it/s]     64%|######4   | 10530/16384 [00:03<00:02, 2698.79it/s]     66%|######5   | 10802/16384 [00:04<00:02, 2704.29it/s]     68%|######7   | 11073/16384 [00:04<00:01, 2697.62it/s]     69%|######9   | 11343/16384 [00:04<00:01, 2662.18it/s]     71%|#######   | 11610/16384 [00:04<00:01, 2633.01it/s]     72%|#######2  | 11874/16384 [00:04<00:01, 2610.17it/s]     74%|#######4  | 12136/16384 [00:04<00:01, 2553.64it/s]     76%|#######5  | 12392/16384 [00:04<00:01, 2489.18it/s]     77%|#######7  | 12642/16384 [00:04<00:01, 2468.69it/s]     79%|#######8  | 12892/16384 [00:04<00:01, 2476.55it/s]     80%|########  | 13158/16384 [00:04<00:01, 2527.51it/s]     82%|########1 | 13422/16384 [00:05<00:01, 2559.95it/s]     83%|########3 | 13679/16384 [00:05<00:01, 2531.95it/s]     85%|########5 | 13939/16384 [00:05<00:00, 2551.18it/s]     87%|########6 | 14195/16384 [00:05<00:00, 2489.09it/s]     88%|########8 | 14445/16384 [00:05<00:00, 2474.44it/s]     90%|########9 | 14693/16384 [00:05<00:00, 2371.31it/s]     91%|#########1| 14932/16384 [00:05<00:00, 2329.36it/s]     93%|#########2| 15166/16384 [00:05<00:00, 2310.89it/s]     94%|#########4| 15406/16384 [00:05<00:00, 2335.07it/s]     95%|#########5| 15640/16384 [00:06<00:00, 2330.91it/s]     97%|#########6| 15874/16384 [00:06<00:00, 2331.50it/s]     98%|#########8| 16120/16384 [00:06<00:00, 2366.04it/s]    100%|#########9| 16382/16384 [00:06<00:00, 2440.47it/s]    100%|##########| 16384/16384 [00:06<00:00, 2598.84it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 22 minutes  34.334 seconds)


.. _sphx_glr_download_tutorials_b_high_level_simulation_plot_e_switched_capacitor_digital_control.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_e_switched_capacitor_digital_control.py <plot_e_switched_capacitor_digital_control.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_e_switched_capacitor_digital_control.ipynb <plot_e_switched_capacitor_digital_control.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
